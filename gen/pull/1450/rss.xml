<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-29T17:02:51.910585</updated>
  <id>ae2dc55f-f34c-460f-b07b-3ce53c0d0bf7</id>

  
    <entry>
      <title>clear -- fix: markdown format</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>507925290698fc75f0e2c4d05849a850b81da4f3:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-30T01:59:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index 77f01844e..34eaefc58 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -42,7 +42,7 @@ void clear() noexcept;
 1. 全ての要素を走査して各要素を破棄
 2. 全てのバケットを走査して各バケットの状態をリセット
 
-という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: markdown format</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>507925290698fc75f0e2c4d05849a850b81da4f3:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-30T01:59:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index 42e015bfd..9480119e0 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -42,7 +42,7 @@ void clear() noexcept;
 1. 全ての要素を走査して各要素を破棄
 2. 全てのバケットを走査して各バケットの状態をリセット
 
-という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: markdown format</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>507925290698fc75f0e2c4d05849a850b81da4f3:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-30T01:59:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index e3c3f9233..f19039fd3 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -42,7 +42,7 @@ void clear() noexcept;
 1. 全ての要素を走査して各要素を破棄
 2. 全てのバケットを走査して各バケットの状態をリセット
 
-という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: markdown format</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>507925290698fc75f0e2c4d05849a850b81da4f3:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-30T01:59:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index 66d2c8b14..4aabb8fe9 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -42,7 +42,7 @@ void clear() noexcept;
 1. 全ての要素を走査して各要素を破棄
 2. 全てのバケットを走査して各バケットの状態をリセット
 
-という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: indent code block</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>0107d7b93199c7c20a4cb7b513952ff8816b0b0f:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-30T01:56:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index f7890756a..77f01844e 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -50,9 +50,9 @@ void clear() noexcept;
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
-```cpp
-um = std::unordered_map&amp;lt;std::string, int&amp;gt;();
-```
+    ```cpp
+    um = std::unordered_map&amp;lt;std::string, int&amp;gt;();
+    ```
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: indent code block</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>0107d7b93199c7c20a4cb7b513952ff8816b0b0f:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-30T01:56:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index 9eb3aab77..42e015bfd 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -50,9 +50,9 @@ void clear() noexcept;
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
-```cpp
-um = std::unordered_multimap&amp;lt;std::string, int&amp;gt;();
-```
+    ```cpp
+    um = std::unordered_multimap&amp;lt;std::string, int&amp;gt;();
+    ```
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: indent code block</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>0107d7b93199c7c20a4cb7b513952ff8816b0b0f:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-30T01:56:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index 18a00adae..e3c3f9233 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -50,9 +50,9 @@ void clear() noexcept;
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
-```cpp
-ums = std::unordered_multiset&amp;lt;int&amp;gt;();
-```
+    ```cpp
+    ums = std::unordered_multiset&amp;lt;int&amp;gt;();
+    ```
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: indent code block</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>0107d7b93199c7c20a4cb7b513952ff8816b0b0f:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-30T01:56:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index ca24658e1..66d2c8b14 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -50,9 +50,9 @@ void clear() noexcept;
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
-```cpp
-us = std::unordered_set&amp;lt;int&amp;gt;();
-```
+    ```cpp
+    us = std::unordered_set&amp;lt;int&amp;gt;();
+    ```
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>b7bc91cf101774c98f5b100c60f57cd3f9ce064a:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-30T01:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index a398dd962..9eb3aab77 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -37,9 +37,10 @@ void clear() noexcept;
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
 ### 計算量に関する備考
-- 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. 全ての要素を走査して各要素を破棄
-    2. 全てのバケットを走査して各バケットの状態をリセット
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
 
 という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
@@ -48,7 +49,7 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
 ```cpp
 um = std::unordered_multimap&amp;lt;std::string, int&amp;gt;();
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>b7bc91cf101774c98f5b100c60f57cd3f9ce064a:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-30T01:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index 400dbac0b..18a00adae 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -37,9 +37,10 @@ void clear() noexcept;
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
 ### 計算量に関する備考
-- 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. 全ての要素を走査して各要素を破棄
-    2. 全てのバケットを走査して各バケットの状態をリセット
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
 
 という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
@@ -48,7 +49,7 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
 ```cpp
 ums = std::unordered_multiset&amp;lt;int&amp;gt;();
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>b7bc91cf101774c98f5b100c60f57cd3f9ce064a:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-30T01:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index 38e5d5d24..ca24658e1 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -37,9 +37,10 @@ void clear() noexcept;
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
 ### 計算量に関する備考
-- 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. 全ての要素を走査して各要素を破棄
-    2. 全てのバケットを走査して各バケットの状態をリセット
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
 
 という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
@@ -48,7 +49,7 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
 ```cpp
 us = std::unordered_set&amp;lt;int&amp;gt;();
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Apply suggestions from code review</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>457602ec9ed561bf47cb0ad0877ceda8aa07408b:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-30T01:50:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index f4801435c..f7890756a 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -37,9 +37,10 @@ void clear() noexcept;
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
 ### 計算量に関する備考
-- 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. 全ての要素を走査して各要素を破棄
-    2. 全てのバケットを走査して各バケットの状態をリセット
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
 
 という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() * `[`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
 規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
@@ -48,7 +49,7 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
 ```cpp
 um = std::unordered_map&amp;lt;std::string, int&amp;gt;();
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koki Watanabe</name>
        <email>56009584+math-hiyoko@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect discussions on the PR</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>47cef6b54e55c03822566220eac1f78bb97913b2:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-28T22:54:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index 224b2d8f2..f4801435c 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -48,10 +48,9 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- メモリを確実に解放したいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
 ```cpp
-std::unordered_map&amp;lt;std::string, int&amp;gt; tmp;
-s.swap(tmp);
+um = std::unordered_map&amp;lt;std::string, int&amp;gt;();
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect discussions on the PR</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>47cef6b54e55c03822566220eac1f78bb97913b2:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-28T22:54:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index 11fb1a103..a398dd962 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -48,10 +48,9 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- メモリを確実に解放したいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
 ```cpp
-std::unordered_multimap&amp;lt;std::string, int&amp;gt; tmp;
-s.swap(tmp);
+um = std::unordered_multimap&amp;lt;std::string, int&amp;gt;();
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect discussions on the PR</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>47cef6b54e55c03822566220eac1f78bb97913b2:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-28T22:54:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index aadc66f8f..400dbac0b 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -48,10 +48,9 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- メモリを確実に解放したいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
 ```cpp
-std::unordered_multiset&amp;lt;int&amp;gt; tmp;
-s.swap(tmp);
+ums = std::unordered_multiset&amp;lt;int&amp;gt;();
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: reflect discussions on the PR</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>47cef6b54e55c03822566220eac1f78bb97913b2:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-28T22:54:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index acd8bc23c..38e5d5d24 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -48,10 +48,9 @@ void clear() noexcept;
 ## 備考
 - `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
 実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
-- メモリを確実に解放したいときには以下のように操作を行う
+- バケット数を初期状態まで縮小させたいときには以下のように操作を行う
 ```cpp
-std::unordered_set&amp;lt;int&amp;gt; tmp;
-s.swap(tmp);
+us = std::unordered_set&amp;lt;int&amp;gt;();
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
</feed>