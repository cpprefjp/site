<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-25T15:41:39.925224</updated>
  <id>5d56d7da-a396-4732-a6f5-8538b669230b</id>

  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>e6690f088d59faee2203dae918e1375b6900791f:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-26T00:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index 0cea90a25..b4fcf646e 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -34,8 +34,8 @@ void clear() noexcept;
 
 
 ## 備考
-- clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
+- `clear()` は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_multimap&amp;lt;std::string, int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>e6690f088d59faee2203dae918e1375b6900791f:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-26T00:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index ef733cb02..73a6c20d5 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -34,8 +34,8 @@ void clear() noexcept;
 
 
 ## 備考
-- clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
+- `clear()` は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_multiset&amp;lt;int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>e6690f088d59faee2203dae918e1375b6900791f:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-26T00:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index f734aef3e..3f8b24f45 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -34,8 +34,8 @@ void clear() noexcept;
 
 
 ## 備考
-- clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
+- `clear()` は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_set&amp;lt;int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Apply suggestions from code review</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>bb0ffafab558ff1b5551f22c3329e60e16798d42:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-26T00:34:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index bd0b88a23..07aa45df0 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -34,8 +34,8 @@ void clear() noexcept;
 
 
 ## 備考
-- clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
+- `clear()` は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_map&amp;lt;std::string, int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>56009584+math-hiyoko@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: amend procedure</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>3bb29a21a224749d75c2ced270b2bf59fd8a61d4:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-26T00:16:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index 610429a35..bd0b88a23 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -48,8 +48,8 @@ s.swap(tmp);
 
 ### 計算量に関する備考
 - 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. すべてのバケットを順に走査し
-    2. 各バケットを破棄する
+    1. 全ての要素を破棄する
+    2. 全てのバケットを順に走査して各バケットを破棄
 
 という手順を取るため、実行時間は概ね [`bucket_count`](bucket_count.md)`()` + [`size`](size.md)`()` に比例する傾向がある。  
 これは規格が定義する「計算量」（オブジェクトに対する操作の数）とは別物である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: amend procedure</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>3bb29a21a224749d75c2ced270b2bf59fd8a61d4:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-26T00:16:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index ab16a56df..0cea90a25 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -48,8 +48,8 @@ s.swap(tmp);
 
 ### 計算量に関する備考
 - 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. すべてのバケットを順に走査し
-    2. 各バケットを破棄する
+    1. 全ての要素を破棄する
+    2. 全てのバケットを順に走査して各バケットを破棄
 
 という手順を取るため、実行時間は概ね [`bucket_count`](bucket_count.md)`()` + [`size`](size.md)`()` に比例する傾向がある。  
 これは規格が定義する「計算量」（オブジェクトに対する操作の数）とは別物である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: amend procedure</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>3bb29a21a224749d75c2ced270b2bf59fd8a61d4:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-26T00:16:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index bef4ac38b..ef733cb02 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -48,8 +48,8 @@ s.swap(tmp);
 
 ### 計算量に関する備考
 - 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. すべてのバケットを順に走査し
-    2. 各バケットを破棄する
+    1. 全ての要素を破棄する
+    2. 全てのバケットを順に走査して各バケットを破棄
 
 という手順を取るため、実行時間は概ね [`bucket_count`](bucket_count.md)`()` + [`size`](size.md)`()` に比例する傾向がある。  
 これは規格が定義する「計算量」（オブジェクトに対する操作の数）とは別物である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- fix: amend procedure</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>3bb29a21a224749d75c2ced270b2bf59fd8a61d4:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-26T00:16:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index a28105970..f734aef3e 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -48,8 +48,8 @@ s.swap(tmp);
 
 ### 計算量に関する備考
 - 多くの実装（GCC libstdc++, LLVM libc++ など）は
-    1. すべてのバケットを順に走査し
-    2. 各バケットを破棄する
+    1. 全ての要素を破棄する
+    2. 全てのバケットを順に走査して各バケットを破棄
 
 という手順を取るため、実行時間は概ね [`bucket_count`](bucket_count.md)`()` + [`size`](size.md)`()` に比例する傾向がある。  
 これは規格が定義する「計算量」（オブジェクトに対する操作の数）とは別物である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>b25ee37d0372f32dec1ad9ef183cfc5dc55d2271:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-26T00:14:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index b57e326f0..ab16a56df 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -35,7 +35,7 @@ void clear() noexcept;
 
 ## 備考
 - clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が温存され、動的メモリが残る場合がある。
+実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_multimap&amp;lt;std::string, int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>b25ee37d0372f32dec1ad9ef183cfc5dc55d2271:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-26T00:14:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index 0c02d3ef4..bef4ac38b 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -35,7 +35,7 @@ void clear() noexcept;
 
 ## 備考
 - clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が温存され、動的メモリが残る場合がある。
+実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_multiset&amp;lt;int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- reflect suggestions</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>b25ee37d0372f32dec1ad9ef183cfc5dc55d2271:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-26T00:14:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index 72acb0a6b..a28105970 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -35,7 +35,7 @@ void clear() noexcept;
 
 ## 備考
 - clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が温存され、動的メモリが残る場合がある。
+実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_set&amp;lt;int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>address8128@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Update reference/unordered_map/unordered_map/clear.md</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>f572dabcf8c9b588b8b4ba14c20f4bd8a9bc0087:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-25T23:42:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index 15cf893c7..610429a35 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -35,7 +35,7 @@ void clear() noexcept;
 
 ## 備考
 - clear() は バケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格上は要求していない。
-実装によっては clear 後もバケット配列が温存され、動的メモリが残る場合がある。
+実装によっては clear 後もバケット配列が維持され、動的メモリが残る場合がある。
 - メモリを確実に解放したいときには以下のように操作を行う
 ```CPP
 std::unordered_map&amp;lt;std::string, int&amp;gt; tmp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>koki watanabe</name>
        <email>56009584+math-hiyoko@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>