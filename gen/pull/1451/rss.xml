<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-22T12:33:20.130200</updated>
  <id>197dc032-182c-4a32-b23a-ec1735f2631a</id>

  
    <entry>
      <title>find -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/find.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find.md b/reference/string/basic_string/find.md
index 8f6ffd1c1..2fd2c4437 100644
--- a/reference/string/basic_string/find.md
+++ b/reference/string/basic_string/find.md
@@ -64,11 +64,11 @@ constexpr size_type
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` と一致する位置を返す。
-- (2) `pos` 以降で最初に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致する位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
+- (1) : `pos` 以降で最初に `str` と一致する位置を返す。
+- (2) : `pos` 以降で最初に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致する位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -76,8 +76,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_not_of -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_not_of.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/find_first_not_of.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_not_of.md b/reference/string/basic_string/find_first_not_of.md
index f3a1df692..b9f1fe420 100644
--- a/reference/string/basic_string/find_first_not_of.md
+++ b/reference/string/basic_string/find_first_not_of.md
@@ -58,15 +58,15 @@ constexpr size_type
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` 以降で最初に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致しない文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
+- (1) : `pos` 以降で最初に `str` 内に存在しない文字の位置を返す。
+- (2) : `pos` 以降で最初に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致しない文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -74,8 +74,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/find_first_of.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_of.md b/reference/string/basic_string/find_first_of.md
index 2e1bed619..2853865ff 100644
--- a/reference/string/basic_string/find_first_of.md
+++ b/reference/string/basic_string/find_first_of.md
@@ -57,15 +57,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以降で最初に `str` 内に存在する文字の位置を返す。
-- (2) `pos` 以降で最初に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以降で最初に `c` と一致する文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
+- (1) : `pos` 以降で最初に `str` 内に存在する文字の位置を返す。
+- (2) : `pos` 以降で最初に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以降で最初に `c` と一致する文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -73,8 +73,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 4496453a2..6be710f9b 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -59,15 +59,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致しない文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
+- (1) : `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
+- (2) : `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致しない文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -75,8 +75,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/find_last_of.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 3300f5867..46549478f 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -57,15 +57,15 @@ constexpr size_type
 
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
-- (2) `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致する文字の位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
+- (1) : `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
+- (2) : `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致する文字の位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -73,8 +73,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- basic_string : オーバーロードと説明の区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>80bd5f9e7674d7d24afdf983ae8aaeada2c40912:reference/string/basic_string/rfind.md</id>
      <updated>2025-05-22T21:29:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index 1b35fd6f5..baff9ae8d 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -56,15 +56,15 @@ constexpr size_type
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
-(3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
+- (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
 
 
 ## 効果
-- (1) `pos` 以前で最後に `str` と一致する位置を返す。
-- (2) `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
-- (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` 以前で最後に `c` と一致する位置を返す。
-- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
+- (1) : `pos` 以前で最後に `str` と一致する位置を返す。
+- (2) : `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (3) : (2) と同様だが、こちらは NULL 終端の文字列を扱う。
+- (4) : `pos` 以前で最後に `c` と一致する位置を返す。
+- (5) : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -72,8 +72,8 @@ constexpr size_type
 
 
 ## 例外
-- (1) 投げない
-- (5) `noexcept`内の式は、以下と等価である
+- (1) : 投げない
+- (5) : `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- charconv/to_chars : 「(6)～(13)」を「(6)-(13)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>2cca94f9b1f61885178ab97c8b99f68d64f1f538:reference/charconv/to_chars.md</id>
      <updated>2025-05-22T21:26:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index a337df453..ed77a9bb0 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -119,7 +119,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 ## 要件
 - 全て : 出力イテレータ範囲`[first, last)`は有効な範囲であること（charのオブジェクトが構築済みであり、連続していること）。
 - (1) : `base`は2～36までの値であること。
-- (6)～(13)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
+- (6)-(13)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
 
 ## 引数
 - `first` -- 変換結果の文字列を出力する範囲の先頭ポインタ。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- equal : 「(1) (2)」を「(1), (2)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/equal.html"/>
      <id>2f17d2a3d7cede4846c3bd8bf144b013b0622f1b:reference/algorithm/equal.md</id>
      <updated>2025-05-22T21:25:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/equal.md b/reference/algorithm/equal.md
index 513364df0..913ea9a08 100644
--- a/reference/algorithm/equal.md
+++ b/reference/algorithm/equal.md
@@ -112,7 +112,7 @@ namespace std {
 
 
 ## 備考
-- ランダムアクセスイテレータの範囲を使用する場合、状況によっては(1) (2)のバージョンよりも、(3) (4)を使用する方が効率がよくなることが期待できる。ランダムアクセスイテレータはイテレータ同士の差を定数時間で求められるため、イテレーションを行うことなく2つの範囲の要素数が異なることを検出できるためである
+- ランダムアクセスイテレータの範囲を使用する場合、状況によっては(1), (2)のバージョンよりも、(3), (4)を使用する方が効率がよくなることが期待できる。ランダムアクセスイテレータはイテレータ同士の差を定数時間で求められるため、イテレーションを行うことなく2つの範囲の要素数が異なることを検出できるためである
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/search.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/algorithm/search.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/search.md b/reference/algorithm/search.md
index ab73e1014..a131fca3f 100644
--- a/reference/algorithm/search.md
+++ b/reference/algorithm/search.md
@@ -97,7 +97,7 @@ namespace std {
 
 
 ## 備考
-- (1)〜(4) : `search()` と [`find_end()`](find_end.md) は共にサブシーケンスを検索する関数だが、以下の点が異なる。
+- (1)-(4) : `search()` と [`find_end()`](find_end.md) は共にサブシーケンスを検索する関数だが、以下の点が異なる。
     - `search()` は見つかった最初のサブシーケンスを返すが [`find_end()`](find_end.md) は見つかった最後のサブシーケンスを返す
     - `[first2,last2)` が空であるときに `search()` は `first1` を返すが、[`find_end()`](find_end.md) は `last1` を返す
 - (5) : `Searcher`は[`std::copy_constructible`](/reference/concepts/copy_constructible.md)要件を満たす必要はない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/charconv/from_chars.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index f0581a3f3..03215c68a 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -62,7 +62,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 ## 要件
 - 全て : 入力イテレータ範囲`[first, last)`は有効な範囲であること（charのオブジェクトが構築済みであり、連続していること）。
 - (1) : `base`は2～36までの値であること。
-- (2)～(4)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
+- (2)-(4)  : `fmt`は[`chars_format`](../charconv/chars_format.md)の列挙値のうちの一つであること。
 
 ## 引数
 - `first` -- 入力文字列の先頭ポインタ。
@@ -80,7 +80,7 @@ C++標準はこれら関数の実装の詳細について何も規定しない
     nを基数としたCロケールによる`strtol`で変換する際と同様のパターンを用いる。  
     ただし、`value`の型が符号付である場合にのみ`-`は考慮され、`+`や16進数の`0x`等の他の記号は考慮されない。
     
-- (2)～(5) : 浮動小数点数字列を浮動小数点数へ変換する。  
+- (2)-(5) : 浮動小数点数字列を浮動小数点数へ変換する。  
     Cロケールによる`strtod`で変換する際と同様のパターンを用いる。ただし、以下の違いがある。  
     数字の先頭の符号は`-`のみが考慮され、`+`等は考慮されない。  
     また、`fmt`に`chars_format::general`が設定されておらず（`scientific`と`fixed`が同時に設定されておらず）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator_construction_args -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/memory/uses_allocator_construction_args.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator_construction_args.md b/reference/memory/uses_allocator_construction_args.md
index 3fbbeec45..133a4af45 100644
--- a/reference/memory/uses_allocator_construction_args.md
+++ b/reference/memory/uses_allocator_construction_args.md
@@ -35,7 +35,7 @@ template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
 
 ## テンプレートパラメータ制約
 - (1) : `T` が [`pair`](../utility/pair.md) の特殊化**ではない**場合のみオーバーロード解決に参加する
-- (2)～(6) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
+- (2)-(6) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
 
 
 ## 戻り値
@@ -141,7 +141,7 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 	ただし、実際には構築まで実施する [`make_obj_using_allocator`](make_obj_using_allocator.md) や [`uninitialized_construct_using_allocator`](uninitialized_construct_using_allocator.md) が存在するため、これらの関数を直接呼び出す機会はあまり多くはないだろう。
 - 上記 (1) を見ればわかる通り、uses-allocator 構築は、その名前に反して必ずしもアロケータオブジェクトを使うとは限らないので注意。  
 	（[`uses_allocator_v`](uses_allocator.md)`&amp;lt;T, Alloc&amp;gt;` が `false` の場合、アロケータオブジェクト `alloc` は無視される）
-- 上記 (2)～(6) を見ればわかる通り、`T` が [`pair`](../utility/pair.md) の場合には再帰的に `uses_allocator_construction_args` を呼び出しているため、ネストした [`pair`](../utility/pair.md) に対しても正しく uses-allocator 構築をサポートできる。
+- 上記 (2)-(6) を見ればわかる通り、`T` が [`pair`](../utility/pair.md) の場合には再帰的に `uses_allocator_construction_args` を呼び出しているため、ネストした [`pair`](../utility/pair.md) に対しても正しく uses-allocator 構築をサポートできる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index 45e9ac08c..f655a5dad 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -74,17 +74,17 @@ namespace std {
 
 ## 効果
 
-### (1)～(5) 文字の書式化出力
+### (1)-(5) 文字の書式化出力
 
 文字 `c` を出力ストリーム `os` に出力する。この際、`os` に設定されている幅、埋め文字、および、整列方向に従う。  
 なお、(2) の形式（`os` の文字型（`char_type`）が `char` 以外で `c` が `char` ）の時は、`c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (6)～(12) 文字の書式化出力 (C++20)
+### (6)-(12) 文字の書式化出力 (C++20)
 
 これらの関数は削除されている
 
-### (13)～(17) 文字列の書式化出力
+### (13)-(17) 文字列の書式化出力
 
 ヌル終端文字列 `s` を出力ストリーム `os` に出力する。この際、`os` に設定されている幅、埋め文字、および、整列方向に従う。  
 出力する文字列の長さは以下で求める。
@@ -96,7 +96,7 @@ namespace std {
 なお、(14) の形式（`os` の文字型（`char_type`）が `char` 以外で `s` が `const char*`）の時は、`s` の各文字 `c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (18)～(24) 文字列の書式化出力 (C++20)
+### (18)-(24) 文字列の書式化出力 (C++20)
 
 これらの関数は削除されている
 
@@ -148,7 +148,7 @@ cpprefjp++
 cpprefjp++
 ```
 
-### (3)～(5), (15)～(17) の例
+### (3)-(5), (15)-(17) の例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iomanip&amp;gt;
@@ -227,7 +227,7 @@ int main()
 
 これは`char8_t`/`char16_t`/`char32_t`に対するostreamの`operator&amp;lt;&amp;lt;`が提供されないため、他のオーバーロードが選ばれるためにこのような直感に反する挙動が発生する。
 
-そこで(6)～(12), (18)～(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
+そこで(6)-(12), (18)-(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
 
 [機能テストマクロ](/lang/cpp20/feature_test_macros.md)は`__cpp_lib_char8_t`で、値は`201907`。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/regex/regex_token_iterator/op_constructor.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/regex/regex_token_iterator/op_constructor.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/regex_token_iterator/op_constructor.md b/reference/regex/regex_token_iterator/op_constructor.md
index 3f9403e0b..c6b22ca93 100644
--- a/reference/regex/regex_token_iterator/op_constructor.md
+++ b/reference/regex/regex_token_iterator/op_constructor.md
@@ -57,12 +57,12 @@ regex_token_iterator(const regex_token_iterator&amp;amp;);
 
 ## 効果
 - (1) デフォルトコンストラクタ。シーケンス終端イテレータ（シーケンスの終端を示す特別なイテレータ）を構築する。
-- (2)～(5) メンバ変数 `subs` を、引数 `submatch` の 1 要素のみで（(2) の形式の場合）、あるいは、引数 `submatches` で（(3)～(5) の形式の場合）初期化する。
+- (2)-(5) メンバ変数 `subs` を、引数 `submatch` の 1 要素のみで（(2) の形式の場合）、あるいは、引数 `submatches` で（(3)-(5) の形式の場合）初期化する。
     また、メンバ変数 `N`、`position` をそれぞれ、`0`、[`regex_iterator`](../regex_iterator.md)`&amp;lt;BidirectionalIterator&amp;gt;(a, b, re, m)` で初期化する。
     もし、`position` がシーケンス終端イテレータでなければ、メンバ変数 `result` を現在のマッチ（備考参照）のアドレスに設定する。  
     そうでなくて、もし、メンバ変数 `subs` が `-1` を含んでいたら、`*this` を範囲 `[a, b)` を指す接尾辞イテレータとして設定する。  
     そうでなければ、`*this` をシーケンス終端イテレータとして設定する。
-- (6)～(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)～(5) の形式の `re` の型を `const regex_type&amp;amp;` から `regex_type&amp;amp;&amp;amp;` に変更したもの）
+- (6)-(9) deleted コンストラクタであるため、使用するとコンパイルエラーとなる。（(2)-(5) の形式の `re` の型を `const regex_type&amp;amp;` から `regex_type&amp;amp;&amp;amp;` に変更したもの）
 - (10) コピーコンストラクタ。
 
 
@@ -70,8 +70,8 @@ regex_token_iterator(const regex_token_iterator&amp;amp;);
 - 「現在のマッチ」とは、もし `subs[N]` が -1 の場合には `(*position).`[`prefix`](../match_results/prefix.md)`()`、そうでなければ `(*position).[subs[N]]` の事を指す。
 - メンバ変数 `subs`、`N`、`position`、`result` はあくまでも説明用のプライベートメンバ変数であるため、注意すること。
 - `regex_token_iterator` は、メンバ変数 `position` を通して指定された正規表現 `re` のコピーではなく、`re` へのポインタをオブジェクト内に保持するため、引数に渡した正規表現オブジェクトは当該イテレータを使用し終わるまで破棄されないようにする必要がある。  
-    従って、(2)～(5) の形式のコンストラクタに渡す引数 `re` に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。  
-    (6)～(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。  
+    従って、(2)-(5) の形式のコンストラクタに渡す引数 `re` に一時オブジェクトを指定することはほぼ間違いなくプログラミング上のエラーを意味する。  
+    (6)-(9) の形式のコンストラクタが C++14 で追加された理由は、この事態をコンパイル時に検出するためである。  
     しかし、この追加のため、C++11 では適格となりうる以下のようなコードは C++14 ではコンパイルエラーになる。
     ```cpp
     void f(std::sregex_token_iterator&amp;amp;&amp;amp;);
@@ -161,5 +161,5 @@ match range = (67, 73), str = &amp;#39;value3&amp;#39;
 
 
 ### 備考
-- libstdc++ には 5.0.0 rev.218373 現在、(6)～(9) の形式のコンストラクタは存在しない。
-- libc++ には、3.4 までは (6)～(9) の形式のコンストラクタは存在しない。また、3.0 には (4) の形式のコンストラクタも存在しない。
+- libstdc++ には 5.0.0 rev.218373 現在、(6)-(9) の形式のコンストラクタは存在しない。
+- libc++ には、3.4 までは (6)-(9) の形式のコンストラクタは存在しない。また、3.0 には (4) の形式のコンストラクタも存在しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_osyncstream/op_constructor.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/syncstream/basic_osyncstream/op_constructor.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_osyncstream/op_constructor.md b/reference/syncstream/basic_osyncstream/op_constructor.md
index bd81a85a2..95eb9da66 100644
--- a/reference/syncstream/basic_osyncstream/op_constructor.md
+++ b/reference/syncstream/basic_osyncstream/op_constructor.md
@@ -21,7 +21,7 @@ basic_osyncstream(basic_osyncstream&amp;amp;&amp;amp; other) noexcept;
 ```
 
 ## 概要
-- (1)〜(4) : ラップするストリーム、アロケータ（もしあれば）を受け取るコンストラクタ。
+- (1)-(4) : ラップするストリーム、アロケータ（もしあれば）を受け取るコンストラクタ。
 - (5) : ムーブコンストラクタ。
 
 
@@ -33,7 +33,7 @@ basic_osyncstream(basic_osyncstream&amp;amp;&amp;amp; other) noexcept;
 
 
 ## 事後条件
-- (1)〜(4) : `get_wrapped() == buf`が`true`である。
+- (1)-(4) : `get_wrapped() == buf`が`true`である。
 - (5) : `get_wrapped()`によって返される値は、このコンストラクタを呼び出す前に`os.get_wrapped()`によって返される値である。また、`nullptr == other.get_wrapped()`が`true`である。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/get.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/tuple/tuple/get.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/get.md b/reference/tuple/tuple/get.md
index 1b4735382..19e33d412 100644
--- a/reference/tuple/tuple/get.md
+++ b/reference/tuple/tuple/get.md
@@ -82,7 +82,7 @@ int main()
 {
   std::tuple&amp;lt;int, char, std::string&amp;gt; t(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
 
-  // 位置を指定して取得する方法。(1)〜(4)
+  // 位置を指定して取得する方法。(1)-(4)
   {
     int&amp;amp; i = std::get&amp;lt;0&amp;gt;(t);
     char&amp;amp; c = std::get&amp;lt;1&amp;gt;(t);
@@ -94,7 +94,7 @@ int main()
   }
   std::cout &amp;lt;&amp;lt; std::endl;
 
-  // 型を指定して取得する方法。(5)〜(7)
+  // 型を指定して取得する方法。(5)-(7)
   {
     int&amp;amp; i = std::get&amp;lt;int&amp;gt;(t);
     char&amp;amp; c = std::get&amp;lt;char&amp;gt;(t);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- 全体 : 「(1)〜(4)」 (波ダッシュ)、「(1)～(4)」 (全角チルダ) を「(1)-(4)」に修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/get.html"/>
      <id>096b6d811e1439f945d84466e9d874609b2617d1:reference/utility/pair/get.md</id>
      <updated>2025-05-22T21:25:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/get.md b/reference/utility/pair/get.md
index bbf59b17a..4565cc5e6 100644
--- a/reference/utility/pair/get.md
+++ b/reference/utility/pair/get.md
@@ -102,7 +102,7 @@ int main()
 {
   std::pair&amp;lt;int, char&amp;gt; p(1, &amp;#39;a&amp;#39;);
 
-  //位置を指定して取得する方法。(1)〜(4)
+  //位置を指定して取得する方法。(1)-(4)
   {
     int&amp;amp; i = std::get&amp;lt;0&amp;gt;(p);
     char&amp;amp; c = std::get&amp;lt;1&amp;gt;(p);
@@ -112,7 +112,7 @@ int main()
   }
   std::cout &amp;lt;&amp;lt; std::endl;
 
-  //型を指定して取得する方法。(5)〜(12)
+  //型を指定して取得する方法。(5)-(12)
   {
     int&amp;amp; i = std::get&amp;lt;int&amp;gt;(p);
     char&amp;amp; c = std::get&amp;lt;char&amp;gt;(p);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- basic_string::compare : オーバーロードの区切りを見直し</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>0436b335fec184162762daa2bb35df8becfe269c:reference/string/basic_string/compare.md</id>
      <updated>2025-05-22T21:22:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index dc9ef61c3..9bb3b821f 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -101,17 +101,17 @@ constexpr int
 
 ## テンプレートパラメータ制約
 
-- (7)(8)(9) : 以下の両方を満たしていること
+- (7), (8), (9) : 以下の両方を満たしていること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
-- (1) 自身の文字列長とパラメータ`str`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, str.`[`data()`](data.md)`, rlen)`を呼び出す。
-- (7) 自身の文字列長とパラメータ`sv`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, sv.`[`data()`](/reference/string_view/basic_string_view/data.md)`, rlen)`を呼び出す。
+- (1) : 自身の文字列長とパラメータ`str`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, str.`[`data()`](data.md)`, rlen)`を呼び出す。
+- (7) : 自身の文字列長とパラメータ`sv`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, sv.`[`data()`](/reference/string_view/basic_string_view/data.md)`, rlen)`を呼び出す。
 
 
 ## 戻り値
-- (1) 比較結果が非`0`を返した場合は、比較結果をそのまま返す。そうでなければ、以下の条件に従って戻り値を返す：
+- (1) : 比較結果が非`0`を返した場合は、比較結果をそのまま返す。そうでなければ、以下の条件に従って戻り値を返す：
 
 	| 条件                                                   | 戻り値                |
 	|--------------------------------------------------------|-----------------------|
@@ -119,14 +119,14 @@ constexpr int
 	| [`size()`](size.md) `==` `str.`[`size()`](size.md) | `0`を返す             |
 	| [`size()`](size.md) `&amp;gt;` `str.`[`size()`](size.md)  | `0`より大きい値を返す |
 
-- (2) `basic_string(*this, pos1, n1).compare(str)` と等価
-- (3) `basic_string(*this, pos1, n1).compare(basic_string(str, pos2, n2))` と等価
-- (4) `compare(basic_string(s))` と等価
-- (5) `basic_string(*this, pos, n1).compare(basic_string(s))` と等価
-- (6) `basic_string(*this, pos, n1).compare(basic_string(s, n2))` と等価
-- (7) (1)と同様の結果を返す。`return basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t);`と等価。
-- (8) `basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`substr`](/reference/string_view/basic_string_view/substr.md)`(pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t)` と等価
-- (9) 以下と等価。
+- (2) : `basic_string(*this, pos1, n1).compare(str)` と等価
+- (3) : `basic_string(*this, pos1, n1).compare(basic_string(str, pos2, n2))` と等価
+- (4) : `compare(basic_string(s))` と等価
+- (5) : `basic_string(*this, pos, n1).compare(basic_string(s))` と等価
+- (6) : `basic_string(*this, pos, n1).compare(basic_string(s, n2))` と等価
+- (7) : (1)と同様の結果を返す。`return basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t);`と等価。
+- (8) : `basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`substr`](/reference/string_view/basic_string_view/substr.md)`(pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t)` と等価
+- (9) : 以下と等価。
     ```cpp
     basic_string_view&amp;lt;charT, traits&amp;gt; s = *this, sv = t;
     return s.substr(pos1, n1).compare(sv.substr(pos2, n2));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>