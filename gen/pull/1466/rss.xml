<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-07-09T08:56:44.050215</updated>
  <id>258ad255-eec8-4c3a-9e6d-b542d641ce8f</id>

  
    <entry>
      <title>run -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/execution/execution/run_loop/run.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run.md b/reference/execution/execution/run_loop/run.md
index 85f406acf..c9a863bb1 100644
--- a/reference/execution/execution/run_loop/run.md
+++ b/reference/execution/execution/run_loop/run.md
@@ -75,7 +75,7 @@ int main()
   ex::run_loop loop;
   std::println(&amp;#34;starting&amp;#34;);
 
-  std::jthread th([&amp;amp;]{
+  std::jthread jt([&amp;amp;]{
     // 2) 別スレッドからfinishを呼び出し
     std::println(&amp;#34;finishing&amp;#34;);
     loop.finish();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_obj_base -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_obj_base.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/rcu/rcu_obj_base.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_obj_base.md b/reference/rcu/rcu_obj_base.md
index cd2d1639d..f0495c351 100644
--- a/reference/rcu/rcu_obj_base.md
+++ b/reference/rcu/rcu_obj_base.md
@@ -75,7 +75,7 @@ int main()
   data.store(newdata);
 
   // 共有データへ並行アクセス
-  std::jthread th{[] {
+  std::jthread jt{[] {
     for (int i = 0; i &amp;lt; 3; i++) {
       reader();
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_retire -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_retire.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/rcu/rcu_retire.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_retire.md b/reference/rcu/rcu_retire.md
index 80aa742f6..7ede34b34 100644
--- a/reference/rcu/rcu_retire.md
+++ b/reference/rcu/rcu_retire.md
@@ -86,7 +86,7 @@ int main()
   data.store(newdata);
 
   // 共有データへ並行アクセス
-  std::jthread th{[] {
+  std::jthread jt{[] {
     for (int i = 0; i &amp;lt; 3; i++) {
       reader();
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rcu_synchronize -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/rcu/rcu_synchronize.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/rcu/rcu_synchronize.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/rcu/rcu_synchronize.md b/reference/rcu/rcu_synchronize.md
index cbb1cf2df..f961358ac 100644
--- a/reference/rcu/rcu_synchronize.md
+++ b/reference/rcu/rcu_synchronize.md
@@ -77,7 +77,7 @@ int main()
   data.store(newdata);
 
   // 共有データへ並行アクセス
-  std::jthread th{[] {
+  std::jthread jt{[] {
     for (int i = 0; i &amp;lt; 3; i++) {
       reader();
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
index e579e0fb1..52cdf30ad 100644
--- a/reference/thread/jthread.md
+++ b/reference/thread/jthread.md
@@ -96,14 +96,14 @@ int main()
   {
     // 関数の第1引数がstd::stop_token型である場合、
     // スレッドに中断リクエストを送れるようになる
-    std::jthread t1 {f1, 1&amp;#39;000&amp;#39;000};
+    std::jthread jt1 {f1, 1&amp;#39;000&amp;#39;000};
     std::this_thread::sleep_for(std::chrono::milliseconds{3});
-    t1.request_stop(); // スレッドの中断要求を発行
+    jt1.request_stop(); // スレッドの中断要求を発行
 
     // スレッド実行する関数がstd::stop_tokenを受け取らない場合、
     // 中断リクエストを使用せず、
     // デストラクタで自動的にjoinするスレッドオブジェクトとして使用する
-    std::jthread t2 {
+    std::jthread jt2 {
       [] { f2(1&amp;#39;000&amp;#39;000); }
     };
   } // jthreadのデストラクタでは、中断要求を発行し、スレッドの終了を待機する
@@ -114,7 +114,7 @@ int main()
 ```
 * std::stop_token[link /reference/stop_token/stop_token.md]
 * stoken.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
-* t1.request_stop()[link jthread/request_stop.md]
+* jt1.request_stop()[link jthread/request_stop.md]
 
 
 #### 出力例
@@ -133,18 +133,18 @@ int main()
 {
   int x = 0, y = 0;
 
-  std::jthread t([&amp;amp;](std::stop_token st) { x++; });
+  std::jthread jt([&amp;amp;](std::stop_token st) { x++; });
 
   // スレッドに対する停止要求の作成に合わせて呼び出される
   // コールバックを定義する。
-  std::stop_callback sc { t.get_stop_token(), [&amp;amp;] { y++; }};
+  std::stop_callback sc { jt.get_stop_token(), [&amp;amp;] { y++; }};
 
   assert(y == 0);
 
   // 明示的にjoin()を呼び出さずにtを上書きする。
   // このとき、ムーブ代入演算子の呼び出しの中で、
   // 自動で停止要求の作成とjoin()の呼び出しが行われる。
-  t = std::jthread{};
+  jt = std::jthread{};
 
   assert(x == 1 &amp;amp;&amp;amp; y == 1);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>detach -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/detach.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/detach.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/detach.md b/reference/thread/jthread/detach.md
index d4c1c3940..be78b4932 100644
--- a/reference/thread/jthread/detach.md
+++ b/reference/thread/jthread/detach.md
@@ -50,11 +50,11 @@ std::future&amp;lt;int&amp;gt; start_async(int x, int y)
   auto ftr = task.get_future();
 
   // 新しいスレッド作成後にdetach操作
-  std::jthread t(std::move(task));
-  t.detach();
+  std::jthread jt(std::move(task));
+  jt.detach();
 
   return ftr;
-  // 変数tにはスレッドが紐付いていないため破棄可能
+  // 変数jtにはスレッドが紐付いていないため破棄可能
 }
 
 int main()
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_id -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_id.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/get_id.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_id.md b/reference/thread/jthread/get_id.md
index 4b4856e26..59e40ace5 100644
--- a/reference/thread/jthread/get_id.md
+++ b/reference/thread/jthread/get_id.md
@@ -32,14 +32,14 @@ id get_id() const noexcept;               // (1) C++26
 
 int main()
 {
-  std::jthread t1;
-  assert( t1.get_id() == std::jthread::id{} );
+  std::jthread jt1;
+  assert( jt1.get_id() == std::jthread::id{} );
 
-  std::jthread t2{ []{ /*...*/ } };
-  assert( t2.get_id() != std::jthread::id{} );
+  std::jthread jt2{ []{ /*...*/ } };
+  assert( jt2.get_id() != std::jthread::id{} );
 
-  std::cout &amp;lt;&amp;lt; t1.get_id() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; t2.get_id() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; jt1.get_id() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; jt2.get_id() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * get_id()[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_source -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_stop_source.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/get_stop_source.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_stop_source.md b/reference/thread/jthread/get_stop_source.md
index db6c4080b..303b755fc 100644
--- a/reference/thread/jthread/get_stop_source.md
+++ b/reference/thread/jthread/get_stop_source.md
@@ -31,16 +31,16 @@ stop_source get_stop_source() noexcept; // (1) C++26
 
 int main()
 {
-  std::jthread t1 {
+  std::jthread jt1 {
     [](std::stop_token stoken) {
       while (!stoken.stop_requested()) {}
-      std::cout &amp;lt;&amp;lt; &amp;#34;exit t1 thread&amp;#34; &amp;lt;&amp;lt; std::endl;
+      std::cout &amp;lt;&amp;lt; &amp;#34;exit jt1 thread&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
   };
 
-  // 別スレッドを立てて、そのスレッドからt1スレッドに停止要求を発行する
-  std::jthread t2 {
-    [ssource = t1.get_stop_source()]() {
+  // 別スレッドを立てて、そのスレッドからjt1スレッドに停止要求を発行する
+  std::jthread jt2 {
+    [ssource = jt1.get_stop_source()]() {
       ssource.request_stop();
     }
   };
@@ -53,7 +53,7 @@ int main()
 
 ### 出力
 ```
-exit t1 thread
+exit jt1 thread
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_token -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_stop_token.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/get_stop_token.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_stop_token.md b/reference/thread/jthread/get_stop_token.md
index 6c8cbe0ba..16f797634 100644
--- a/reference/thread/jthread/get_stop_token.md
+++ b/reference/thread/jthread/get_stop_token.md
@@ -38,17 +38,17 @@ return ssource.get_token();
 
 int main()
 {
-  std::jthread t {
+  std::jthread jt {
     [](std::stop_token stoken) {
       while (!stoken.stop_requested()) {}
       std::cout &amp;lt;&amp;lt; &amp;#34;exit thread&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
   };
 
-  t.request_stop();
+  jt.request_stop();
 
   // 停止要求が正しく発行されたか調べる
-  assert(t.get_stop_token().stop_requested());
+  assert(jt.get_stop_token().stop_requested());
 }
 ```
 * get_stop_token()[color ff0000]
@@ -58,7 +58,7 @@ int main()
 
 ### 出力
 ```
-exit t thread
+exit thread
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/join.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/join.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/join.md b/reference/thread/jthread/join.md
index 7ee8ae32e..e6c8b600b 100644
--- a/reference/thread/jthread/join.md
+++ b/reference/thread/jthread/join.md
@@ -45,11 +45,11 @@ join操作に失敗した場合、[`system_error`](/reference/system_error/syste
 int main()
 {
   int x = 0;
-  std::jthread t([&amp;amp;]{ ++x; });
+  std::jthread jt([&amp;amp;]{ ++x; });
 
   // ここでxにアクセスするとdata raceにより未定義動作
 
-  t.join();
+  jt.join();
 
   // 別スレッド上で行われた全処理が完了している
   assert(x == 1);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>joinable -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/joinable.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/joinable.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/joinable.md b/reference/thread/jthread/joinable.md
index 3c269e0bf..2f4aa3c80 100644
--- a/reference/thread/jthread/joinable.md
+++ b/reference/thread/jthread/joinable.md
@@ -33,11 +33,11 @@ return get_id() != id();
 
 int main()
 {
-  std::jthread t([]{ /*...*/ });
-  assert(t.joinable());
+  std::jthread jt([]{ /*...*/ });
+  assert(jt.joinable());
 
-  t.join();
-  assert(!t.joinable());
+  jt.join();
+  assert(!jt.joinable());
 }
 ```
 * joinable()[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>native_handle -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/native_handle.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/native_handle.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/native_handle.md b/reference/thread/jthread/native_handle.md
index 42dd99c96..1a48b5cad 100644
--- a/reference/thread/jthread/native_handle.md
+++ b/reference/thread/jthread/native_handle.md
@@ -39,9 +39,9 @@ void func() {
 }
 
 int main() {
-  std::jthread t{func};
-  SetThreadPriority(t.native_handle(), THREAD_PRIORITY_IDLE);
-  t.join();
+  std::jthread jt{func};
+  SetThreadPriority(jt.native_handle(), THREAD_PRIORITY_IDLE);
+  jt.join();
 }
 ```
 * native_handle()[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_assign.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/op_assign.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_assign.md b/reference/thread/jthread/op_assign.md
index 92c84fb54..50abeab34 100644
--- a/reference/thread/jthread/op_assign.md
+++ b/reference/thread/jthread/op_assign.md
@@ -39,18 +39,18 @@ jthread&amp;amp; operator=(jthread&amp;amp;&amp;amp; x) noexcept;    // (2) C++20
 
 int main()
 {
-  std::jthread t1([]{ /*...*/ });
-  std::jthread t2;
-  assert(t1.joinable() &amp;amp;&amp;amp; !t2.joinable());
+  std::jthread jt1([]{ /*...*/ });
+  std::jthread jt2;
+  assert(jt1.joinable() &amp;amp;&amp;amp; !jt2.joinable());
 
-  // t1からt2へムーブ代入
-  t2 = std::move(t1);
-  assert(!t1.joinable() &amp;amp;&amp;amp; t2.joinable());
+  // jt1からjt2へムーブ代入
+  jt2 = std::move(jt1);
+  assert(!jt1.joinable() &amp;amp;&amp;amp; jt2.joinable());
 
-  t2.join();
+  jt2.join();
 }
 ```
-* t2 = std::move(t1);[color ff0000]
+* jt2 = std::move(jt1);[color ff0000]
 * joinable()[link joinable.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/op_constructor.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index 149178dcb..a43cb60e0 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -125,14 +125,14 @@ int main()
   {
     // 関数の第1引数がstd::stop_token型である場合、
     // スレッドに中断リクエストを送れるようになる
-    std::jthread t1 {f1, 1&amp;#39;000&amp;#39;000};
+    std::jthread jt1 {f1, 1&amp;#39;000&amp;#39;000};
     std::this_thread::sleep_for(std::chrono::milliseconds{3});
-    t1.request_stop(); // スレッドの中断要求を発行
+    jt1.request_stop(); // スレッドの中断要求を発行
 
     // スレッド実行する関数がstd::stop_tokenを受け取らない場合、
     // 中断リクエストを使用せず、
     // デストラクタで自動的にjoinするスレッドオブジェクトとして使用する
-    std::jthread t2 {
+    std::jthread jt2 {
       [] { f2(1&amp;#39;000&amp;#39;000); }
     };
   } // jthreadのデストラクタでは、中断要求を発行し、スレッドの終了を待機する
@@ -143,7 +143,7 @@ int main()
 ```
 * std::stop_token[link /reference/stop_token/stop_token.md]
 * stoken.stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
-* t1.request_stop()[link request_stop.md]
+* jt1.request_stop()[link request_stop.md]
 
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_destructor.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/op_destructor.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_destructor.md b/reference/thread/jthread/op_destructor.md
index b48d5f2f4..479140cc0 100644
--- a/reference/thread/jthread/op_destructor.md
+++ b/reference/thread/jthread/op_destructor.md
@@ -51,13 +51,13 @@ int main()
   {
     // 関数の第1引数がstd::stop_token型である場合、
     // スレッドに中断リクエストを送れるようになる
-    std::jthread t1 {f1, 1&amp;#39;000&amp;#39;000};
+    std::jthread jt1 {f1, 1&amp;#39;000&amp;#39;000};
     std::this_thread::sleep_for(std::chrono::milliseconds{3});
 
     // スレッド実行する関数がstd::stop_tokenを受け取らない場合、
     // 中断リクエストを使用せず、
     // デストラクタで自動的にjoinするスレッドオブジェクトとして使用する
-    std::jthread t2 {
+    std::jthread jt2 {
       [] { f2(1&amp;#39;000&amp;#39;000); }
     };
   } // jthreadのデストラクタでは、中断要求を発行し、スレッドの終了を待機する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>request_stop -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/request_stop.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/request_stop.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/request_stop.md b/reference/thread/jthread/request_stop.md
index 6afba0348..2597d996d 100644
--- a/reference/thread/jthread/request_stop.md
+++ b/reference/thread/jthread/request_stop.md
@@ -36,27 +36,28 @@ return ssource.request_stop();
 
 int main()
 {
-  std::jthread t {
+  std::jthread jt {
     [](std::stop_token stoken) {
       while (!stoken.stop_requested()) {
         // 停止要求がくるまで処理を継続する…
       }
-      std::cout &amp;lt;&amp;lt; &amp;#34;exit t1 thread&amp;#34; &amp;lt;&amp;lt; std::endl;
+      std::cout &amp;lt;&amp;lt; &amp;#34;exit jt thread&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
   };
 
   // 停止要求を作成する
-  t.request_stop();
-  t.join();
+  jt.request_stop();
+  jt.join();
 }
 ```
 * request_stop()[color ff0000]
 * std::stop_token[link /reference/stop_token/stop_token.md]
 * stop_requested()[link /reference/stop_token/stop_token/stop_requested.md]
+* jt.join()[link join.md]
 
 ### 出力
 ```
-exit t1 thread
+exit jt thread
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/swap.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/swap.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/swap.md b/reference/thread/jthread/swap.md
index 5243d3fc5..52a55ea9e 100644
--- a/reference/thread/jthread/swap.md
+++ b/reference/thread/jthread/swap.md
@@ -27,12 +27,12 @@ void swap(jthread&amp;amp; x) noexcept;
 
 int main()
 {
-  std::jthread t1([]{ /*...*/ });
-  std::jthread t2;
+  std::jthread jt1([]{ /*...*/ });
+  std::jthread jt2;
 
-  t1.swap(t2);
+  jt1.swap(jt2);
 
-  t2.join();
+  jt2.join();
 
   return 0;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- jthreadの変数名をt → jtに変更</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/swap_free.html"/>
      <id>d9b26573f3f2d2e48cc49aec0c48873e282de7e4:reference/thread/jthread/swap_free.md</id>
      <updated>2025-07-09T17:52:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/swap_free.md b/reference/thread/jthread/swap_free.md
index 20cc70008..9288efc3a 100644
--- a/reference/thread/jthread/swap_free.md
+++ b/reference/thread/jthread/swap_free.md
@@ -34,12 +34,12 @@ x.swap(y);
 
 int main()
 {
-  std::jthread t1([]{ /*...*/ });
-  std::jthread t2;
+  std::jthread jt1([]{ /*...*/ });
+  std::jthread jt2;
 
-  swap(t1, t2);
+  swap(jt1, jt2);
 
-  t2.join();
+  jt2.join();
 
   return 0;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_error_condition -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/future/make_error_condition.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/future/make_error_condition.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/make_error_condition.md b/reference/future/make_error_condition.md
index 1236d616b..dc902870c 100644
--- a/reference/future/make_error_condition.md
+++ b/reference/future/make_error_condition.md
@@ -32,19 +32,20 @@ namespace std {
 
 int main()
 {
-  std::error_condition ec = std::make_error_condition(std::future_errc::broken_promise);
+  std::error_condition econd = std::make_error_condition(std::future_errc::broken_promise);
 
-  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; ec.message() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; econd.message() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::make_error_condition[color ff0000]
 * std::error_condition[link /reference/system_error/error_condition.md]
 * std::future_errc::broken_promise[link future_errc.md]
-* ec.category()[link /reference/system_error/error_condition/category.md]
+* econd.category()[link /reference/system_error/error_condition/category.md]
 * name()[link /reference/system_error/error_category/name.md]
-* ec.value()[link /reference/system_error/error_condition/value.md]
+* econd.value()[link /reference/system_error/error_condition/value.md]
+* econd.message()[link /reference/system_error/error_condition/message.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_error_condition -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/ios/make_error_condition.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/ios/make_error_condition.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/make_error_condition.md b/reference/ios/make_error_condition.md
index 555e917ad..52cd91dd2 100644
--- a/reference/ios/make_error_condition.md
+++ b/reference/ios/make_error_condition.md
@@ -31,19 +31,19 @@ namespace std {
 
 int main()
 {
-  std::error_condition ec = std::make_error_condition(std::io_errc::stream);
+  std::error_condition econd = std::make_error_condition(std::io_errc::stream);
 
-  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; ec.message() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; econd.message() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::make_error_condition[color ff0000]
 * std::io_errc::stream[link io_errc.md]
 * std::error_condition[link /reference/system_error/error_condition.md]
-* ec.category()[link /reference/system_error/error_code/category.md]
+* econd.category()[link /reference/system_error/error_code/category.md]
 * name()[link /reference/system_error/error_category/name.md]
-* ec.value()[link /reference/system_error/error_condition/value.md]
+* econd.value()[link /reference/system_error/error_condition/value.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/assign.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/assign.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/assign.md b/reference/system_error/error_condition/assign.md
index e1a42c7ec..1a01881dd 100644
--- a/reference/system_error/error_condition/assign.md
+++ b/reference/system_error/error_condition/assign.md
@@ -33,26 +33,26 @@ void assign(int val, const error_category&amp;amp; cat) noexcept;
 
 int main()
 {
-  std::error_condition ec;
+  std::error_condition econd;
 
-  ec.assign(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument), std::generic_category());
+  econd.assign(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument), std::generic_category());
 
-  if (ec) {
+  if (econd) {
     std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
   else {
     std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 
-  std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * assign[color ff0000]
 * std::errc::invalid_argument[link /reference/system_error/errc.md]
 * std::generic_category()[link /reference/system_error/generic_category.md]
-* ec.value()[link value.md]
-* ec.category()[link category.md]
+* econd.value()[link value.md]
+* econd.category()[link category.md]
 * name()[link /reference/system_error/error_category/name.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>category -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/category.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/category.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/category.md b/reference/system_error/error_condition/category.md
index 4c590dd39..b0dfbd23f 100644
--- a/reference/system_error/error_condition/category.md
+++ b/reference/system_error/error_condition/category.md
@@ -29,10 +29,10 @@ const error_category&amp;amp; category() const noexcept;
 
 int main()
 {
-  std::error_condition ec(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
-                          std::generic_category());
+  std::error_condition econd(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
+                             std::generic_category());
 
-  const std::error_category&amp;amp; cat = ec.category();
+  const std::error_category&amp;amp; cat = econd.category();
   std::cout &amp;lt;&amp;lt; cat.name() &amp;lt;&amp;lt; std::endl;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/clear.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/clear.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/clear.md b/reference/system_error/error_condition/clear.md
index 28ba0a87a..2cef69418 100644
--- a/reference/system_error/error_condition/clear.md
+++ b/reference/system_error/error_condition/clear.md
@@ -32,27 +32,27 @@ void clear() noexcept;
 
 int main()
 {
-  std::error_condition ec(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
-                          std::generic_category());
+  std::error_condition econd(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
+                             std::generic_category());
 
-  ec.clear();
+  econd.clear();
 
-  if (ec) {
+  if (econd) {
     std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
   else {
     std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 
-  std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * clear()[color ff0000]
 * std::errc::invalid_argument[link /reference/system_error/errc.md]
 * std::generic_category()[link /reference/system_error/generic_category.md]
-* ec.value()[link value.md]
-* ec.category()[link category.md]
+* econd.value()[link value.md]
+* econd.category()[link category.md]
 * name()[link /reference/system_error/error_category/name.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>message -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/message.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/message.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/message.md b/reference/system_error/error_condition/message.md
index 7400fabb7..c9879b34d 100644
--- a/reference/system_error/error_condition/message.md
+++ b/reference/system_error/error_condition/message.md
@@ -31,8 +31,8 @@ category().message(value())
 
 int main()
 {
-  std::error_condition ec(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
-                          std::generic_category());
+  std::error_condition econd(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
+                             std::generic_category());
 
   std::cout &amp;lt;&amp;lt; ec.message() &amp;lt;&amp;lt; std::endl;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/op_assign.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/op_assign.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/op_assign.md b/reference/system_error/error_condition/op_assign.md
index a435cc522..f87ea0805 100644
--- a/reference/system_error/error_condition/op_assign.md
+++ b/reference/system_error/error_condition/op_assign.md
@@ -42,24 +42,24 @@ error_condition&amp;amp; operator=(ErrorConditionEnum e) noexcept;
 
 int main()
 {
-  std::error_condition ec;
+  std::error_condition econd;
 
-  ec = std::errc::invalid_argument;
+  econd = std::errc::invalid_argument;
 
-  if (ec) {
+  if (econd) {
     std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
   else {
     std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
   }
 
-  std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::errc::invalid_argument[link /reference/system_error/errc.md]
-* ec.value()[link value.md]
-* ec.category()[link category.md]
+* econd.value()[link value.md]
+* econd.category()[link category.md]
 * name()[link /reference/system_error/error_category/name.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/op_compare_3way.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/op_compare_3way.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/op_compare_3way.md b/reference/system_error/error_condition/op_compare_3way.md
index da9ced458..4d4c62b30 100644
--- a/reference/system_error/error_condition/op_compare_3way.md
+++ b/reference/system_error/error_condition/op_compare_3way.md
@@ -47,12 +47,12 @@ return lhs.value() &amp;lt;=&amp;gt; rhs.value();
 
 int main()
 {
-  std::error_condition ec1 = std::make_error_condition(std::errc::invalid_argument);
-  std::error_condition ec2 = std::make_error_condition(std::errc::invalid_argument);
-  std::error_condition ec3 = std::make_error_condition(std::errc::permission_denied);
+  std::error_condition econd1 = std::make_error_condition(std::errc::invalid_argument);
+  std::error_condition econd2 = std::make_error_condition(std::errc::invalid_argument);
+  std::error_condition econd3 = std::make_error_condition(std::errc::permission_denied);
 
-  assert((ec1 &amp;lt;=&amp;gt; ec2) == 0);
-  assert((ec1 &amp;lt;=&amp;gt; ec3) != 0);
+  assert((econd1 &amp;lt;=&amp;gt; econd2) == 0);
+  assert((econd1 &amp;lt;=&amp;gt; econd3) != 0);
 }
 ```
 * std::make_error_condition[link /reference/system_error/make_error_condition.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/op_constructor.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/op_constructor.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/op_constructor.md b/reference/system_error/error_condition/op_constructor.md
index 063a823dc..5c22ee653 100644
--- a/reference/system_error/error_condition/op_constructor.md
+++ b/reference/system_error/error_condition/op_constructor.md
@@ -44,55 +44,55 @@ int main()
   // デフォルトコンストラクタ
   std::cout &amp;lt;&amp;lt; &amp;#34;default ctor&amp;#34; &amp;lt;&amp;lt; std::endl;
   {
-    std::error_condition ec;
+    std::error_condition econd;
 
-    if (ec) {
+    if (econd) {
       std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
     else {
       std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
 
-    std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
   }
 
   // エラー値とエラーカテゴリを受け取って構築
   std::cout &amp;lt;&amp;lt; std::endl &amp;lt;&amp;lt; &amp;#34;value &amp;amp; category ctor&amp;#34; &amp;lt;&amp;lt; std::endl;
   {
-    std::error_condition ec(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
-                            std::generic_category());
+    std::error_condition econd(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
+                               std::generic_category());
 
-    if (ec) {
+    if (econd) {
       std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
     else {
       std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
 
-    std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
   }
 
   // is_error_condition_enumが特殊化された型のエラー値を受け取って構築
   std::cout &amp;lt;&amp;lt; std::endl &amp;lt;&amp;lt; &amp;#34;ErrorConditionEnum ctor&amp;#34; &amp;lt;&amp;lt; std::endl;
   {
-    std::error_condition ec(std::errc::invalid_argument);
+    std::error_condition econd(std::errc::invalid_argument);
 
-    if (ec) {
+    if (econd) {
       std::cout &amp;lt;&amp;lt; &amp;#34;error&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
     else {
       std::cout &amp;lt;&amp;lt; &amp;#34;success&amp;#34; &amp;lt;&amp;lt; std::endl;
     }
 
-    std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
-* ec.value()[link value.md]
-* ec.category()[link category.md]
+* econd.value()[link value.md]
+* econd.category()[link category.md]
 * name()[link /reference/system_error/error_category/name.md]
 * std::errc::invalid_argument[link /reference/system_error/errc.md]
 * std::generic_category()[link /reference/system_error/generic_category.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/value.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/error_condition/value.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/value.md b/reference/system_error/error_condition/value.md
index dd87ec46e..6dc6af243 100644
--- a/reference/system_error/error_condition/value.md
+++ b/reference/system_error/error_condition/value.md
@@ -28,10 +28,10 @@ int value() const noexcept;
 
 int main()
 {
-  std::error_condition ec(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
-                          std::generic_category());
+  std::error_condition econd(static_cast&amp;lt;int&amp;gt;(std::errc::invalid_argument),
+                             std::generic_category());
 
-  std::cout &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * value()[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_error_condition -- コード修飾の衝突回避のためerror_condition型の変数名をec → econdに変更</title>
      <link href="https://cpprefjp.github.io/reference/system_error/make_error_condition.html"/>
      <id>e8c9b487ea03fc7a8804f062c0364dfaa5167992:reference/system_error/make_error_condition.md</id>
      <updated>2025-07-09T17:42:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/make_error_condition.md b/reference/system_error/make_error_condition.md
index be522f67e..722186b8f 100644
--- a/reference/system_error/make_error_condition.md
+++ b/reference/system_error/make_error_condition.md
@@ -32,19 +32,20 @@ namespace std {
 
 int main()
 {
-  std::error_condition ec = std::make_error_condition(std::errc::invalid_argument);
+  std::error_condition econd = std::make_error_condition(std::errc::invalid_argument);
 
-  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; ec.category().name() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; ec.value() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; ec.message() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;category : &amp;#34; &amp;lt;&amp;lt; econd.category().name() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;value : &amp;#34; &amp;lt;&amp;lt; econd.value() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;message : &amp;#34; &amp;lt;&amp;lt; econd.message() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::make_error_condition[color ff0000]
 * std::error_condition[link error_code.md]
 * std::errc::invalid_argument[link errc.md]
-* ec.category()[link error_condition/category.md]
+* econd.category()[link error_condition/category.md]
 * name()[link error_category/name.md]
-* ec.value()[link error_condition/value.md]
+* econd.value()[link error_condition/value.md]
+* econd.message()[link error_condition/message.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clock_time_conversion -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/clock_time_conversion.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/clock_time_conversion.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/clock_time_conversion.md b/reference/chrono/clock_time_conversion.md
index f2c9aada1..afd38090f 100644
--- a/reference/chrono/clock_time_conversion.md
+++ b/reference/chrono/clock_time_conversion.md
@@ -87,6 +87,7 @@ namespace std::chrono {
 * sys_time[link sys_time.md]
 * utc_clock[link utc_clock.md]
 * utc_time[link utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * time_point[link time_point.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_compare_3way.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/duration/op_compare_3way.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_compare_3way.md b/reference/chrono/duration/op_compare_3way.md
index 831791ac5..8695ca874 100644
--- a/reference/chrono/duration/op_compare_3way.md
+++ b/reference/chrono/duration/op_compare_3way.md
@@ -18,6 +18,7 @@ namespace std::chrono {
                 const duration&amp;lt;Rep2, Period2&amp;gt;&amp;amp; rhs);  // (1) C++20
 }
 ```
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 三方比較を行う
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_unary_minus.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/duration/op_unary_minus.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_unary_minus.md b/reference/chrono/duration/op_unary_minus.md
index 4bdf26a96..dcc5ff466 100644
--- a/reference/chrono/duration/op_unary_minus.md
+++ b/reference/chrono/duration/op_unary_minus.md
@@ -8,6 +8,7 @@
 ```cpp
 constexpr common_type_t&amp;lt;duration&amp;gt; operator-() const;
 ```
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 負の符号。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_unary_plus.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/duration/op_unary_plus.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_unary_plus.md b/reference/chrono/duration/op_unary_plus.md
index 710e4205a..989edfe59 100644
--- a/reference/chrono/duration/op_unary_plus.md
+++ b/reference/chrono/duration/op_unary_plus.md
@@ -8,6 +8,7 @@
 ```cpp
 constexpr common_type_t&amp;lt;duration&amp;gt; operator+() const;
 ```
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 正の符号。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_utc -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock/from_utc.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/gps_clock/from_utc.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock/from_utc.md b/reference/chrono/gps_clock/from_utc.md
index 9580e8f39..472cec279 100644
--- a/reference/chrono/gps_clock/from_utc.md
+++ b/reference/chrono/gps_clock/from_utc.md
@@ -12,6 +12,7 @@ static gps_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * gps_time[link /reference/chrono/gps_time.md]
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 UTC時間からGPS時間に変換する。
@@ -22,6 +23,7 @@ UTC時間からGPS時間に変換する。
 return gps_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} - 315964809s;
 ```
 * gps_time[link /reference/chrono/gps_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
 * 315964809s[link /reference/chrono/duration/op_s.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_utc -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock/to_utc.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/gps_clock/to_utc.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock/to_utc.md b/reference/chrono/gps_clock/to_utc.md
index 34f9ec8a7..1bc92cf47 100644
--- a/reference/chrono/gps_clock/to_utc.md
+++ b/reference/chrono/gps_clock/to_utc.md
@@ -12,6 +12,7 @@ static utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * gps_time[link /reference/chrono/gps_time.md]
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 GPS時間からUTC時間に変換する。
@@ -22,6 +23,7 @@ GPS時間からUTC時間に変換する。
 return utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} + 315964809s;
 ```
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
 * 315964809s[link /reference/chrono/duration/op_s.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_utc -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock/from_utc.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/tai_clock/from_utc.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock/from_utc.md b/reference/chrono/tai_clock/from_utc.md
index a0409a499..242249395 100644
--- a/reference/chrono/tai_clock/from_utc.md
+++ b/reference/chrono/tai_clock/from_utc.md
@@ -12,6 +12,7 @@ static tai_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * tai_time[link /reference/chrono/tai_time.md]
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 UTC時間からTAI時間に変換する。
@@ -22,6 +23,7 @@ UTC時間からTAI時間に変換する。
 return tai_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} + 378691210s;
 ```
 * tai_time[link /reference/chrono/tai_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
 * 378691210s[link /reference/chrono/duration/op_s.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_utc -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock/to_utc.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/tai_clock/to_utc.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock/to_utc.md b/reference/chrono/tai_clock/to_utc.md
index 55ef1c423..7a9254566 100644
--- a/reference/chrono/tai_clock/to_utc.md
+++ b/reference/chrono/tai_clock/to_utc.md
@@ -12,6 +12,7 @@ static utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * tai_time[link /reference/chrono/tai_time.md]
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 TAI時間からUTC時間に変換する。
@@ -22,6 +23,7 @@ TAI時間からUTC時間に変換する。
 return utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} - 378691210s;
 ```
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
 * 378691210s[link /reference/chrono/duration/op_s.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_local -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_zone/to_local.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/time_zone/to_local.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_zone/to_local.md b/reference/chrono/time_zone/to_local.md
index c641d2000..24301c0a2 100644
--- a/reference/chrono/time_zone/to_local.md
+++ b/reference/chrono/time_zone/to_local.md
@@ -12,6 +12,7 @@ local_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * sys_time[link /reference/chrono/sys_time.md]
 * local_time[link /reference/chrono/local_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 システム時間からローカル時間に変換する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_sys -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/time_zone/to_sys.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/time_zone/to_sys.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/time_zone/to_sys.md b/reference/chrono/time_zone/to_sys.md
index b0cde3de5..f5fa21433 100644
--- a/reference/chrono/time_zone/to_sys.md
+++ b/reference/chrono/time_zone/to_sys.md
@@ -16,6 +16,7 @@ sys_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * sys_time[link /reference/chrono/sys_time.md]
 * local_time[link /reference/chrono/local_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * choose[link /reference/chrono/choose.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_sys -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_clock/from_sys.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/utc_clock/from_sys.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_clock/from_sys.md b/reference/chrono/utc_clock/from_sys.md
index eb7d6de10..061656620 100644
--- a/reference/chrono/utc_clock/from_sys.md
+++ b/reference/chrono/utc_clock/from_sys.md
@@ -12,6 +12,7 @@ static utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * utc_time[link /reference/chrono/utc_time.md]
 * sys_time[link /reference/chrono/sys_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 システム時間からUTC時間に変換する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_sys -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_clock/to_sys.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/utc_clock/to_sys.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_clock/to_sys.md b/reference/chrono/utc_clock/to_sys.md
index 804eebafe..812678a09 100644
--- a/reference/chrono/utc_clock/to_sys.md
+++ b/reference/chrono/utc_clock/to_sys.md
@@ -12,6 +12,7 @@ static sys_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
 ```
 * sys_time[link /reference/chrono/sys_time.md]
 * utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 
 ## 概要
 UTC時間からシステム時間に変換する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- コード修飾の重複削除スクリプト : chrono/common_type.mdを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/op_deduction_guide.html"/>
      <id>f7a9b45a3cf2b23effbeffc93439f2056524eb1f:reference/chrono/zoned_time/op_deduction_guide.md</id>
      <updated>2025-07-09T17:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/op_deduction_guide.md b/reference/chrono/zoned_time/op_deduction_guide.md
index 8bebe8240..94bdfbda3 100644
--- a/reference/chrono/zoned_time/op_deduction_guide.md
+++ b/reference/chrono/zoned_time/op_deduction_guide.md
@@ -46,6 +46,7 @@ namespace std::chrono {
 }
 ```
 * sys_time[link /reference/chrono/sys_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
 * local_time[link /reference/chrono/local_time.md]
 * choose[link /reference/chrono/choose.md]
 * conditional_t[link /reference/type_traits/conditional.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gslice -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice.md b/reference/valarray/gslice.md
index 1b82ec9d0..21f35cce6 100644
--- a/reference/valarray/gslice.md
+++ b/reference/valarray/gslice.md
@@ -68,6 +68,8 @@ auto main()
 }
 ```
 * std::gslice[color ff0000]
+* std::begin[link valarray/begin_free.md]
+* std::end[link valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gslice_array -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array.md b/reference/valarray/gslice_array.md
index 65955519c..9d825ee33 100644
--- a/reference/valarray/gslice_array.md
+++ b/reference/valarray/gslice_array.md
@@ -103,6 +103,8 @@ int main()
 ```
 * std::gslice[color ff0000]
 * std::setw[link /reference/iomanip/setw.md]
+* std::begin[link valarray/begin_free.md]
+* std::end[link valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_and_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_and_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_and_assign.md b/reference/valarray/gslice_array/op_and_assign.md
index 69c33ecdc..623d91063 100644
--- a/reference/valarray/gslice_array/op_and_assign.md
+++ b/reference/valarray/gslice_array/op_and_assign.md
@@ -66,6 +66,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 * to_string()[link /reference/bitset/bitset/to_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_assign.md b/reference/valarray/gslice_array/op_assign.md
index a489b9d75..1d7fc90bc 100644
--- a/reference/valarray/gslice_array/op_assign.md
+++ b/reference/valarray/gslice_array/op_assign.md
@@ -100,6 +100,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_divide_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_divide_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_divide_assign.md b/reference/valarray/gslice_array/op_divide_assign.md
index 944342d23..dcc20574e 100644
--- a/reference/valarray/gslice_array/op_divide_assign.md
+++ b/reference/valarray/gslice_array/op_divide_assign.md
@@ -61,6 +61,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_left_shift_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_left_shift_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_left_shift_assign.md b/reference/valarray/gslice_array/op_left_shift_assign.md
index fd7c262f8..f4b043bb7 100644
--- a/reference/valarray/gslice_array/op_left_shift_assign.md
+++ b/reference/valarray/gslice_array/op_left_shift_assign.md
@@ -66,6 +66,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 * to_string()[link /reference/bitset/bitset/to_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_minus_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_minus_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_minus_assign.md b/reference/valarray/gslice_array/op_minus_assign.md
index 5bfdec29c..509037519 100644
--- a/reference/valarray/gslice_array/op_minus_assign.md
+++ b/reference/valarray/gslice_array/op_minus_assign.md
@@ -62,6 +62,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator%= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_modulo_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_modulo_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_modulo_assign.md b/reference/valarray/gslice_array/op_modulo_assign.md
index 2c0743bca..f7f6e7725 100644
--- a/reference/valarray/gslice_array/op_modulo_assign.md
+++ b/reference/valarray/gslice_array/op_modulo_assign.md
@@ -61,6 +61,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator*= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_multiply_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_multiply_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_multiply_assign.md b/reference/valarray/gslice_array/op_multiply_assign.md
index bb4062eac..8ec9bb85a 100644
--- a/reference/valarray/gslice_array/op_multiply_assign.md
+++ b/reference/valarray/gslice_array/op_multiply_assign.md
@@ -61,6 +61,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator|= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_or_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_or_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_or_assign.md b/reference/valarray/gslice_array/op_or_assign.md
index 0dee1d5c7..ef16ae4ae 100644
--- a/reference/valarray/gslice_array/op_or_assign.md
+++ b/reference/valarray/gslice_array/op_or_assign.md
@@ -66,6 +66,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 * to_string()[link /reference/bitset/bitset/to_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_plus_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_plus_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_plus_assign.md b/reference/valarray/gslice_array/op_plus_assign.md
index ab62bbba1..97a6d3b04 100644
--- a/reference/valarray/gslice_array/op_plus_assign.md
+++ b/reference/valarray/gslice_array/op_plus_assign.md
@@ -61,6 +61,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_right_shift_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_right_shift_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_right_shift_assign.md b/reference/valarray/gslice_array/op_right_shift_assign.md
index f9c9af87a..1e9ad2f6b 100644
--- a/reference/valarray/gslice_array/op_right_shift_assign.md
+++ b/reference/valarray/gslice_array/op_right_shift_assign.md
@@ -66,6 +66,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 * to_string()[link /reference/bitset/bitset/to_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_xor_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/gslice_array/op_xor_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_xor_assign.md b/reference/valarray/gslice_array/op_xor_assign.md
index 5f15ae0d5..c0435b574 100644
--- a/reference/valarray/gslice_array/op_xor_assign.md
+++ b/reference/valarray/gslice_array/op_xor_assign.md
@@ -66,6 +66,8 @@ int main()
 }
 ```
 * std::gslice[link /reference/valarray/gslice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::multiplies[link /reference/functional/multiplies.md]
 * to_string()[link /reference/bitset/bitset/to_string.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slice -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/slice.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/slice.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/slice.md b/reference/valarray/slice.md
index 3e603703d..ff02f4d40 100644
--- a/reference/valarray/slice.md
+++ b/reference/valarray/slice.md
@@ -66,6 +66,8 @@ auto main()
 }
 ```
 * std::slice[color ff0000]
+* std::begin[link valarray/begin_free.md]
+* std::end[link valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin (非メンバ関数) -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/begin_free.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/begin_free.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/begin_free.md b/reference/valarray/valarray/begin_free.md
index 277b03478..226d030cd 100644
--- a/reference/valarray/valarray/begin_free.md
+++ b/reference/valarray/valarray/begin_free.md
@@ -40,6 +40,7 @@ namespace std {
     auto last = std::end(c);    // std::valarray&amp;lt;double&amp;gt;にする必要がある
     ```
     * std::begin[color ff0000]
+    * std::end[link /reference/valarray/valarray/end_free.md]
 
     これは、[`std::valarray`](../valarray.md)`&amp;lt;T&amp;gt;` 型を返す関数（本リファレンスでは戻り値型を *`ValOrProxy`* と表記）は、式テンプレートによる最適化を考慮して、代理の型を返すことが許可されているが、`begin` と [`end`](end_free.md) はその代理の型を受け取りが可能であることを求められていないためである。  
     [`&amp;lt;valarray&amp;gt;`](../../valarray.md) の概要も参照のこと。
@@ -61,6 +62,7 @@ int main()
 }
 ```
 * std::begin[color ff0000]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (非メンバ関数) -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/end_free.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/end_free.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/end_free.md b/reference/valarray/valarray/end_free.md
index 66034dab0..61a91a36f 100644
--- a/reference/valarray/valarray/end_free.md
+++ b/reference/valarray/valarray/end_free.md
@@ -40,6 +40,7 @@ namespace std {
     auto last = std::end(c);    // std::valarray&amp;lt;double&amp;gt;にする必要がある
     ```
     * std::end[color ff0000]
+    * std::begin[link /reference/valarray/valarray/begin_free.md]
 
     これは、[`std::valarray`](../valarray.md)`&amp;lt;T&amp;gt;` 型を返す関数（本リファレンスでは戻り値型を *`ValOrProxy`* と表記）は、式テンプレートによる最適化を考慮して、代理の型を返すことが許可されているが、[`begin`](begin_free.md) と `end` はその代理の型を受け取りが可能であることを求められていないためである。  
     [`&amp;lt;valarray&amp;gt;`](../../valarray.md) の概要も参照のこと。
@@ -61,6 +62,7 @@ int main()
 }
 ```
 * std::end[color ff0000]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp; -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_and.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_and.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_and.md b/reference/valarray/valarray/op_and.md
index dc111081e..c357bbdd4 100644
--- a/reference/valarray/valarray/op_and.md
+++ b/reference/valarray/valarray/op_and.md
@@ -116,6 +116,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_and_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_and_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_and_assign.md b/reference/valarray/valarray/op_and_assign.md
index 82c851e0f..49c2a4209 100644
--- a/reference/valarray/valarray/op_and_assign.md
+++ b/reference/valarray/valarray/op_and_assign.md
@@ -87,6 +87,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_at.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_at.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_at.md b/reference/valarray/valarray/op_at.md
index 6519f3706..a98878bd4 100644
--- a/reference/valarray/valarray/op_at.md
+++ b/reference/valarray/valarray/op_at.md
@@ -257,6 +257,8 @@ int main()
 }
 ```
 * std::slice[link /reference/valarray/slice.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 * std::slice_array[link /reference/valarray/slice_array.md]
 * std::gslice[link /reference/valarray/gslice.md]
 * std::gslice_array[link /reference/valarray/gslice_array.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_equal.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_equal.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_equal.md b/reference/valarray/valarray/op_equal.md
index 75b36e66d..03b19ee42 100644
--- a/reference/valarray/valarray/op_equal.md
+++ b/reference/valarray/valarray/op_equal.md
@@ -107,6 +107,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator~ (単項) -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_flip.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_flip.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_flip.md b/reference/valarray/valarray/op_flip.md
index 0ebe477e7..1073ef763 100644
--- a/reference/valarray/valarray/op_flip.md
+++ b/reference/valarray/valarray/op_flip.md
@@ -62,6 +62,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_greater.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_greater.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_greater.md b/reference/valarray/valarray/op_greater.md
index fc31f8ca7..9c3162847 100644
--- a/reference/valarray/valarray/op_greater.md
+++ b/reference/valarray/valarray/op_greater.md
@@ -108,6 +108,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_greater_equal.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_greater_equal.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_greater_equal.md b/reference/valarray/valarray/op_greater_equal.md
index 6b6978332..d88ff7f8f 100644
--- a/reference/valarray/valarray/op_greater_equal.md
+++ b/reference/valarray/valarray/op_greater_equal.md
@@ -108,6 +108,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_left_shift.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_left_shift.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_left_shift.md b/reference/valarray/valarray/op_left_shift.md
index e2c3135a2..a33997609 100644
--- a/reference/valarray/valarray/op_left_shift.md
+++ b/reference/valarray/valarray/op_left_shift.md
@@ -114,6 +114,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_left_shift_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_left_shift_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_left_shift_assign.md b/reference/valarray/valarray/op_left_shift_assign.md
index 63e6ef71b..23f3f98f2 100644
--- a/reference/valarray/valarray/op_left_shift_assign.md
+++ b/reference/valarray/valarray/op_left_shift_assign.md
@@ -89,6 +89,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_less.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_less.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_less.md b/reference/valarray/valarray/op_less.md
index 88174690e..92c500dd0 100644
--- a/reference/valarray/valarray/op_less.md
+++ b/reference/valarray/valarray/op_less.md
@@ -108,6 +108,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_less_equal.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_less_equal.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_less_equal.md b/reference/valarray/valarray/op_less_equal.md
index 31bd24837..8cf301c39 100644
--- a/reference/valarray/valarray/op_less_equal.md
+++ b/reference/valarray/valarray/op_less_equal.md
@@ -108,6 +108,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_not_equal.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_not_equal.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_not_equal.md b/reference/valarray/valarray/op_not_equal.md
index fe4b67f3e..981744c7c 100644
--- a/reference/valarray/valarray/op_not_equal.md
+++ b/reference/valarray/valarray/op_not_equal.md
@@ -107,6 +107,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator| -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_or.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_or.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_or.md b/reference/valarray/valarray/op_or.md
index 5668aae37..11be44a3b 100644
--- a/reference/valarray/valarray/op_or.md
+++ b/reference/valarray/valarray/op_or.md
@@ -116,6 +116,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator|= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_or_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_or_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_or_assign.md b/reference/valarray/valarray/op_or_assign.md
index 06697baa3..c543c4b67 100644
--- a/reference/valarray/valarray/op_or_assign.md
+++ b/reference/valarray/valarray/op_or_assign.md
@@ -90,6 +90,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_right_shift.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_right_shift.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_right_shift.md b/reference/valarray/valarray/op_right_shift.md
index bd97a567c..d671de213 100644
--- a/reference/valarray/valarray/op_right_shift.md
+++ b/reference/valarray/valarray/op_right_shift.md
@@ -114,6 +114,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_right_shift_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_right_shift_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_right_shift_assign.md b/reference/valarray/valarray/op_right_shift_assign.md
index ede0ee6cc..bce3f8a1b 100644
--- a/reference/valarray/valarray/op_right_shift_assign.md
+++ b/reference/valarray/valarray/op_right_shift_assign.md
@@ -89,6 +89,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^ -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_xor.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_xor.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_xor.md b/reference/valarray/valarray/op_xor.md
index 7afaeec59..d07af9e47 100644
--- a/reference/valarray/valarray/op_xor.md
+++ b/reference/valarray/valarray/op_xor.md
@@ -116,6 +116,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^= -- コード修飾の重複削除スクリプト : valarrayのbegin/endを削除対象外にした</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_xor_assign.html"/>
      <id>3d6b7ce67d61e9148b1c7d37f07d153960ce827b:reference/valarray/valarray/op_xor_assign.md</id>
      <updated>2025-07-09T01:20:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_xor_assign.md b/reference/valarray/valarray/op_xor_assign.md
index 406918c3c..eba44c9ff 100644
--- a/reference/valarray/valarray/op_xor_assign.md
+++ b/reference/valarray/valarray/op_xor_assign.md
@@ -89,6 +89,8 @@ int main()
 }
 ```
 * std::all_of[link /reference/algorithm/all_of.md]
+* std::begin[link /reference/valarray/valarray/begin_free.md]
+* std::end[link /reference/valarray/valarray/end_free.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>