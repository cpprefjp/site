<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-07-11T12:18:11.993807</updated>
  <id>b95f38dc-b5e1-4c54-b602-a90960b771fd</id>

  
    <entry>
      <title>fprintf -- fix(reference/cstdio/printf): 出力の修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/printf.html"/>
      <id>ac726016da05c3c3c7c164f73684c3aea9242a2a:reference/cstdio/printf.md</id>
      <updated>2025-07-11T20:54:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/printf.md b/reference/cstdio/printf.md
index 5a7153fa3..4542dc2ea 100644
--- a/reference/cstdio/printf.md
+++ b/reference/cstdio/printf.md
@@ -25,6 +25,7 @@ int main() {
 ### 出力
 ```
 Hello, World!
+123
 ```
 
 ## 処理系
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>malloc -- fix(reference/cstdlib/malloc): タイポ修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/malloc.html"/>
      <id>b6ed840a376307709f63889e382387a934ff8494:reference/cstdlib/malloc.md</id>
      <updated>2025-07-10T15:32:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/malloc.md b/reference/cstdlib/malloc.md
index 16559c0fb..613a8f11e 100644
--- a/reference/cstdlib/malloc.md
+++ b/reference/cstdlib/malloc.md
@@ -42,7 +42,7 @@ cppref より引用。
 
 int main()
 {
-  int *p1 = std::malloc(4 * sizeof(int)); // 4個のint型配列の目盛りを確保
+  int *p1 = std::malloc(4 * sizeof(int)); // 4個のint型配列のメモリ領域を確保
   int *p2 = std::malloc(sizeof(int[4]));  // 上と同じ。
   int *p3 = std::malloc(4 * sizeof *p3);  // 上と同じ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>address -- fix(reference/atomic/atomic_ref/address): 壊れたコード修飾の修正</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/address.html"/>
      <id>9ffa3bcb7c20abe4de4c3be8e542e56be91e87c1:reference/atomic/atomic_ref/address.md</id>
      <updated>2025-07-10T15:20:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/address.md b/reference/atomic/atomic_ref/address.md
index 11afa684b..dad2c19b6 100644
--- a/reference/atomic/atomic_ref/address.md
+++ b/reference/atomic/atomic_ref/address.md
@@ -33,7 +33,7 @@ int fetch_add_idx(std::atomic_ref&amp;lt;int&amp;gt; base, size_t i, int value) {
   return std::atomic_ref{*(p+i)}.fetch_add(value);
 }
 ```
-* fetch_add[link fetch_add.md
+* fetch_add[link fetch_add.md]
 
 #### 必要なときにのみアトミックアクセスする
 以下の例では、複数のスレッドが並行にメモリにアクセスし、カウンタをインクリメントすることでアクセス終了を知らせている。最後のスレッドはメモリにアクセスする余分な処理を実行する必要があるが、並行にメモリにアクセスするほかのスレッドがないため、これらのアクセスはアトミックである必要がない：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fgetc -- fix(reference/cstdio): 壊れたリンクの修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fgetc.html"/>
      <id>5c40eb5440d8b973dfa1b9167942f2c1025ea079:reference/cstdio/fgetc.md</id>
      <updated>2025-07-10T13:53:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fgetc.md b/reference/cstdio/fgetc.md
index ab874b65f..5a3db2532 100644
--- a/reference/cstdio/fgetc.md
+++ b/reference/cstdio/fgetc.md
@@ -12,7 +12,7 @@ namespace std {
 ## 概要
 指定されたファイルストリームから1文字入力する。
 
-[`getc`][/reference/cstdio/getc.md]とは違い、関数として定義することが定められているため、引数は一度しか評価されないことが保証されている。
+[`getc`](/reference/cstdio/getc.md)とは違い、関数として定義することが定められているため、引数は一度しか評価されないことが保証されている。
 
 ## 戻り値
 入力された文字を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fputc -- fix(reference/cstdio): 壊れたリンクの修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fputc.html"/>
      <id>5c40eb5440d8b973dfa1b9167942f2c1025ea079:reference/cstdio/fputc.md</id>
      <updated>2025-07-10T13:53:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fputc.md b/reference/cstdio/fputc.md
index e8d38e7fd..87dc7436a 100644
--- a/reference/cstdio/fputc.md
+++ b/reference/cstdio/fputc.md
@@ -12,7 +12,7 @@ namespace std {
 ## 概要
 指定されたファイルストリームに1文字出力する。
 
-[`putc`][/reference/cstdio/putc.md]とは違い、関数として定義することが定められているため、引数は一度しか評価されないことが保証されている。
+[`putc`](/reference/cstdio/putc.md)とは違い、関数として定義することが定められているため、引数は一度しか評価されないことが保証されている。
 
 ## 戻り値
 出力された文字を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>getchar -- style(reference/cstdlib): コーディングスタイルの統一</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/getchar.html"/>
      <id>7462c83921d8cb42a4aa80d8c5e1a2698252bd40:reference/cstdio/getchar.md</id>
      <updated>2025-07-10T10:57:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/getchar.md b/reference/cstdio/getchar.md
index 025379e4a..96437eb4a 100644
--- a/reference/cstdio/getchar.md
+++ b/reference/cstdio/getchar.md
@@ -22,6 +22,7 @@ namespace std {
 ## 例
 ```cpp example
 #include &amp;lt;cstdio&amp;gt;
+
 int main() {
   int c;
   while ((c = std::getchar()) != EOF) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>free -- style(reference/cstdlib): コーディングスタイルの統一</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/free.html"/>
      <id>7462c83921d8cb42a4aa80d8c5e1a2698252bd40:reference/cstdlib/free.md</id>
      <updated>2025-07-10T10:57:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/free.md b/reference/cstdlib/free.md
index 57c64a7e8..b69cfbc96 100644
--- a/reference/cstdlib/free.md
+++ b/reference/cstdlib/free.md
@@ -27,12 +27,12 @@ namespace std {
 
 int main()
 {
-  int *p1 = std::malloc(10*sizeof *p1);
+  int *p1 = std::malloc(10 * sizeof *p1);
   std::free(p1); // p1のメモリを解放
 
   int *p2 = std::calloc(10, sizeof *p2);
-  int *p3 = std::realloc(p2, 1000*sizeof *p3);
-  if(p3) 
+  int *p3 = std::realloc(p2, 1000 * sizeof *p3);
+  if (p3) 
     std::free(p3); // realloc により新しい領域が確保された場合、それを解放
   else
     std::free(p2); // realloc が失敗した場合は元の領域を解放
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>malloc -- style(reference/cstdlib): コーディングスタイルの統一</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/malloc.html"/>
      <id>7462c83921d8cb42a4aa80d8c5e1a2698252bd40:reference/cstdlib/malloc.md</id>
      <updated>2025-07-10T10:57:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/malloc.md b/reference/cstdlib/malloc.md
index 5594c7f46..16559c0fb 100644
--- a/reference/cstdlib/malloc.md
+++ b/reference/cstdlib/malloc.md
@@ -42,18 +42,18 @@ cppref より引用。
 
 int main()
 {
-  int *p1 = std::malloc(4*sizeof(int));  // 4個のint型配列の目盛りを確保
-  int *p2 = std::malloc(sizeof(int[4])); // 上と同じ。
-  int *p3 = std::malloc(4*sizeof *p3);   // 上と同じ。
-
-  if(p1) {
-    for(int n=0; n&amp;lt;4; ++n)
-      p1[n] = n*n;
-    for(int n=0; n&amp;lt;4; ++n)
+  int *p1 = std::malloc(4 * sizeof(int)); // 4個のint型配列の目盛りを確保
+  int *p2 = std::malloc(sizeof(int[4]));  // 上と同じ。
+  int *p3 = std::malloc(4 * sizeof *p3);  // 上と同じ。
+
+  if (p1) {
+    for (int n = 0; n &amp;lt; 4; ++n)
+      p1[n] = n * n;
+    for (int n = 0; n &amp;lt; 4; ++n)
       std::printf(&amp;#34;p1[%d] == %d\n&amp;#34;, n, p1[n]);
   }
 
-  std::free(p1);//メモリを解放
+  std::free(p1); // メモリを解放
   std::free(p2);
   std::free(p3);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>