<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-08-13T02:56:42.116011</updated>
  <id>d63e384f-fe30-49f1-8bd7-2f7c34c02a2f</id>

  
    <entry>
      <title>属性構文 [N2761] -- Add `assume` attributes to attributes.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>d3227a734b455e06aec3830ab3aeb9a4b5724309:lang/cpp11/attributes.md</id>
      <updated>2025-08-13T11:48:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index 162f7330a..84d3ad7b0 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -177,6 +177,7 @@ C++11で採用されたもの以外で検討された以下の機能は、属性
 - [C++20 `[[likely]]`, `[[unlikely]]`属性](/lang/cpp20/likely_and_unlikely_attributes.md)
 - [C++20 属性の名前空間を予約](/lang/cpp20/reserving_attribute_namespaces_for_future_use.md)
 - [C++23 ラムダ式に対する属性](/lang/cpp23/attributes_on_lambda_expressions.md)
+- [C++23 コード内容の仮定をコンパイラに伝える`assume`属性](/lang/cpp23/portable_assumptions.md)
 - [C++26 構造化束縛への属性を許可](/lang/cpp26/attributes_for_structured_bindings.md)
 - [C++26 未初期化変数の読み取りをエラー性動作とする (`[[indeterminate]]`属性)](/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Y.Moroto</name>
        <email>morojuyi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:lang/cpp23.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂され、ISO/IEC 14882:2024で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/simpler_implicit_move.html&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらに加えて、ライブラリ機能として拡張浮動小数点数型が定義された。&lt;code&gt;&lt;a href=&#34;../reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/meaningful_exports.html&#34;&gt;無意味なexport宣言を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いくつかの不必要な宣言に対するモジュールexportを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/extend_init_statement_to_allow_alias_declaration.html&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲初期化子内で生じた一時オブジェクトは範囲for文の終わりまで延命される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/labels_at_the_end_of_compound_statements.html&#34;&gt;複合文の末尾へのラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、複合文の末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/make_declaration_order_layout_mandated.html&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトは並び替えを許可されていたが宣言順に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/multidimensional_subscript_operator.html&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/static_operator.html&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;状態をもたないいくつかの演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/mixed_string_literal_concatenation.html&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルの連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/delimited_escape_sequences.html&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.html&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/generalized_wording_for_partial_specializations.html&#34;&gt;変数テンプレートの部分特殊化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/class_template_argument_deduction_from_inherited.html&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;継承コンストラクタからもクラステンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp23/if_consteval.html&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/narrowing_contextual_conversions_to_bool.html&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/non_literal_variables_in_constexpr_functions.html&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない限り、定数式内に静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/character_encoding_of_diagnostic_text.html&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/relaxing_some_constexpr_restrictions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式実行できない関数であっても、実際にコンパイル時に評価されない限り&lt;code&gt;constexpr&lt;/code&gt;指定することを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;関数のローカルで定数を定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/consteval_needs_to_propagate_up.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内で&lt;code&gt;consteval&lt;/code&gt;関数を呼び出せない問題を軽減&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;呼び出しを含む&lt;code&gt;constexpr&lt;/code&gt;関数を条件付きで&lt;code&gt;consteval&lt;/code&gt;関数とみなすようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/down_with_lambda_parens.html&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;修飾や戻り値型をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/attributes_on_lambda_expressions.html&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/portable_assumptions.html&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/consistent_character_literal_encoding.html&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/warning.html&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/support_for_utf8_as_a_portable_source_file_encoding.html&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;すべてのコンパイラはUTF-8文字コードのソースコードをサポートしなければならない&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp23/trimming_whitespaces_before_line_splicing.html&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が「&lt;code&gt;\ &lt;/code&gt;」でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++標準ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;../module/std.html&#34;&gt;std&lt;/a&gt;&lt;/code&gt;、C互換ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;../module/std.compat.html&#34;&gt;std.compat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/spanstream.html&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正常値とエラー値のどちらかを持つクラスおよびライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;多次元配列ビューのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ノードベースではないソート済みキーによる順序付き連想コンテナのライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;書式指定で出力するライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コルーチンによるRangeの生成をサポートする&lt;code&gt;&lt;a href=&#34;../reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;拡張浮動小数点数のライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;../reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator/allocate_at_least.html&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits.html&#34;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits/allocate_at_least.html&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナの要素削除の処理について、一時オブジェクトのコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/erase.html&#34;&gt;std::map::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/extract.html&#34;&gt;std::map::extract()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲を綴じ合わせる&lt;code&gt;&lt;a href=&#34;../reference/ranges/zip_view.html&#34;&gt;std::views::zip&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲の直積をとる&lt;code&gt;&lt;a href=&#34;../reference/ranges/cartesian_product_view.html&#34;&gt;std::views::cartesian_product&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するRangeアダプタ&lt;code&gt;&lt;a href=&#34;../reference/ranges/to.html&#34;&gt;std::ranges::to()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するために、可変長のコンテナ (&lt;code&gt;&lt;a href=&#34;../reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;以外) に、以下の機能を追加：&lt;ul&gt;
&lt;li&gt;Rangeから変換するコンストラクタ&lt;/li&gt;
&lt;li&gt;Rangeを挿入する&lt;code&gt;insert_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを先頭に追加する&lt;code&gt;prepend_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを末尾に追加する&lt;code&gt;append_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを代入する&lt;code&gt;assign_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;../reference/ranges/range_adaptor_closure.html&#34;&gt;std::ranges::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを連結させる&lt;code&gt;&lt;a href=&#34;../reference/ranges/join_with_view.html&#34;&gt;join_with&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを指定の大きさで分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/chunk_view.html&#34;&gt;std::views::chunk&lt;/a&gt;&lt;/code&gt;と、Rangeを指定の大きさの隣接要素で分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/slide_view.html&#34;&gt;std::views::slide&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを条件一致する間の要素で分割する&lt;code&gt;&lt;a href=&#34;../reference/ranges/chunk_by_view.html&#34;&gt;std::views::chunk_by&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを等間隔からなるRangeに変換する&lt;code&gt;&lt;a href=&#34;../reference/ranges/stride_view.html&#34;&gt;std::views::stride&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをムーブするための&lt;code&gt;&lt;a href=&#34;../reference/ranges/as_rvalue_view.html&#34;&gt;std::views::as_rvalue&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、指定した値をN回繰り返すRangeを生成する&lt;code&gt;&lt;a href=&#34;../reference/ranges/repeat_view.html&#34;&gt;std::views::repeat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをインデックス付きでループさせる&lt;code&gt;&lt;a href=&#34;../reference/ranges/enumerate_view.html&#34;&gt;std::views::enumerate&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_starts_with.html&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_ends_with.html&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素を左シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;、要素を右シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の末尾から要素を検索する以下のアルゴリズムを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last.html&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last_if.html&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last_if_not.html&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲に特定の値が含まれているかを判定する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_contains.html&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_contains_subrange.html&#34;&gt;std::ranges::contains_subrange&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、数値に限定しない汎用的な畳み込みアルゴリズムとして、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left.html&#34;&gt;std::ranges::fold_left()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_first.html&#34;&gt;std::ranges::fold_left_first()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_right.html&#34;&gt;std::ranges::fold_right()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_right_last.html&#34;&gt;std::ranges::fold_right_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_with_iter.html&#34;&gt;std::ranges::fold_left_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left_first_with_iter.html&#34;&gt;std::ranges::fold_left_first_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、連番を生成するRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;../reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスに、resize時に任意の初期化を行う&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string/resize_and_overwrite.html&#34;&gt;resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタと&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string/substr.html&#34;&gt;substr()&lt;/a&gt;&lt;/code&gt;メンバ関数に一時オブジェクトのオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数でRange・コンテナ、&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;を出力できるよう、&lt;code&gt;&lt;a href=&#34;../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;に特殊化を追加&lt;ul&gt;
&lt;li&gt;Range・シーケンスコンテナは&lt;code&gt;[1, 2, 3]&lt;/code&gt;、&lt;code&gt;[&#34;hello&#34;, &#34;world&#34;]&lt;/code&gt;、&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;連想コンテナの場合、&lt;code&gt;std::map&amp;lt;int, int&amp;gt;{{1, 2}, {3, 4}}&lt;/code&gt;は&lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;のように出力され、&lt;code&gt;std::set&amp;lt;int&amp;gt;{1, 2, 3}&lt;/code&gt;は&lt;code&gt;{1, 2, 3}&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;は&lt;code&gt;(1, 2)&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数のフォーマット指定子としてデバッグ指定「&lt;code&gt;&#34;?&#34;&lt;/code&gt;」を追加。これは文字・文字列を引用符で囲み、エスケープシーケンスをエスケープする&lt;ul&gt;
&lt;li&gt;ただし、Range・コンテナ中の文字・文字列はデフォルトでエスケープされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format(&#34;{:?}&#34;, &#34;h\tello&#34;)&lt;/code&gt;は&lt;code&gt;&#34;h\tello&#34;&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ostream/basic_ostream.html&#34;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;../reference/ostream/basic_ostream/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;const volatile void*&lt;/code&gt;をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;ファイルを開く際のオプションとして、排他モードを表す&lt;code&gt;&lt;a href=&#34;../reference/ios/ios_base/type-openmode.html&#34;&gt;noreplace&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;../reference/functional/invoke_r.html&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;クラスと等価な機能をもつ、ムーブのみ可能な&lt;code&gt;&lt;a href=&#34;../reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、末尾から引数を束縛する&lt;code&gt;&lt;a href=&#34;../reference/functional/bind_back.html&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レガシーC関数からスマートポインタへの直接出力をサポートする、スマートポインタアダプタ&lt;code&gt;&lt;a href=&#34;../reference/memory/out_ptr.html&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/memory/inout_ptr.html&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、オブジェクトの生存期間を開始することを明示する関数として、&lt;code&gt;&lt;a href=&#34;../reference/memory/start_lifetime_as.html&#34;&gt;std::start_lifetime_as()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/memory/start_lifetime_as_array.html&#34;&gt;std::start_lifetime_as_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;に、値のバイト入れ替え (エンディアン変換) を行う&lt;code&gt;&lt;a href=&#34;../reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;../reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、 (主に) メンバ変数を転送するため、指定された型の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する&lt;code&gt;&lt;a href=&#34;../reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;クラスにモナド操作としてメンバ関数&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/and_then.html&#34;&gt;and_then()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/transform.html&#34;&gt;transform()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/or_else.html&#34;&gt;or_else()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;到達しないパスであることを表明する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/unreachable.html&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;クラスをさらに&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、一時オブジェクトの参照への束縛を検出するための型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/reference_converts_from_temporary.html&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、暗黙的に構築される型かを判定する型特性&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_implicit_lifetime.html&#34;&gt;std::is_implicit_lifetime&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダと&lt;code&gt;&lt;a href=&#34;../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの多くの関数を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;../reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;../reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;のメンバ型&lt;code&gt;is_always_equal&lt;/code&gt;を非推奨化。これはアロケータが状態をもたないことを表す型でありデフォルトでは&lt;code&gt;&lt;a href=&#34;../reference/type_traits/true_type.html&#34;&gt;true_type&lt;/a&gt;&lt;/code&gt;となっている。状態をもつユーザー定義のアロケータ型でこのメンバ型の上書きを忘れることでバグが埋め込まれてしまっていたため誤用防止のために非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の非正規化数に関する機能を非推奨化。これらの機能は必ずしもコンパイル時に決まらない可能性のある値であり有用でないため、非推奨とする&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;../reference/limits/numeric_limits/has_denorm.html&#34;&gt;has_denorm&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/numeric_limits.html&#34;&gt;std::numeric_limits&lt;/a&gt;::&lt;a href=&#34;../reference/limits/numeric_limits/has_denorm_loss.html&#34;&gt;has_denorm_loss&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/limits/float_denorm_style.html&#34;&gt;std::float_denorm_style&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;cpp11/predefined_macros.html&#34;&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のヘッダの一部機能をフリースタンディングライブラリとして追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>機能テストマクロ -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:lang/cpp23/feature_test_macros.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;このページはC++23に採用された言語機能の変更を解説しています。&lt;/p&gt;
&lt;p&gt;のちのC++規格でさらに変更される場合があるため&lt;a href=&#34;#relative-page&#34;&gt;関連項目&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_auto_cast&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto(x)&lt;/code&gt;および&lt;code&gt;auto{x}&lt;/code&gt;によるキャスト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_constexpr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;permitting_static_constexpr_variables_in_constexpr_functions.html&#34;&gt;constexpr関数内でのstatic constexpr変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_if_consteval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;if_consteval.html&#34;&gt;if consteval&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_implicit_move&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;simpler_implicit_move.html&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_multidimensional_subscript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;multidimensional_subscript_operator.html&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_named_character_escapes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;named_universal_character_escapes.html&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_range_based_for&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_size_t_suffix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)size_tリテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_static_call_operator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;static_operator.html&#34;&gt;thisポインタをもつ必要のない演算子をstaticとして宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;../../reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_adaptor_iterator_pair_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;にイテレータ２つのコンストラクタを追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_algorithm_iterator_requirements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;のRangeイテレータ対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_allocate_at_least&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/allocator/allocate_at_least.html&#34;&gt;std::allocator::allocate_at_least()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_associative_heterogeneous_erasure&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレート型を受ける&lt;code&gt;erase()&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_barrier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリアフェーズの完了ステップの仕様変更&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_bind_back&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/bind_back.html&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_byteswap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_common_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;と&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;の&lt;code&gt;common_reference&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_common_reference_wrapper&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;と&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;の&lt;code&gt;common_reference&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に変換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_concepts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts/equality_comparable.html&#34;&gt;std::equality_comparable_with&lt;/a&gt;&lt;/code&gt;などをムーブのみ可能な型に対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_bitset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_charconv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv/to_chars.html&#34;&gt;std::to_chars()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/charconv/from_chars.html&#34;&gt;std::from_chars()&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_cmath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;いくつかの関数を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_memory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_constexpr_typeinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/typeinfo/type_info/op_equal.html&#34;&gt;std::type_info::operator==()&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_containers_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナのコンストラクタのRange対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_expected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202211L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_flat_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_map/flat_map.html&#34;&gt;std::flat_map&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/flat_map/flat_multimap.html&#34;&gt;std::flat_multimap&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_flat_set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_set/flat_set.html&#34;&gt;std::flat_set&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/flat_set/flat_multiset.html&#34;&gt;std::flat_multiset&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::format&lt;/code&gt;の時刻型のローカライズ対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_format_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;のRange対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_formatters&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace/basic_stacktrace.html&#34;&gt;std::stacktrace&lt;/a&gt;&lt;/code&gt;対応と&lt;code&gt;&lt;a href=&#34;../../reference/thread/thread/id.html&#34;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt;対応&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_forward_like&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_generator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/generator/generator.html&#34;&gt;std::generator&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_invoke_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/invoke_r.html&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ios_noreplace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ios/ios_base/type-openmode.html&#34;&gt;std::ios::noreplace&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_implicit_lifetime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_implicit_lifetime.html&#34;&gt;std::is_implicit_lifetime&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_is_scoped_enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_mdspan&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_modules&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;モジュール&lt;code&gt;&lt;a href=&#34;../../module/std.html&#34;&gt;&amp;lt;std&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../module/std.compat.html&#34;&gt;&amp;lt;std.compat&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_move_iterator_concept&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator/move_iterator.html&#34;&gt;std::move_iterator&amp;lt;T*&amp;gt;&lt;/a&gt;&lt;/code&gt;をランダムアクセスイテレータにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_move_only_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_optional&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;にモナド操作を追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_out_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/out_ptr.html&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/memory/inout_ptr.html&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/range_adaptor_closure.html&#34;&gt;std::ranges::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;の追加&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;の様々な機能追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/cbegin.html&#34;&gt;std::ranges::cbegin&lt;/a&gt;&lt;/code&gt;が常に定数イテレータを返すようにする。&lt;code&gt;&lt;a href=&#34;../../reference/ranges/as_const_view.html&#34;&gt;std::ranges::as_const_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_rvalue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/as_rvalue_view.html&#34;&gt;std::ranges::as_rvalue_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_cartesian_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/cartesian_product_view.html&#34;&gt;std::ranges::cartesian_product_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_chunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/chunk_view.html&#34;&gt;std::ranges::chunk_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_chunk_by&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/chunk_by_view.html&#34;&gt;std::ranges::chunk_by_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_contains.html&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_enumerate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202302L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/enumerate_view.html&#34;&gt;std::ranges::enumerate_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_find_last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last.html&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last_if.html&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_find_last_if_not.html&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::ranges::&lt;/code&gt;に&lt;code&gt;fold&lt;/code&gt;アルゴリズムの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_iota&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_join_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/join_with_view.html&#34;&gt;std::ranges::join_with_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_repeat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/repeat_view.html&#34;&gt;std::ranges::repeat_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_slide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/slide_view.html&#34;&gt;std::ranges::slide_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_starts_ends_with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_starts_with.html&#34;&gt;std::ranges::starts_with()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_ends_with.html&#34;&gt;std::ranges::ends_with()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_stride&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/stride_view.html&#34;&gt;std::ranges::stride_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_to_container&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/to.html&#34;&gt;std::ranges::to&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_zip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges/zip_view.html&#34;&gt;std::ranges::zip_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/zip_transform_view.html&#34;&gt;std::ranges::zip_transform_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/adjacent_view.html&#34;&gt;std::ranges::adjacent_view&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/ranges/adjacent_transform_view.html&#34;&gt;std::ranges::adjacent_transform_view&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_reference_from_temporary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/reference_constructs_from_temporary.html&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/type_traits/reference_converts_from_temporary.html&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_spanstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202106L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/spanstream.html&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/spanstream.html&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_stacktrace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_start_lifetime_as&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory/start_lifetime_as.html&#34;&gt;std::start_lifetime_as()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_stdatomic_h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202011L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/contains.html&#34;&gt;std::basic_string::contains()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../../reference/string_view/basic_string_view/contains.html&#34;&gt;std::basic_string_view::contains()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_string_resize_and_overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202110L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string/basic_string/resize_and_overwrite.html&#34;&gt;std::basic_string::resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_to_underlying&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202102L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_tuple_like&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple/tuple-like.html&#34;&gt;tuple-like&lt;/a&gt;&lt;/code&gt;コンセプトの追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_unreachable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202202L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility/unreachable.html&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_print&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202403L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;の追加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;../../reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;a href=&#34;../../reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リファレンス -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#debug&#34;&gt;デバッグライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;#language-support-library&#34; id=&#34;language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装プロパティ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装依存のバージョン情報&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdfloat.html&#34;&gt;&amp;lt;stdfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;拡張浮動小数点数型&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的メモリ管理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型情報&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソースコード上の位置&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外ハンドリング&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比較演算&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチン&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#concepts&#34; id=&#34;concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;言語関係のコンセプト&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#diagnostics&#34; id=&#34;diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdexcept.html&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーサポート&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#general-utils&#34; id=&#34;general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティコンポーネント&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットの固定サイズシーケンス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時有理数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タプル&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意で値を持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;候補の型を切り替えながら保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;あらゆる型の値を保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常値かエラー値のどちらかを持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型特性&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スコープ付きアロケータ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多相アロケータ&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間ユーティリティ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/typeindex.html&#34;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のインデックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実行ポリシー、実行制御ライブラリ(C++26)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高速な文字列 ⇔ 数値変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スタックトレース&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#strings&#34; id=&#34;strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列クラスと、文字特性&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たず文字列を参照する文字列クラス&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#localization&#34; id=&#34;localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列エンコーディングの識別&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コード変換ファセット&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++17から非推奨&lt;br /&gt; C++26で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;両端キュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単方向リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向リスト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;FIFOキュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LIFOスタック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/inplace_vector.md.nolink&#34;&gt;&amp;lt;inplace_vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容量固定の可変長配列&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き連想配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/flat_map.html&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き連想配列&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/flat_set.html&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き集合&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序集合&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分シーケンスの参照&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#ranges&#34; id=&#34;ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;レンジアルゴリズム&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンによるレンジ生成&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#algorithm&#34; id=&#34;algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#numerics&#34; id=&#34;numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乱数生成&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/valarray.html&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値の配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一般的な数値操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;線形代数&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#debug&#34; id=&#34;debug&#34;&gt;デバッグライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/debugging.html&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッグサポート&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/contracts.html&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約プログラミング&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#io&#34; id=&#34;io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行宣言&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準&lt;code&gt;iostream&lt;/code&gt;オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iostream&lt;/code&gt;基底クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/streambuf.html&#34;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームバッファ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットとマニピュレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/sstream.html&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;古い文字列ストリーム&lt;/td&gt;
&lt;td&gt;C++98から非推奨&lt;br /&gt; C++26で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/fstream.html&#34;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステム&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリームラッパー&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/spanstream.html&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリバッファの所有権をもたないストリーム&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/print.html&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定による出力&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#regular-expressions&#34; id=&#34;regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic-operations&#34; id=&#34;atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミックアクセスのためのコンポーネント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミック操作のC互換ライブラリ&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#thread-support&#34; id=&#34;thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミューテックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有ミューテックス&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/condition_variable.html&#34;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件変数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;セマフォ&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラッチ同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリア同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/future.html&#34;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Future&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/rcu.html&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;データの参照・更新&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハザードポインタ&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/simd.md.nolink&#34;&gt;&amp;lt;simd&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;データ並列&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#clib-facilities&#34; id=&#34;clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cassert.html&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサート&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cctype.html&#34;&gt;&amp;lt;cctype&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字種別の判定と変換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー番号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cfenv.html&#34;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点環境へのアクセス&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定精度整数のための書式指定マクロ&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;に対する別名&lt;code&gt;and&lt;/code&gt;のような、各種演算子に対するマクロを定義する。&lt;br /&gt; ただしC++ではこれらの別名はキーワードとして定義されるため、このヘッダでは何も定義されない。&lt;/td&gt;
&lt;td&gt;C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/climits.html&#34;&gt;&amp;lt;climits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型の最小値、最大値を表すマクロ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジャンプ処理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シグナル&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント操作のマクロ&lt;/td&gt;
&lt;td&gt;C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdbit.h.md.nolink&#34;&gt;&amp;lt;stdbit.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/stdckdint.h.md.nolink&#34;&gt;&amp;lt;stdckdint.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検査付き整数演算&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型の定義&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基本的な型、値、マクロの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大きさが規定されている整数型&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdio.html&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティ関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/cstring.html&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックな数学関数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/ctime.html&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付・時間&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユニコード文字型&lt;/td&gt;
&lt;td&gt;C++11 (C11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字の種別と判定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;#exposition-only&#34; id=&#34;exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;reference/exposition-only.html&#34;&gt;exposition-only&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明のためのものを集めたページ (実際のライブラリではない)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2867r2.html&#34; target=&#34;_blank&#34;&gt;P2867R2 Remove Deprecated &lt;code&gt;strstream&lt;/code&gt;s From C++26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/execution/execution.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 352d5fec1..634592a36 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -122,7 +122,6 @@ namespace std::execution {
 | [`execution::let_error`](execution/let_error.md) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::let_stopped`](execution/let_stopped.md) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::bulk`](execution/bulk.md) | インデクス空間上で指定関数を反復実行 (customization point object) | C++26 |
-| [`execution::split`](execution/split.md) | 入力Senderの値を複製回送信可能とする (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::when_all_with_variant`](execution/when_all_with_variant.md) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
@@ -163,3 +162,4 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 ## 参照
 - [P0024R2 The Parallelism TS Should be Standardized](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3682R0 Remove `std::execution::split`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3682r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on-stop-request -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on-stop-request.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/execution/execution/on-stop-request.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on-stop-request.md b/reference/execution/execution/on-stop-request.md
index 447aa6986..06ad7d68c 100644
--- a/reference/execution/execution/on-stop-request.md
+++ b/reference/execution/execution/on-stop-request.md
@@ -24,7 +24,6 @@ struct on-stop-request {
 
 ## 関連項目
 - [`execution::when_all`](when_all.md)
-- [`execution::split`](split.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split.md -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/split.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/execution/execution/split.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/split.md b/reference/execution/execution/split.md
deleted file mode 100644
index cbbfd3013..000000000
--- a/reference/execution/execution/split.md
+++ /dev/null
@@ -1,398 +0,0 @@
-# split
-* execution[meta header]
-* cpo[meta id-type]
-* std::execution[meta namespace]
-* cpp26[meta cpp]
-
-```cpp
-namespace std::execution {
-  struct split_t { unspecified };
-  inline constexpr split_t split{};
-}
-```
-* unspecified[italic]
-
-## 概要
-`split`は、任意の入力[Sender](sender.md)を複数回[接続(connect)](connect.md)可能とするSenderアダプタである。
-
-`split`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
-
-
-## 効果
-説明用の型`split-env`を、インスタンス`env`に対して式[`get_stop_token`](../get_stop_token.md)`(env)`が適格かつ型[`inplace_stop_token`](/reference/stop_token/inplace_stop_token.md)をもつ型とする。
-
-説明用の式`sndr`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender_in`](sender_in.md)`&amp;lt;Sndr, split-env&amp;gt; == false`のとき、呼び出し式`split(sndr)`は不適格となる。
-
-そうでなければ、呼び出し式`split(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
-
-```cpp
-transform_sender(get-domain-early(sndr), make-sender(split, {}, sndr))
-```
-* transform_sender[link transform_sender.md]
-* get-domain-early[link get-domain-early.md]
-* make-sender[link make-sender.md]
-
-
-### Senderアルゴリズムタグ `split`
-説明用のSenderアルゴリズムタグ型`split-impl-tag`を空の型とする。説明用の式`sndr`に対して、式`split.transform_sender(sndr)`は下記と等価。
-
-```cpp
-auto&amp;amp;&amp;amp; [tag, _, child] = sndr;
-auto* sh_state = new shared-state{std::forward_like&amp;lt;decltype((sndr))&amp;gt;(child)};
-return make-sender(split-impl-tag(), shared-wrapper{sh_state, tag});
-```
-* make-sender[link make-sender.md]
-
-説明用の型`shared-wrapper`は、`sh_state`が指す`shared-state`オブジェクトの参照カウントを管理するクラスである。
-
-- `shared-wrapper`は[`copyable`](/reference/concepts/copyable.md)のモデルである。
-- ムーブ操作 : 移動済みオブジェクトをヌルとする。
-- コピー操作 : `sh_state-&amp;gt;inc-ref()`を呼び出して参照カウントをインクリメントする。
-- 代入操作 : Copy-And-Swap操作を行う。
-- デストラクタ : `sh_state`がヌルのときは何もしない。そうでないとき、`sh_state-&amp;gt;dec-ref()`を評価して参照カウントをデクリメントする。
-
-
-### Senderアルゴリズムタグ `split-impl-tag`
-Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
-
-```cpp
-namespace std::execution {
-  template&amp;lt;&amp;gt;
-  struct impls-for&amp;lt;split-impl-tag&amp;gt; : default-impls {
-    static constexpr auto get-state = see below;
-    static constexpr auto start = see below;
-  };
-}
-```
-* impls-for[link impls-for.md]
-* default-impls[link impls-for.md]
-
-`impls-for&amp;lt;split-impl-tag&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
-
-```cpp
-[]&amp;lt;class Sndr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, auto&amp;amp; rcvr) noexcept {
-  return local-state{std::forward&amp;lt;Sndr&amp;gt;(sndr), rcvr};
-}
-```
-
-`impls-for&amp;lt;split-impl-tag&amp;gt;::start`メンバは、下記の関数呼び出し演算子をもつオブジェクトで初期化される。
-
-```cpp
-template&amp;lt;class Sndr, class Rcvr&amp;gt;
-void operator()(local-state&amp;lt;Sndr, Rcvr&amp;gt;&amp;amp; state, Rcvr&amp;amp; rcvr) const noexcept;
-```
-
-効果 : `state.sh_state-&amp;gt;completed == true`のとき、`state.notify()`を評価してリターンする。そうでなければ、下記を順番に行う。
-
-- 以下を評価する。
-
-    ```cpp
-    state.on_stop.emplace(
-      get_stop_token(get_env(rcvr)),
-      on-stop-request{state.sh_state-&amp;gt;stop_src});
-    ```
-    * emplace[link /reference/optional/optional/emplace.md]
-    * get_stop_token[link ../get_stop_token.md]
-    * get_env[link get_env.md]
-    * on-stop-request[link on-stop-request.md]
-
-- 下記をアトミックに行う。
-    - `state.sh_state-&amp;gt;completed`の値`c`を読み取り
-    - `c == false`のとき、`state.sh_state-&amp;gt;waiting_state`に[`addressof`](/reference/memory/addressof.md)`(state)`を挿入する
-- `c == true`ならば、`state.notify()`を呼び出してリターンする。
-- そうではなく、[`addressof`](/reference/memory/addressof.md)`(state)`が`state.sh_state-&amp;gt;waiting_state`に最初に追加されるアイテムならば、`state.sh_state-&amp;gt;start-op()`を評価する。
-
-
-## 説明専用エンティティ
-### クラステンプレート`local-state`
-
-```cpp
-namespace std::execution {
-  struct local-state-base {                // exposition only
-    virtual ~local-state-base() = default;
-    virtual void notify() noexcept = 0;    // exposition only
-  };
-
-  template&amp;lt;class Sndr, class Rcvr&amp;gt;
-  struct local-state : local-state-base {  // exposition only
-    using on-stop-callback =               // exposition only
-      stop_callback_for_t&amp;lt;stop_token_of_t&amp;lt;env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt;, on-stop-request&amp;gt;;
-
-    local-state(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept;
-    ~local-state();
-
-    void notify() noexcept override;
-
-  private:
-    optional&amp;lt;on-stop-callback&amp;gt; on_stop;    // exposition only
-    shared-state&amp;lt;Sndr&amp;gt;* sh_state;          // exposition only
-    Rcvr* rcvr;                            // exposition only
-  };
-}
-```
-* stop_callback_for_t[link /reference/stop_token/stop_callback_for_t.md]
-* stop_token_of_t[link ../stop_token_of_t.md]
-* env_of_t[link env_of_t.md]
-* on-stop-request[link on-stop-request.md]
-* optional[link /reference/optional/optional.md]
-
-```cpp
-local-state(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept;
-```
-
-- 効果 : 下記と等価。
-
-    ```cpp
-    auto&amp;amp; [_, data, _] = sndr;
-    this-&amp;gt;sh_state = data.sh_state.get();
-    this-&amp;gt;sh_state-&amp;gt;inc-ref();
-    this-&amp;gt;rcvr = addressof(rcvr);
-    ```
-
-```cpp
-~local-state();
-```
-
-- 効果 : 下記と等価。
-
-    ```cpp
-    sh_state-&amp;gt;dec-ref();
-    ```
-
-```cpp
-void notify() noexcept override;
-```
-
-- 効果 : 下記と等価。
-
-    ```cpp
-    on_stop.reset();
-    visit(
-      [this](const auto&amp;amp; tupl) noexcept -&amp;gt; void {
-        apply(
-          [this](auto tag, const auto&amp;amp;... args) noexcept -&amp;gt; void {
-            tag(std::move(*rcvr), args...);
-          },
-          tupl);
-      },
-      sh_state-&amp;gt;result);
-    ```
-    * reset()[link /reference/optional/optional/reset.md]
-    * visit[link /reference/variant/visit.md]
-    * apply[link /reference/tuple/apply.md]
-    * std::move[link /reference/utility/move.md]
-
-### クラステンプレート`split-receiver`
-
-```cpp
-namespace std::execution {
-  template&amp;lt;class Sndr&amp;gt;
-  struct split-receiver {  // exposition only
-    using receiver_concept = receiver_t;
-
-    template&amp;lt;class Tag, class... Args&amp;gt;
-    void complete(Tag, Args&amp;amp;&amp;amp;... args) noexcept {  // exposition only
-      using tuple_t = decayed-tuple&amp;lt;Tag, Args...&amp;gt;;
-      try {
-        sh_state-&amp;gt;result.template emplace&amp;lt;tuple_t&amp;gt;(Tag(), std::forward&amp;lt;Args&amp;gt;(args)...);
-      } catch (...) {
-        using tuple_t = tuple&amp;lt;set_error_t, exception_ptr&amp;gt;;
-        sh_state-&amp;gt;result.template emplace&amp;lt;tuple_t&amp;gt;(set_error, current_exception());
-      }
-      sh_state-&amp;gt;notify();
-    }
-
-    template&amp;lt;class... Args&amp;gt;
-    void set_value(Args&amp;amp;&amp;amp;... args) &amp;amp;&amp;amp; noexcept {
-      complete(execution::set_value, std::forward&amp;lt;Args&amp;gt;(args)...);
-    }
-
-    template&amp;lt;class Error&amp;gt;
-    void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept {
-      complete(execution::set_error, std::forward&amp;lt;Error&amp;gt;(err));
-    }
-
-    void set_stopped() &amp;amp;&amp;amp; noexcept {
-      complete(execution::set_stopped);
-    }
-
-    struct env {                     // exposition only
-      shared-state&amp;lt;Sndr&amp;gt;* sh-state;  // exposition only
-
-      inplace_stop_token query(get_stop_token_t) const noexcept {
-        return sh-state-&amp;gt;stop_src.get_token();
-      }
-    };
-
-    env get_env() const noexcept {
-      return env{sh_state};
-    }
-
-    shared-state&amp;lt;Sndr&amp;gt;* sh_state;    // exposition only
-  };
-}
-```
-* receiver_t[link receiver.md]
-* decayed-tuple[link decayed-tuple.md]
-* template emplace[link /reference/variant/variant/emplace.md]
-* set_error_t[link set_error.md]
-* exception_ptr[link /reference/exception/exception_ptr.md]
-* current_exception()[link /reference/exception/current_exception.md]
-* execution::set_value[link set_value.md]
-* execution::set_error[link set_error.md]
-* execution::set_stopped[link set_stopped.md]
-* inplace_stop_token[link /reference/stop_token/inplace_stop_token.md]
-* get_stop_token_t[link ../get_stop_token.md]
-* get_token()[link /reference/stop_token/inplace_stop_source/get_token.md]
-
-### クラステンプレート`shared-state`
-
-```cpp
-namespace std::execution {
-  template&amp;lt;class Sndr&amp;gt;
-  struct shared-state {
-    using variant-type = see below;     // exposition only
-    using state-list-type = see below;  // exposition only
-
-    explicit shared-state(Sndr&amp;amp;&amp;amp; sndr);
-
-    void start-op() noexcept;           // exposition only
-    void notify() noexcept;             // exposition only
-    void inc-ref() noexcept;            // exposition only
-    void dec-ref() noexcept;            // exposition only
-
-    inplace_stop_source stop_src{};     // exposition only
-    variant-type result{};              // exposition only
-    state-list-type waiting_states;     // exposition only
-    atomic&amp;lt;bool&amp;gt; completed{false};      // exposition only
-    atomic&amp;lt;size_t&amp;gt; ref_count{1};        // exposition only
-    connect_result_t&amp;lt;Sndr, split-receiver&amp;lt;Sndr&amp;gt;&amp;gt; op_state;  // exposition only
-  };
-}
-```
-* inplace_stop_source[link /reference/stop_token/inplace_stop_source.md]
-* atomic[link /reference/atomic/atomic.md]
-* connect_result_t[link connect_result_t.md]
-
-- 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータと定義する。説明用の型`Tag`とパック`Args`に対して、説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Tag, Args...&amp;gt;`と定義する。型`variant-type`は下記定義において重複削除した型となる。
-
-    ```cpp
-    variant&amp;lt;tuple&amp;lt;set_stopped_t&amp;gt;, tuple&amp;lt;set_error_t, exception_ptr&amp;gt;, as-tuple&amp;lt;Sigs&amp;gt;...&amp;gt;
-    ```
-    * variant[link /reference/variant/variant.md]
-    * set_stopped_t[link set_stopped.md]
-    * set_error_t[link set_error.md]
-    * exception_ptr[link /reference/exception/exception_ptr.md]
-
-- 型`state-list-type`を、`local-state-base`オブジェクトへのポインタのリストを格納し、アトミックに要素挿入できる型とする。
-
-```cpp
-explicit shared-state(Sndr&amp;amp;&amp;amp; sndr);
-```
-
-- 効果 : `op_state`を[`connect`](connect.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Sndr&amp;gt;(sndr), split-receiver{this})`の結果で初期化する。
-- 事後条件 : `waiting_states`が空、かつ`completed == false`
-
-```cpp
-void start-op() noexcept;
-```
-
-- 効果 : `inc-ref()`を評価する。`stop_src.`[`stop_requested()`](/reference/stop_token/inplace_stop_source/stop_requested.md) `== true`のとき`notify()`を評価する。そうでなければ、[`start`](start.md)`(op_state)`を評価する。
-
-```cpp
-void notify() noexcept;
-```
-
-- 効果 : 下記をアトミックに行い、ローカル変数`prior_states`の各ポインタ`p`に対して`p-&amp;gt;notify()`を評価し、最後に`dec-ref()`を評価する。
-    - `completed`に`true`を設定し、
-    - `waiting_states`を空のリストと交換し、古い値をローカル変数`prior_states`に格納する。
-
-```cpp
-void inc-ref() noexcept;
-```
-
-- 効果 : `ref_count`をインクリメントする。
-
-```cpp
-void dec-ref() noexcept;
-```
-
-- 効果 : `ref_count`をデクリメントする。`ref_count`の新たな値が`0`のとき、`delete this`を呼び出す。
-- 同期操作 : `dec-ref()`の評価が`ref_count`を値`0`にデクリメントしないとき、`ref_count`を値`0`へデクリメントする`dec-ref()`の評価に対して同期する。
-
-
-## カスタマイゼーションポイント
-Senderアルゴリズム構築時に、[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
-[デフォルト実行ドメイン](default_domain.md)では`split.transform_sender(sndr)`が呼ばれ、前述仕様通りのSenderへと変換される。
-
-
-## 例
-```cpp example
-#include &amp;lt;print&amp;gt;
-#include &amp;lt;execution&amp;gt;
-namespace ex = std::execution;
-
-int main()
-{
-  { // 関数呼び出し
-    ex::sender auto snd0 = ex::just(21);
-    ex::sender auto snd1 = ex::then(snd0, [](int n) {
-        std::println(&amp;#34;then&amp;#34;);
-        return 2 * n;
-      });
-    ex::sender auto sndr = ex::split(snd1);
-
-    auto [val1] = std::this_thread::sync_wait(sndr).value();
-    std::println(&amp;#34;{}&amp;#34;, val1);
-    auto [val2] = std::this_thread::sync_wait(sndr).value();
-    std::println(&amp;#34;{}&amp;#34;, val2);
-  }
-
-  { // パイプライン記法
-    ex::sender auto sndr =
-      ex::just(21)
-      | ex::then([](int n) {
-          std::println(&amp;#34;then&amp;#34;);
-          return 2 * n;
-        })
-      | ex::split();
-
-    auto [val1] = std::this_thread::sync_wait(sndr).value();
-    std::println(&amp;#34;{}&amp;#34;, val1);
-    auto [val2] = std::this_thread::sync_wait(sndr).value();
-    std::println(&amp;#34;{}&amp;#34;, val2);
-  }
-}
-```
-* ex::split[color ff0000]
-* ex::sender[link sender.md]
-* ex::just[link just.md]
-* ex::then[link then.md]
-* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
-* value()[link /reference/optional/optional/value.md]
-
-### 出力
-```
-then
-42
-42
-then
-42
-42
-```
-
-
-## バージョン
-### 言語
-- C++26
-
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
-
-
-## 参照
-- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
-- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upon_stopped -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/upon_stopped.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/execution/execution/upon_stopped.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/upon_stopped.md b/reference/execution/execution/upon_stopped.md
index dc0698ae6..6e2a712f0 100644
--- a/reference/execution/execution/upon_stopped.md
+++ b/reference/execution/execution/upon_stopped.md
@@ -31,7 +31,7 @@ transform_sender(get-domain-early(sndr), make-sender(upon_stopped, f, sndr))
 * make-sender[link make-sender.md]
 
 
-### Senderアルゴリズムタグ `upon_error`
+### Senderアルゴリズムタグ `upon_stopped`
 Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>spanstream -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;spanstream&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;spanstream&amp;gt;&lt;/code&gt;ヘッダでは、&lt;code&gt;&lt;a href=&#34;span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt; を出力先・入力元として使用するストリームクラスを定義する。&lt;/p&gt;
&lt;p&gt;固定長バッファを使うことができるストリームとして、古くから &lt;code&gt;std::strstream&lt;/code&gt; があるが、&lt;code&gt;std::strstream&lt;/code&gt; は非推奨のライブラリであった。
C++20 で &lt;code&gt;&lt;a href=&#34;span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt; が導入されたことに伴い、&lt;code&gt;&lt;a href=&#34;span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt; を使用した固定長バッファストリームクラスが新たに追加された。
（これにより、&lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt; ライブラリはC++26で削除された。）&lt;/p&gt;
&lt;h2&gt;ストリームバッファ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanbuf.html&#34;&gt;basic_spanbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定長ストリームバッファ(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanbuf.html&#34;&gt;spanbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;版の固定長ストリームバッファ(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanbuf.html&#34;&gt;wspanbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;版の固定長ストリームバッファ(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;入力ストリーム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ispanstream.html&#34;&gt;basic_ispanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定長バッファ入力ストリーム(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ispanstream.html&#34;&gt;ispanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;版の固定長バッファ入力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ispanstream.html&#34;&gt;wispanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;版の固定長バッファ入力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;出力ストリーム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ospanstream.html&#34;&gt;basic_ospanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定長バッファ出力ストリーム(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ospanstream.html&#34;&gt;ospanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;版の固定長バッファ出力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_ospanstream.html&#34;&gt;wospanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;版の固定長バッファ出力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;入出力ストリーム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanstream.html&#34;&gt;basic_spanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定長バッファ入出力ストリーム(class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanstream.html&#34;&gt;spanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;版の固定長バッファ入出力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;spanstream/basic_spanstream.html&#34;&gt;wspanstream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;版の固定長バッファ入出力ストリーム(type-alias)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0448r4.pdf&#34; target=&#34;_blank&#34;&gt;P0448R4 A strstream replacement using span&amp;lt;charT&amp;gt; as buffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ispanstream -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream.md b/reference/spanstream/basic_ispanstream.md
new file mode 100644
index 000000000..c16e727f1
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream.md
@@ -0,0 +1,92 @@
+# basic_ispanstream
+* spanstream[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class CharT,
+            class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
+  class basic_ispanstream : public basic_istream&amp;lt;CharT, Traits&amp;gt;;
+
+  using ispanstream  = basic_ispanstream&amp;lt;char&amp;gt;;
+  using wispanstream = basic_ispanstream&amp;lt;wchar_t&amp;gt;;
+}
+```
+* char_traits[link /reference/string/char_traits.md]
+* basic_istream[link /reference/istream/basic_istream.md]
+
+## 概要
+`std::basic_ospanstream`クラスは、[`std::span`](/reference/span/span.md) を使用した固定長ストリームバッファを入力元とする入力ストリームである。
+
+
+## メンバ関数
+
+| 名前                                | 説明                                       | 対応バージョン |
+|-------------------------------------|--------------------------------------------|----------------|
+| [`(constructor)`](basic_ispanstream/op_constructor.md) | コンストラクタ                             | C++23 |
+| [`operator=`](basic_ispanstream/op_assign.md)         | ムーブ代入                                 | C++23 |
+| [`swap`](basic_ispanstream/swap.md)                   | 値の交換                                   | C++23 |
+| [`rdbuf`](basic_ispanstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | C++23 |
+| [`span`](basic_ispanstream/span.md)                   | [`std::span`](/reference/span/span.md)オブジェクトの設定・取得 | C++23 |
+
+
+## 非メンバ関数
+
+| 名前   | 説明                          | 対応バージョン |
+|--------|-------------------------------|----------------|
+| [`swap`](basic_ispanstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++11 |
+
+
+## メンバ型
+
+| 名前             | 説明                          | 対応バージョン |
+|------------------|-------------------------------|----------------|
+| `char_type`      | テンプレート仮引数`CharT`     | C++23 |
+| `int_type`       | `Traits::int_type`            | C++23 |
+| `pos_type`       | `Traits::pos_type`            | C++23 |
+| `off_type`       | `Traits::off_type`            | C++23 |
+| `traits_type`    | テンプレート仮引数`Traits`    | C++23 |
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char abc[3] = {&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;};
+  std::span&amp;lt;char&amp;gt; span{abc};
+  std::ispanstream iss(span);
+
+  char c;
+  while (iss &amp;gt;&amp;gt; c) {
+    std::cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ispanstream[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+
+### 出力
+```
+A B C 
+
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0448R4 A strstream replacement using span&amp;amp;lt;charT&amp;amp;gt; as buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0448r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/op_assign.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/op_assign.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/op_assign.md b/reference/spanstream/basic_ispanstream/op_assign.md
new file mode 100644
index 000000000..5e6b60ced
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/op_assign.md
@@ -0,0 +1,60 @@
+# operator=
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ispanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_ispanstream&amp;amp; operator=(basic_ispanstream&amp;amp;&amp;amp; rhs);
+basic_ispanstream&amp;amp; operator=(const basic_ispanstream&amp;amp;) = delete;
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+`basic_istream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;&amp;#34;;
+  std::ispanstream iss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ispanstream iss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // ムーブ代入
+  iss2 = std::move(iss1);
+  
+  std::cout &amp;lt;&amp;lt; iss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ispanstream[link /reference/spanstream/basic_ispanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::move[link /reference/utility/move.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/op_constructor.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/op_constructor.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/op_constructor.md b/reference/spanstream/basic_ispanstream/op_constructor.md
new file mode 100644
index 000000000..2584a9c6d
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/op_constructor.md
@@ -0,0 +1,82 @@
+# コンストラクタ
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ispanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+explicit basic_ispanstream(std::span&amp;lt;charT&amp;gt; s,
+  ios_base::openmode which = ios_base::in);           // (1)
+
+basic_ispanstream(const basic_ispanstream&amp;amp;) = delete; // (2)
+
+basic_ispanstream(basic_ispanstream&amp;amp;&amp;amp; rhs);           // (3)
+
+template&amp;lt;class ROS&amp;gt;
+explicit basic_ispanstream(ROS&amp;amp;&amp;amp; s);                  // (4)
+```
+* ios_base[link /reference/ios/ios_base.md]
+* std::span[link /reference/span/span.md]
+
+## 概要
+`basic_ispanstream`オブジェクトを構築する。
+
+- (1) : 入力データとして[`std::span`](/reference/span/span.md)オブジェクト、およびモードを指定して構築する
+- (2) : （削除）
+- (3) : ムーブコンストラクタ
+- (4) : `s` から [`std::span`](/reference/span/span.md) 型の固定長バッファを作成し、構築する
+
+
+## テンプレートパラメータ制約
+- (4) : `ROS` が [`ranges::borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std::span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std::span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
+
+## 効果
+- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_istream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base::in)` で初期化する
+- (2) : （削除）
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_istream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+- (4) : `std::span&amp;lt;const charT&amp;gt;(std::forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`basic_ispanstream(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;hello&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span{buf};
+  
+  // (1) std::spanから構築
+  std::ispanstream iss1{span};
+
+  std::cout &amp;lt;&amp;lt; iss1.span().data() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) ムーブ構築
+  std::ispanstream iss3{std::move(iss1)};
+
+  std::cout &amp;lt;&amp;lt; iss3.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+hello
+hello
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/rdbuf.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/rdbuf.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/rdbuf.md b/reference/spanstream/basic_ispanstream/rdbuf.md
new file mode 100644
index 000000000..3c1640fa6
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/rdbuf.md
@@ -0,0 +1,60 @@
+# rdbuf
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ispanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanbuf&amp;lt;charT, traits&amp;gt;* rdbuf() const noexcept;
+```
+* basic_spanbuf[link /reference/spanstream/basic_spanbuf.md]
+
+## 概要
+固定長ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_spanbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;test&amp;#34;;
+  std::ispanstream iss{std::span&amp;lt;char&amp;gt;{buf}};
+  
+  std::spanbuf* rd = iss.rdbuf();
+  
+  // バッファから文字を読み取り
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(rd-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(rd-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(rd-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(rd-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl;
+}
+```
+* rdbuf()[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
+
+### 出力
+```
+t
+e
+s
+t
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/span.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/span.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/span.md b/reference/spanstream/basic_ispanstream/span.md
new file mode 100644
index 000000000..fb8fc9eca
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/span.md
@@ -0,0 +1,104 @@
+# span
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ispanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+std::span&amp;lt;const charT&amp;gt; span() const noexcept; // (1)
+
+void span(std::span&amp;lt;charT&amp;gt; s) noexcept;       // (2)
+
+template&amp;lt;class ROS&amp;gt;
+void span(ROS&amp;amp;&amp;amp; s) noexcept;                  // (3)
+```
+* std::span[link /reference/span/span.md]
+
+## 概要
+固定長バッファの取得または設定をする。
+- (1) : [`std::span`](/reference/span/span.md) 型の固定長バッファを取得する
+- (2) : [`std::span`](/reference/span/span.md) 型の固定長バッファ `s` を設定する
+- (3) : `s` から [`std::span`](/reference/span/span.md) 型の固定長バッファを作成し、それを設定する
+
+
+## テンプレートパラメータ制約
+- (3) : `ROS` が [`ranges::borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std::span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std::span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
+
+
+## 効果
+- (1) : `return rdbuf()-&amp;gt;span();` と同等
+- (2) : `rdbuf()-&amp;gt;span(s)` と同等
+- (3) : `std::span&amp;lt;const charT&amp;gt;(std::forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`this-&amp;gt;span(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
+
+## 例
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;default&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span1{buf1};
+  std::ispanstream iss{span1};
+
+  // (1)
+  std::span&amp;lt;const char&amp;gt; read = iss.span();
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; read.data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  char buf2[32] = &amp;#34;overwritten&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span2{buf2};
+
+  // (2)
+  iss.span(span2);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; iss.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  std::array&amp;lt;char, 5&amp;gt; buf3 = {&amp;#39;l&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;\0&amp;#39;};
+
+  // (3)
+  iss.span(buf3);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(3)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; iss.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* iss.span();[color ff0000]
+* iss.span(span2);[color ff0000]
+* iss.span(buf3);[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::span&amp;lt;const char&amp;gt;[link /reference/span/span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+(1)
+default
+
+(2)
+overwritten
+
+(3)
+last
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`basic_spanbuf::span`](../basic_spanbuf/span.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/swap.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/swap.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/swap.md b/reference/spanstream/basic_ispanstream/swap.md
new file mode 100644
index 000000000..7711f0529
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/swap.md
@@ -0,0 +1,59 @@
+# swap
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ispanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_ispanstream&amp;amp; rhs);
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_istream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::ispanstream iss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ispanstream iss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  iss1.swap(iss2);
+  
+  std::cout &amp;lt;&amp;lt; iss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; iss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* iss1.swap(iss2);[color ff0000]
+* std::ispanstream[link /reference/spanstream/basic_ispanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/swap_free.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ispanstream/swap_free.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/swap_free.md b/reference/spanstream/basic_ispanstream/swap_free.md
new file mode 100644
index 000000000..d13bce567
--- /dev/null
+++ b/reference/spanstream/basic_ispanstream/swap_free.md
@@ -0,0 +1,61 @@
+# swap (非メンバ関数)
+* spanstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits&amp;gt;
+  void swap(basic_ispanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; x,
+            basic_ispanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_ispanstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::ispanstream iss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ispanstream iss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  std::swap(iss1, iss2);
+  
+  std::cout &amp;lt;&amp;lt; iss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; iss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::swap(iss1, iss2);[color ff0000]
+* std::ispanstream[link /reference/spanstream/basic_ispanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ospanstream -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream.md b/reference/spanstream/basic_ospanstream.md
new file mode 100644
index 000000000..542da7cb6
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream.md
@@ -0,0 +1,94 @@
+# basic_ospanstream
+* spanstream[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class CharT,
+            class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
+  class basic_ospanstream : public basic_ostream&amp;lt;CharT, Traits&amp;gt;;
+
+  using ospanstream  = basic_ospanstream&amp;lt;char&amp;gt;;
+  using wospanstream = basic_ospanstream&amp;lt;wchar_t&amp;gt;;
+}
+```
+* char_traits[link /reference/string/char_traits.md]
+* basic_ostream[link /reference/ostream/basic_ostream.md]
+
+## 概要
+`std::basic_ospanstream`クラスは、[`std::span`](/reference/span/span.md) を使用した固定長ストリームバッファを出力先とする出力ストリームである。
+
+
+## メンバ関数
+
+| 名前                                | 説明                                       | 対応バージョン |
+|-------------------------------------|--------------------------------------------|----------------|
+| [`(constructor)`](basic_ospanstream/op_constructor.md) | コンストラクタ                             | C++23 |
+| [`operator=`](basic_ospanstream/op_assign.md)         | ムーブ代入                                 | C++23 |
+| [`swap`](basic_ospanstream/swap.md)                   | 値の交換                                   | C++23 |
+| [`rdbuf`](basic_ospanstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | C++23 |
+| [`span`](basic_ospanstream/span.md)                   | [`std::span`](/reference/span/span.md)オブジェクトの設定・取得 | C++23 |
+
+
+## 非メンバ関数
+
+| 名前   | 説明                          | 対応バージョン |
+|--------|-------------------------------|----------------|
+| [`swap`](basic_ospanstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++23 |
+
+
+## メンバ型
+
+| 名前             | 説明                          | 対応バージョン |
+|------------------|-------------------------------|----------------|
+| `char_type`      | テンプレート仮引数`CharT`     | C++23 |
+| `int_type`       | `Traits::int_type`            | C++23 |
+| `pos_type`       | `Traits::pos_type`            | C++23 |
+| `off_type`       | `Traits::off_type`            | C++23 |
+| `traits_type`    | テンプレート仮引数`Traits`    | C++23 |
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[256] = {};
+  std::span&amp;lt;char&amp;gt; span{buf};
+  std::ospanstream oss(span);
+
+  // 数値や文字列を書き込む
+  oss &amp;lt;&amp;lt; &amp;#34;The answer is &amp;#34; &amp;lt;&amp;lt; 42 &amp;lt;&amp;lt; &amp;#34; and pi is approximately &amp;#34; &amp;lt;&amp;lt; 3.14;
+
+  // 先頭から文字列出力
+  const char* p = oss.span().data();
+  std::cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ospanstream[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link /reference/spanstream/basic_ospanstream/span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+The answer is 42 and pi is approximately 3.14
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0448R4 A strstream replacement using span&amp;amp;lt;charT&amp;amp;gt; as buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0448r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/op_assign.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/op_assign.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/op_assign.md b/reference/spanstream/basic_ospanstream/op_assign.md
new file mode 100644
index 000000000..ddc5e7167
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/op_assign.md
@@ -0,0 +1,60 @@
+# operator=
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ospanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_ospanstream&amp;amp; operator=(basic_ospanstream&amp;amp;&amp;amp; rhs);
+basic_ospanstream&amp;amp; operator=(const basic_ospanstream&amp;amp;) = delete;
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+`basic_ostream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;&amp;#34;;
+  std::ospanstream oss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ospanstream oss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // ムーブ代入
+  oss2 = std::move(oss1);
+  
+  std::cout &amp;lt;&amp;lt; oss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ospanstream[link /reference/spanstream/basic_ospanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::move[link /reference/utility/move.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/op_constructor.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/op_constructor.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/op_constructor.md b/reference/spanstream/basic_ospanstream/op_constructor.md
new file mode 100644
index 000000000..67fa6a2fc
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/op_constructor.md
@@ -0,0 +1,73 @@
+# コンストラクタ
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ospanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+explicit basic_ospanstream(std::span&amp;lt;charT&amp;gt; s,
+  ios_base::openmode which = ios_base::out);          // (1)
+
+basic_ospanstream(const basic_ospanstream&amp;amp;) = delete; // (2)
+
+basic_ospanstream(basic_ospanstream&amp;amp;&amp;amp; rhs);           // (3)
+```
+* ios_base[link /reference/ios/ios_base.md]
+* std::span[link /reference/span/span.md]
+
+## 概要
+`basic_ospanstream`オブジェクトを構築する。
+
+- (1) : 入力データとして[`std::span`](/reference/span/span.md)オブジェクト、およびモードを指定して構築する
+- (2) : （削除）コピーコンストラクタ
+- (3) : ムーブコンストラクタ
+
+## 効果
+- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_ostream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base::out)` で初期化する
+- (2) : （削除）
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;hello&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span{buf};
+  
+  // (1) std::spanから構築
+  std::ospanstream oss1{span};
+
+  std::cout &amp;lt;&amp;lt; oss1.span().data() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) ムーブ構築
+  std::ospanstream oss3{std::move(oss1)};
+
+  std::cout &amp;lt;&amp;lt; oss3.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+hello
+hello
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/rdbuf.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/rdbuf.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/rdbuf.md b/reference/spanstream/basic_ospanstream/rdbuf.md
new file mode 100644
index 000000000..d16546409
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/rdbuf.md
@@ -0,0 +1,62 @@
+# rdbuf
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ospanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanbuf&amp;lt;charT, traits&amp;gt;* rdbuf() const noexcept;
+```
+* basic_spanbuf[link /reference/spanstream/basic_spanbuf.md]
+
+## 概要
+固定長ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_spanbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;test&amp;#34;;
+  std::ospanstream oss{std::span&amp;lt;char&amp;gt;{buf}};
+  
+  std::spanbuf* rd = oss.rdbuf();
+
+  rd-&amp;gt;pubseekpos(4, std::ios_base::out);
+  rd-&amp;gt;sputc(&amp;#39;i&amp;#39;);
+  rd-&amp;gt;sputc(&amp;#39;n&amp;#39;);
+  rd-&amp;gt;sputc(&amp;#39;g&amp;#39;);
+
+  // バッファから文字を読み取り
+  std::cout &amp;lt;&amp;lt; oss.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* rdbuf()[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* pubseekpos[link /reference/streambuf/basic_streambuf/pubseekpos.md]
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+testing
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/span.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/span.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/span.md b/reference/spanstream/basic_ospanstream/span.md
new file mode 100644
index 000000000..56ec1ab78
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/span.md
@@ -0,0 +1,82 @@
+# span
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ospanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+std::span&amp;lt;charT&amp;gt; span() const noexcept; // (1)
+
+void span(std::span&amp;lt;charT&amp;gt; s) noexcept; // (2)
+```
+* std::span[link /reference/span/span.md]
+
+## 概要
+固定長バッファの取得または設定をする。
+- (1) : [`std::span`](/reference/span/span.md) 型の固定長バッファを取得する
+- (2) : [`std::span`](/reference/span/span.md) 型の固定長バッファ `s` を設定する
+
+
+## 効果
+- (1) : `return rdbuf()-&amp;gt;span();` と同等
+- (2) : `rdbuf()-&amp;gt;span(s)` と同等
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;default&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span1{buf1};
+  std::ospanstream oss{span1};
+
+  // (1)
+  std::span&amp;lt;char&amp;gt; read = oss.span();
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; read.data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  char buf2[32] = &amp;#34;overwritten&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span2{buf2};
+
+  // (2)
+  oss.span(span2);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; oss.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* oss.span();[color ff0000]
+* oss.span(span2);[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+(1)
+default
+
+(2)
+overwritten
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`basic_spanbuf::span`](../basic_spanbuf/span.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/swap.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/swap.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/swap.md b/reference/spanstream/basic_ospanstream/swap.md
new file mode 100644
index 000000000..f0c515075
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/swap.md
@@ -0,0 +1,59 @@
+# swap
+* spanstream[meta header]
+* std[meta namespace]
+* basic_ospanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_ospanstream&amp;amp; rhs);
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_ostream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::ospanstream oss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ospanstream oss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  oss1.swap(oss2);
+  
+  std::cout &amp;lt;&amp;lt; oss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; oss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* oss1.swap(oss2);[color ff0000]
+* std::ospanstream[link /reference/spanstream/basic_ospanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/swap_free.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_ospanstream/swap_free.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/swap_free.md b/reference/spanstream/basic_ospanstream/swap_free.md
new file mode 100644
index 000000000..84b886ec8
--- /dev/null
+++ b/reference/spanstream/basic_ospanstream/swap_free.md
@@ -0,0 +1,61 @@
+# swap (非メンバ関数)
+* spanstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits&amp;gt;
+  void swap(basic_ospanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; x,
+            basic_ospanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_ospanstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::ospanstream oss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::ospanstream oss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  std::swap(oss1, oss2);
+  
+  std::cout &amp;lt;&amp;lt; oss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; oss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::swap(oss1, oss2);[color ff0000]
+* std::ospanstream[link /reference/spanstream/basic_ospanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_spanbuf -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf.md b/reference/spanstream/basic_spanbuf.md
new file mode 100644
index 000000000..4d095c2ef
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf.md
@@ -0,0 +1,117 @@
+# basic_spanbuf
+* spanstream[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class CharT,
+            class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
+  class basic_spanbuf : public basic_streambuf&amp;lt;CharT, Traits&amp;gt;;
+
+  using spanbuf  = basic_spanbuf&amp;lt;char&amp;gt;;
+  using wspanbuf = basic_spanbuf&amp;lt;wchar_t&amp;gt;;
+}
+```
+* char_traits[link /reference/string/char_traits.md]
+* basic_streambuf[link /reference/streambuf/basic_streambuf.md]
+
+## 概要
+`std::basic_spanbuf`クラスは、[`std::span`](/reference/span/span.md) を使用した固定長ストリームバッファである。
+
+
+## メンバ関数
+
+| 名前                            | 説明                                       | 対応バージョン |
+|---------------------------------|--------------------------------------------|----------------|
+| [`(constructor)`](basic_spanbuf/op_constructor.md) | コンストラクタ                             | C++23 |
+| [`operator=`](basic_spanbuf/op_assign.md)         | ムーブ代入                                 | C++23 |
+| [`swap`](basic_spanbuf/swap.md)                   | 値の交換                                   | C++23 |
+| [`span`](basic_spanbuf/span.md)                   | [`std::span`](/reference/span/span.md)オブジェクトの設定・取得 | C++23 |
+
+
+## 非メンバ関数
+
+| 名前   | 説明                          | 対応バージョン |
+|--------|-------------------------------|----------------|
+| [`swap`](basic_spanbuf/swap_free.md) | 2つのオブジェクトを入れ替える | C++23 |
+
+
+## メンバ型
+
+| 名前             | 説明                          | 対応バージョン |
+|------------------|-------------------------------|----------------|
+| `char_type`      | テンプレート仮引数`CharT`     | C++23 |
+| `int_type`       | `Traits::int_type`            | C++23 |
+| `pos_type`       | `Traits::pos_type`            | C++23 |
+| `off_type`       | `Traits::off_type`            | C++23 |
+| `traits_type`    | テンプレート仮引数`Traits`    | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  // basic_spanbufはストリームの内部バッファとして動作する
+  char buf[256] = {};
+  std::span&amp;lt;char&amp;gt; span{buf};
+  std::spanbuf sb(span);
+
+  // 書き込み: sputc()で1文字ずつ書き込む
+  sb.sputc(&amp;#39;H&amp;#39;);
+  sb.sputc(&amp;#39;e&amp;#39;);
+  sb.sputc(&amp;#39;l&amp;#39;);
+  sb.sputc(&amp;#39;l&amp;#39;);
+  sb.sputc(&amp;#39;o&amp;#39;);
+
+  // 文字列として取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;Written: &amp;#34; &amp;lt;&amp;lt; sb.span().data() &amp;lt;&amp;lt; std::endl;
+
+  char buf2[256] = &amp;#34;World&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span2{buf2};
+
+  // 新しい文字列を設定
+  sb.span(span2);
+
+  // 読み取り: sbumpc()で1文字ずつ読み取る
+  std::cout &amp;lt;&amp;lt; &amp;#34;Read: &amp;#34;;
+  while (sb.in_avail() &amp;gt; 0) {
+    char c = sb.sbumpc();
+    std::cout &amp;lt;&amp;lt; c;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::spanbuf[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* span()[link /reference/spanstream/basic_spanbuf/span.md]
+* data()[link /reference/span/span/data.md]
+* span(span2)[link /reference/spanstream/basic_spanbuf/span.md]
+* sbumpc[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* in_avail[link /reference/streambuf/basic_streambuf/in_avail.md]
+
+### 出力
+```
+Written: Hello
+Read: World
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0448R4 A strstream replacement using span&amp;amp;lt;charT&amp;amp;gt; as buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0448r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/op_assign.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf/op_assign.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/op_assign.md b/reference/spanstream/basic_spanbuf/op_assign.md
new file mode 100644
index 000000000..107d3e648
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf/op_assign.md
@@ -0,0 +1,60 @@
+# operator=
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanbuf[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanbuf&amp;amp; operator=(basic_spanbuf&amp;amp;&amp;amp; rhs);
+basic_spanbuf&amp;amp; operator=(const basic_spanbuf&amp;amp;) = delete;
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+`basic_spanbuf tmp{std::move(rhs)};` として `tmp` を作成後、`this-&amp;gt;swap(tmp);` を実行するのと同等。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;&amp;#34;;
+  std::spanbuf sb1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanbuf sb2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // ムーブ代入
+  sb2 = std::move(sb1);
+  
+  std::cout &amp;lt;&amp;lt; sb2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::move[link /reference/utility/move.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/op_constructor.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf/op_constructor.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/op_constructor.md b/reference/spanstream/basic_spanbuf/op_constructor.md
new file mode 100644
index 000000000..506915cb3
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf/op_constructor.md
@@ -0,0 +1,113 @@
+# コンストラクタ
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanbuf[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanbuf() : basic_spanbuf(ios_base::in | ios_base::out) {} // (1)
+
+explicit basic_spanbuf(ios_base::openmode which)
+  : basic_spanbuf(std::span&amp;lt;charT&amp;gt;(), which) {}                  // (2)
+
+explicit basic_spanbuf(std::span&amp;lt;charT&amp;gt; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);      // (3)
+
+basic_spanbuf(const basic_spanbuf&amp;amp;) = delete;                    // (4)
+
+basic_spanbuf(basic_spanbuf&amp;amp;&amp;amp; rhs);                              // (5)
+```
+* ios_base[link /reference/ios/ios_base.md]
+* std::span[link /reference/span/span.md]
+
+## 概要
+`basic_spanbuf`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : 入力データとして[`std::span`](/reference/span/span.md)オブジェクトと、指定されたモードで構築する
+- (4) : （削除）コピーコンストラクタ
+- (5) : ムーブコンストラクタ
+
+
+## 効果
+- (1) : 内部のバッファを空にし、モードは`ios_base::in | ios_base::out`に設定する
+- (2) : 内部のバッファを空にし、モードは`which`に設定する
+- (3) : 内部のバッファを`s`に設定し、モードは`which`に設定する
+- (4) : （削除）
+- (5) : `rhs`から`basic_spanbuf`オブジェクトをムーブ構築する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  // (1)
+  std::spanbuf sb1{};
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  in_avail:&amp;#34; &amp;lt;&amp;lt; sb1.in_avail() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (3)
+  char buf[3] = {&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;};
+  std::span&amp;lt;char&amp;gt; span{buf};
+  std::spanbuf sb3{span};
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(3)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  in_avail:&amp;#34; &amp;lt;&amp;lt; sb3.in_avail() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [0]:&amp;#34; &amp;lt;&amp;lt; (char)sb3.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [1]:&amp;#34; &amp;lt;&amp;lt; (char)sb3.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [2]:&amp;#34; &amp;lt;&amp;lt; (char)sb3.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // (5)
+  sb3.pubseekpos(0);
+  std::spanbuf sb5{std::move(sb3)};
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  in_avail:&amp;#34; &amp;lt;&amp;lt; sb5.in_avail() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [0]:&amp;#34; &amp;lt;&amp;lt; (char)sb5.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [1]:&amp;#34; &amp;lt;&amp;lt; (char)sb5.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;  [2]:&amp;#34; &amp;lt;&amp;lt; (char)sb5.sbumpc() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* in_avail()[link /reference/streambuf/basic_streambuf/in_avail.md]
+* sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* pubseekpos[link /reference/streambuf/basic_streambuf/pubseekpos.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+(1)
+  in_avail:0
+
+(3)
+  in_avail:3
+  [0]:A
+  [1]:B
+  [2]:C
+
+(5)
+  in_avail:3
+  [0]:A
+  [1]:B
+  [2]:C
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/span.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf/span.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/span.md b/reference/spanstream/basic_spanbuf/span.md
new file mode 100644
index 000000000..703c724a7
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf/span.md
@@ -0,0 +1,76 @@
+# span
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanbuf[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+std::span&amp;lt;charT&amp;gt; span() const noexcept; // (1)
+
+void span(std::span&amp;lt;charT&amp;gt; s) noexcept; // (2)
+```
+* std::span[link /reference/span/span.md]
+
+## 概要
+固定長バッファの取得または設定をする。
+
+
+## 効果
+- (1) : [`std::span`](/reference/span/span.md) 型の固定長バッファを取得する
+- (2) : [`std::span`](/reference/span/span.md) 型の固定長バッファ `s` を設定する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;default&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span1{buf1};
+  std::spanbuf sb{span1};
+
+  // (1)
+  std::span&amp;lt;char&amp;gt; read = sb.span();
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; read.data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  char buf2[32] = &amp;#34;overwritten&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span2{buf2};
+
+  // (2)
+  sb.span(span2);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; sb.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sb.span();[color ff0000]
+* sb.span(span2);[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+(1)
+default
+
+(2)
+overwritten
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/swap.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf/swap.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/swap.md b/reference/spanstream/basic_spanbuf/swap.md
new file mode 100644
index 000000000..28b82b4dd
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf/swap.md
@@ -0,0 +1,58 @@
+# swap
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanbuf[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_spanbuf&amp;amp; rhs);
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_streambuf&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`mode`と内部の文字列バッファを`rhs`と交換する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::spanbuf sb1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanbuf sb2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  sb1.swap(sb2);
+  
+  std::cout &amp;lt;&amp;lt; sb1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; sb2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sb1.swap(sb2);[color ff0000]
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/swap_free.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanbuf/swap_free.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/swap_free.md b/reference/spanstream/basic_spanbuf/swap_free.md
new file mode 100644
index 000000000..b2a6dfe81
--- /dev/null
+++ b/reference/spanstream/basic_spanbuf/swap_free.md
@@ -0,0 +1,61 @@
+# swap (非メンバ関数)
+* spanstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits&amp;gt;
+  void swap(basic_spanbuf&amp;lt;CharT, Traits&amp;gt;&amp;amp; x,
+            basic_spanbuf&amp;lt;CharT, Traits&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_spanbuf`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::spanbuf sb1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanbuf sb2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  std::swap(sb1, sb2);
+  
+  std::cout &amp;lt;&amp;lt; sb1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; sb2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::swap(sb1, sb2);[color ff0000]
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_spanstream -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream.md b/reference/spanstream/basic_spanstream.md
new file mode 100644
index 000000000..745e17a61
--- /dev/null
+++ b/reference/spanstream/basic_spanstream.md
@@ -0,0 +1,115 @@
+# basic_spanstream
+* spanstream[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class CharT,
+            class Traits = char_traits&amp;lt;CharT&amp;gt; &amp;gt;
+  class basic_spanstream : public basic_iostream&amp;lt;CharT, Traits&amp;gt;;
+
+  using spanstream  = basic_spanstream&amp;lt;char&amp;gt;;
+  using wspanstream = basic_spanstream&amp;lt;wchar_t&amp;gt;;
+}
+```
+* char_traits[link /reference/string/char_traits.md]
+* basic_iostream[link /reference/istream/basic_iostream.md]
+
+## 概要
+`std::basic_spanstream`クラスは、[`std::span`](/reference/span/span.md) を使用した固定長ストリームバッファを出力先・入力元とするストリームであり、読み取りと書き込みの両方の操作ができる。
+
+
+## メンバ関数
+
+| 名前                                | 説明                                       | 対応バージョン |
+|-------------------------------------|--------------------------------------------|----------------|
+| [`(constructor)`](basic_spanstream/op_constructor.md) | コンストラクタ                             | C++23 |
+| [`operator=`](basic_spanstream/op_assign.md)         | ムーブ代入                                 | C++23 |
+| [`swap`](basic_spanstream/swap.md)                   | 値の交換                                   | C++23 |
+| [`rdbuf`](basic_spanstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | C++23 |
+| [`span`](basic_spanstream/span.md)                   | [`std::span`](/reference/span/span.md)オブジェクトの設定・取得 | C++23 |
+
+
+## 非メンバ関数
+
+| 名前   | 説明                          | 対応バージョン |
+|--------|-------------------------------|----------------|
+| [`swap`](basic_spanstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++23 |
+
+
+## メンバ型
+
+| 名前             | 説明                          | 対応バージョン |
+|------------------|-------------------------------|----------------|
+| `char_type`      | テンプレート仮引数`CharT`     | C++23 |
+| `int_type`       | `Traits::int_type`            | C++23 |
+| `pos_type`       | `Traits::pos_type`            | C++23 |
+| `off_type`       | `Traits::off_type`            | C++23 |
+| `traits_type`    | テンプレート仮引数`Traits`    | C++23 |
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // 読み取りと書き込みが可能なストリーム
+  char buf[256] = {};
+  std::span&amp;lt;char&amp;gt; span{buf};
+  std::spanstream ss(span);
+
+  // データを書き込む
+  ss &amp;lt;&amp;lt; &amp;#34;Hello &amp;#34; &amp;lt;&amp;lt; 123 &amp;lt;&amp;lt; &amp;#34; World &amp;#34; &amp;lt;&amp;lt; 45.67;
+
+  // 先頭から文字列出力
+  const char* p = ss.span().data();
+  std::cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; std::endl;
+
+  // 読み取り位置をリセット
+  ss.seekg(0);
+
+  std::string word1, word2;
+  int num1;
+  double num2;
+
+  // データを読み取る
+  ss &amp;gt;&amp;gt; word1 &amp;gt;&amp;gt; num1 &amp;gt;&amp;gt; word2 &amp;gt;&amp;gt; num2;
+
+  // データを出力
+  std::cout &amp;lt;&amp;lt; std::endl
+            &amp;lt;&amp;lt; &amp;#34;word1=\&amp;#34;&amp;#34; &amp;lt;&amp;lt; word1 
+            &amp;lt;&amp;lt; &amp;#34;\&amp;#34;, num1=&amp;#34; &amp;lt;&amp;lt; num1 
+            &amp;lt;&amp;lt; &amp;#34;, word2=\&amp;#34;&amp;#34; &amp;lt;&amp;lt; word2 
+            &amp;lt;&amp;lt; &amp;#34;\&amp;#34;, num2=&amp;#34; &amp;lt;&amp;lt; num2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::spanstream[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link /reference/spanstream/basic_spanstream/span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+Hello 123 World 45.67
+
+word1=Hello, num1=123, word3=World, num2=45.67
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0448R4 A strstream replacement using span&amp;amp;lt;charT&amp;amp;gt; as buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0448r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/op_assign.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/op_assign.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/op_assign.md b/reference/spanstream/basic_spanstream/op_assign.md
new file mode 100644
index 000000000..e701036e7
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/op_assign.md
@@ -0,0 +1,60 @@
+# operator=
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanstream&amp;amp; operator=(basic_spanstream&amp;amp;&amp;amp; rhs);
+basic_spanstream&amp;amp; operator=(const basic_spanstream&amp;amp;) = delete;
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+`basic_iostream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;&amp;#34;;
+  std::spanstream ss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanstream ss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // ムーブ代入
+  ss2 = std::move(ss1);
+  
+  std::cout &amp;lt;&amp;lt; ss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::spanstream[link /reference/spanstream/basic_spanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::move[link /reference/utility/move.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/op_constructor.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/op_constructor.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/op_constructor.md b/reference/spanstream/basic_spanstream/op_constructor.md
new file mode 100644
index 000000000..5d92317c0
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/op_constructor.md
@@ -0,0 +1,75 @@
+# コンストラクタ
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+explicit basic_spanstream(std::span&amp;lt;charT&amp;gt; s,
+  ios_base::openmode which = ios_base::out | ios_base::in); // (1)
+
+basic_spanstream(const basic_spanstream&amp;amp;) = delete;         // (2)
+
+basic_spanstream(basic_spanstream&amp;amp;&amp;amp; rhs);                   // (3)
+```
+* ios_base[link /reference/ios/ios_base.md]
+* std::span[link /reference/span/span.md]
+
+## 概要
+`basic_spanstream`オブジェクトを構築する。
+
+ここで、初期値としてデータは、既存のファイルを上書きモードで開くことに似ており、ストリームの初期位置が先頭のまま、ストリーム内容の文字列を設定するものである。
+
+- (1) : 初期データとして[`std::span&amp;lt;charT&amp;gt;`](/reference/span/span.md)オブジェクトの設定して構築する
+- (2) : （削除）コピーコンストラクタ
+- (3) : ムーブコンストラクタ
+
+## 効果
+- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_iostream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which)` で初期化する
+- (2) : （削除）
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;hello&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span{buf};
+  
+  // (1) std::spanから構築
+  std::spanstream ss1{span};
+
+  std::cout &amp;lt;&amp;lt; ss1.span().data() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) ムーブ構築
+  std::spanstream ss3{std::move(ss1)};
+
+  std::cout &amp;lt;&amp;lt; ss3.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+hello
+hello
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/rdbuf.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/rdbuf.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/rdbuf.md b/reference/spanstream/basic_spanstream/rdbuf.md
new file mode 100644
index 000000000..1f3d610da
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/rdbuf.md
@@ -0,0 +1,63 @@
+# rdbuf
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+basic_spanbuf&amp;lt;charT, traits&amp;gt;* rdbuf() const noexcept;
+```
+* basic_spanbuf[link /reference/spanstream/basic_spanbuf.md]
+
+## 概要
+固定長ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_spanbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf[32] = &amp;#34;test&amp;#34;;
+  std::spanstream ss{std::span&amp;lt;char&amp;gt;{buf}};
+  
+  std::spanbuf* rd = ss.rdbuf();
+  
+  // バッファから文字を読み取り
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(rd-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl; // &amp;#39;t&amp;#39;
+  
+  // バッファに文字を書き込み
+  rd-&amp;gt;sputc(&amp;#39;!&amp;#39;);
+  
+  std::cout &amp;lt;&amp;lt; ss.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* rdbuf()[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* std::spanbuf[link /reference/spanstream/basic_spanbuf.md]
+* sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+t
+est!
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/span.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/span.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/span.md b/reference/spanstream/basic_spanstream/span.md
new file mode 100644
index 000000000..20c696a29
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/span.md
@@ -0,0 +1,82 @@
+# span
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+std::span&amp;lt;charT&amp;gt; span() const noexcept; // (1)
+
+void span(std::span&amp;lt;charT&amp;gt; s) noexcept; // (2)
+```
+* std::span[link /reference/span/span.md]
+
+## 概要
+固定長バッファの取得または設定をする。
+- (1) : [`std::span`](/reference/span/span.md) 型の固定長バッファを取得する
+- (2) : [`std::span`](/reference/span/span.md) 型の固定長バッファ `s` を設定する
+
+
+## 効果
+- (1) : `return rdbuf()-&amp;gt;span();` と同等
+- (2) : `rdbuf()-&amp;gt;span(s)` と同等
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;default&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span1{buf1};
+  std::spanstream ss{span1};
+
+  // (1)
+  std::span&amp;lt;char&amp;gt; read = ss.span();
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; read.data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  char buf2[32] = &amp;#34;overwritten&amp;#34;;
+  std::span&amp;lt;char&amp;gt; span2{buf2};
+
+  // (2)
+  ss.span(span2);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* ss.span();[color ff0000]
+* ss.span(span2);[color ff0000]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+(1)
+default
+
+(2)
+overwritten
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`basic_spanbuf::span`](../basic_spanbuf/span.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/swap.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/swap.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/swap.md b/reference/spanstream/basic_spanstream/swap.md
new file mode 100644
index 000000000..aa253d58d
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/swap.md
@@ -0,0 +1,58 @@
+# swap
+* spanstream[meta header]
+* std[meta namespace]
+* basic_spanstream[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+void swap(basic_spanstream&amp;amp; rhs);
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_iostream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_spanbuf`オブジェクトである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::spanstream ss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanstream ss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  ss1.swap(ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* ss1.swap(ss2);[color ff0000]
+* std::spanstream[link /reference/spanstream/basic_spanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/swap_free.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/spanstream/basic_spanstream/swap_free.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/swap_free.md b/reference/spanstream/basic_spanstream/swap_free.md
new file mode 100644
index 000000000..7c262f44a
--- /dev/null
+++ b/reference/spanstream/basic_spanstream/swap_free.md
@@ -0,0 +1,61 @@
+# swap (非メンバ関数)
+* spanstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+template&amp;lt;class CharT, class Traits&amp;gt;
+void swap(basic_spanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; x,
+          basic_spanstream&amp;lt;CharT, Traits&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_spanstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;spanstream&amp;gt;
+
+int main()
+{
+  char buf1[32] = &amp;#34;first&amp;#34;;
+  char buf2[32] = &amp;#34;second&amp;#34;;
+  std::spanstream ss1{std::span&amp;lt;char&amp;gt;(buf1)};
+  std::spanstream ss2{std::span&amp;lt;char&amp;gt;(buf2)};
+  
+  // スワップ
+  std::swap(ss1, ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.span().data() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.span().data() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::swap(ss1, ss2);[color ff0000]
+* std::spanstream[link /reference/spanstream/basic_spanstream.md]
+* std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
+* span()[link span.md]
+* data()[link /reference/span/span/data.md]
+
+### 出力
+```
+second
+first
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/equal_range.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/unordered_set/unordered_multiset/equal_range.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/equal_range.md b/reference/unordered_set/unordered_multiset/equal_range.md
index 13003304c..cd8db748b 100644
--- a/reference/unordered_set/unordered_multiset/equal_range.md
+++ b/reference/unordered_set/unordered_multiset/equal_range.md
@@ -81,8 +81,8 @@ int main()
 * std::ostream[link /reference/ostream.md]
 * ums.begin()[link begin.md]
 * ums.end()[link end.md]
-* first[link /reference/utility/pair.md]
-* second[link /reference/utility/pair.md]
+* first[link /reference/utility/pair/first.md]
+* second[link /reference/utility/pair/second.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/equal_range.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/unordered_set/unordered_set/equal_range.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/equal_range.md b/reference/unordered_set/unordered_set/equal_range.md
index db10feaf5..1bf6251e6 100644
--- a/reference/unordered_set/unordered_set/equal_range.md
+++ b/reference/unordered_set/unordered_set/equal_range.md
@@ -83,8 +83,8 @@ int main()
 * std::ostream[link /reference/ostream.md]
 * us.begin()[link begin.md]
 * us.end()[link end.md]
-* first[link /reference/utility/pair.md]
-* second[link /reference/utility/pair.md]
+* first[link /reference/utility/pair/first.md]
+* second[link /reference/utility/pair/second.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index 12c17d1d9..598a102ee 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -203,8 +203,8 @@ int main()
 * c.begin()[link begin.md]
 * c.end()[link end.md]
 * us.begin()[link begin.md]
-* second[link /reference/utility/pair.md]
-* first[link /reference/utility/pair.md]
+* second[link /reference/utility/pair/second.md]
+* first[link /reference/utility/pair/first.md]
 * fl.cbegin()[link /reference/forward_list/forward_list/cbegin.md]
 * fl.cend()[link /reference/forward_list/forward_list/cend.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>valarray -- Merge branch &#39;master&#39; into sort_global_qualify</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray.html"/>
      <id>691f1a64502b66bc5d06777b204652a23a534ac2:reference/valarray/valarray.md</id>
      <updated>2025-08-12T11:07:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray.md b/reference/valarray/valarray.md
index 0a2ad864d..c73e7165b 100644
--- a/reference/valarray/valarray.md
+++ b/reference/valarray/valarray.md
@@ -289,4 +289,4 @@ slice + multiply : {1,4,3,8,5,12}
 ```
 
 ## 参照
-- [インテルの valarray の使用](https://www.xlsoft.com/jp/products/intel/compilers/ccw/12/ug/cref_cls/common/cppref_valarray_use.htm)
+- [インテルの valarray の使用](https://web.archive.org/web/20230203193903/https://www.xlsoft.com/jp/products/intel/compilers/ccw/12/ug/cref_cls/common/cppref_valarray_use.htm)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- ゼロ幅文字を削除し、禁止文字をチェック・削除するスクリプトを追加 #1487</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/op_constructor.html"/>
      <id>5b26921c6cdb44111453041e52c8c2998fb904fd:reference/spanstream/basic_ispanstream/op_constructor.md</id>
      <updated>2025-08-11T20:41:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/op_constructor.md b/reference/spanstream/basic_ispanstream/op_constructor.md
index 1a248ba1c..2584a9c6d 100644
--- a/reference/spanstream/basic_ispanstream/op_constructor.md
+++ b/reference/spanstream/basic_ispanstream/op_constructor.md
@@ -29,13 +29,13 @@ explicit basic_ispanstream(ROS&amp;amp;&amp;amp; s);                  // (4)
 
 
 ## テンプレートパラメータ制約
-- (4) : `ROS` が [`ranges​::​borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std​::​span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std​::​span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
+- (4) : `ROS` が [`ranges::borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std::span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std::span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
 
 ## 効果
-- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_istream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base​::​in)` で初期化する
+- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_istream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base::in)` で初期化する
 - (2) : （削除）
-- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std​::​move(rhs)` で構築し、さらに `sb` を `std​::​move(rhs.sb)` で初期化する。続いて、`basic_istream&amp;lt;charT, traits&amp;gt;​::​set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
-- (4) : `std​::​span&amp;lt;const charT&amp;gt;(std​::​forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`basic_ispanstream(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_istream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+- (4) : `std::span&amp;lt;const charT&amp;gt;(std::forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`basic_ispanstream(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- ゼロ幅文字を削除し、禁止文字をチェック・削除するスクリプトを追加 #1487</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ispanstream/span.html"/>
      <id>5b26921c6cdb44111453041e52c8c2998fb904fd:reference/spanstream/basic_ispanstream/span.md</id>
      <updated>2025-08-11T20:41:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ispanstream/span.md b/reference/spanstream/basic_ispanstream/span.md
index 117e3bcae..fb8fc9eca 100644
--- a/reference/spanstream/basic_ispanstream/span.md
+++ b/reference/spanstream/basic_ispanstream/span.md
@@ -23,13 +23,13 @@ void span(ROS&amp;amp;&amp;amp; s) noexcept;                  // (3)
 
 
 ## テンプレートパラメータ制約
-- (3) : `ROS` が [`ranges​::​borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std​::​span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std​::​span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
+- (3) : `ROS` が [`ranges::borrowed_range`](/reference/ranges/borrowed_range.md) の要求を満たすこと (`(!convertible_to&amp;lt;ROS, std::span&amp;lt;charT&amp;gt;&amp;gt;) &amp;amp;&amp;amp; convertible_to&amp;lt;ROS, std::span&amp;lt;const charT&amp;gt;&amp;gt;`が`true`であること)。
 
 
 ## 効果
 - (1) : `return rdbuf()-&amp;gt;span();` と同等
 - (2) : `rdbuf()-&amp;gt;span(s)` と同等
-- (3) : `std​::​span&amp;lt;const charT&amp;gt;(std​::​forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`this-&amp;gt;span(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
+- (3) : `std::span&amp;lt;const charT&amp;gt;(std::forward&amp;lt;ROS&amp;gt;(s))` を `sp` とした時、`this-&amp;gt;span(std::span&amp;lt;charT&amp;gt;(const_cast&amp;lt;charT*&amp;gt;(sp.data()), sp.size()))` と同等
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- ゼロ幅文字を削除し、禁止文字をチェック・削除するスクリプトを追加 #1487</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/op_constructor.html"/>
      <id>5b26921c6cdb44111453041e52c8c2998fb904fd:reference/spanstream/basic_ospanstream/op_constructor.md</id>
      <updated>2025-08-11T20:41:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/op_constructor.md b/reference/spanstream/basic_ospanstream/op_constructor.md
index 13d8a75a9..67fa6a2fc 100644
--- a/reference/spanstream/basic_ospanstream/op_constructor.md
+++ b/reference/spanstream/basic_ospanstream/op_constructor.md
@@ -24,9 +24,9 @@ basic_ospanstream(basic_ospanstream&amp;amp;&amp;amp; rhs);           // (3)
 - (3) : ムーブコンストラクタ
 
 ## 効果
-- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_ostream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base​::​out)` で初期化する
+- (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_ostream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which | ios_base::out)` で初期化する
 - (2) : （削除）
-- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std​::​move(rhs)` で構築し、さらに `sb` を `std​::​move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;​::​set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- ゼロ幅文字を削除し、禁止文字をチェック・削除するスクリプトを追加 #1487</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanstream/op_constructor.html"/>
      <id>5b26921c6cdb44111453041e52c8c2998fb904fd:reference/spanstream/basic_spanstream/op_constructor.md</id>
      <updated>2025-08-11T20:41:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanstream/op_constructor.md b/reference/spanstream/basic_spanstream/op_constructor.md
index e6240377b..5d92317c0 100644
--- a/reference/spanstream/basic_spanstream/op_constructor.md
+++ b/reference/spanstream/basic_spanstream/op_constructor.md
@@ -28,7 +28,7 @@ basic_spanstream(basic_spanstream&amp;amp;&amp;amp; rhs);                   // (3)
 ## 効果
 - (1) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `basic_iostream&amp;lt;charT, traits&amp;gt;(addressof(sb))` で構築し、さらに `sb` を `basic_spanbuf&amp;lt;charT, traits&amp;gt;(s, which)` で初期化する
 - (2) : （削除）
-- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std​::​move(rhs)` で構築し、さらに `sb` を `std​::​move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;​::​set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
+- (3) : 内部で保持している [`basic_spanbuf&amp;lt;charT, traits&amp;gt;`](/reference/spanstream/basic_spanbuf.md) 型の固定長バッファを `sb` とすると、ベースクラスを `std::move(rhs)` で構築し、さらに `sb` を `std::move(rhs.sb)` で初期化する。続いて、`basic_ostream&amp;lt;charT, traits&amp;gt;::set_rdbuf(addressof(sb))` を呼び、[`basic_spanbuf`](/reference/spanstream/basic_spanbuf.md) を設定する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- fix wrong link regarding &lt;spanstream&gt; (#1051)</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_ospanstream/swap_free.html"/>
      <id>9402b83e34605fac386727aa0220390147b03ab5:reference/spanstream/basic_ospanstream/swap_free.md</id>
      <updated>2025-08-11T15:46:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_ospanstream/swap_free.md b/reference/spanstream/basic_ospanstream/swap_free.md
index 70031da31..84b886ec8 100644
--- a/reference/spanstream/basic_ospanstream/swap_free.md
+++ b/reference/spanstream/basic_ospanstream/swap_free.md
@@ -38,8 +38,8 @@ int main()
   std::cout &amp;lt;&amp;lt; oss2.span().data() &amp;lt;&amp;lt; std::endl;
 }
 ```
-* std::swap(ioss1, oss2);[color ff0000]
-* std::ispanstream[link /reference/spanstream/basic_ospanstream.md]
+* std::swap(oss1, oss2);[color ff0000]
+* std::ospanstream[link /reference/spanstream/basic_ospanstream.md]
 * std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
 * span()[link span.md]
 * data()[link /reference/span/span/data.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix wrong link regarding &lt;spanstream&gt; (#1051)</title>
      <link href="https://cpprefjp.github.io/reference/spanstream/basic_spanbuf/op_constructor.html"/>
      <id>9402b83e34605fac386727aa0220390147b03ab5:reference/spanstream/basic_spanbuf/op_constructor.md</id>
      <updated>2025-08-11T15:46:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/spanstream/basic_spanbuf/op_constructor.md b/reference/spanstream/basic_spanbuf/op_constructor.md
index 91c7eb40a..506915cb3 100644
--- a/reference/spanstream/basic_spanbuf/op_constructor.md
+++ b/reference/spanstream/basic_spanbuf/op_constructor.md
@@ -81,7 +81,7 @@ int main()
 * std::span&amp;lt;char&amp;gt;[link /reference/span/span.md]
 * in_avail()[link /reference/streambuf/basic_streambuf/in_avail.md]
 * sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
-* pubseekpos()[link /reference/streambuf/basic_streambuf/pubseekpos.md]
+* pubseekpos[link /reference/streambuf/basic_streambuf/pubseekpos.md]
 * std::move[link /reference/utility/move.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>