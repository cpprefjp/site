<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-09-05T12:36:11.577046</updated>
  <id>8971e0e8-f11b-40b2-b0ed-56f1492539b7</id>

  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:index.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;HTMLデータのダウンロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/cpprefjp.github.io/archive/refs/heads/master.zip&#34; target=&#34;_blank&#34;&gt;cpprefjp.github.io-master.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルで閲覧できるHTMLを用意しています。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に1年間、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone様&#34; src=&#34;static/image/sponsors/cocotone/cocotone.png&#34; title=&#34;cocotone様&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft様&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; title=&#34;CubeSoft様&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software様&#34; src=&#34;static/image/sponsors/Acerola/as_logo.png&#34; title=&#34;Acerola Software様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars様&#34; src=&#34;static/image/sponsors/Fixstars/fixstars-logo.png&#34; title=&#34;Fixstars様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys様&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; title=&#34;pegasys様&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid様&#34; src=&#34;static/image/sponsors/vaporoid/cpprefjp-400x150.png&#34; title=&#34;vaporoid様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana様&#34; src=&#34;static/image/sponsors/m_kohana/m_kohana.jpg&#34; title=&#34;M.Kohana様&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.techarts.co.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;有限会社テクニカルアーツ様&#34; src=&#34;static/image/sponsors/technical_arts/TechnicalArtsLogo3.png&#34; title=&#34;有限会社テクニカルアーツ様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;T.Kishu様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;Azaika様&#34; src=&#34;static/image/sponsors/Azaika/Azaika.jpg&#34; title=&#34;Azaika様&#34; width=&#34;256&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;イシハラユウヤ様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami様&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; title=&#34;minachun / J.Minami様&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://gravatar.com/overthestardust&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;星くず彼方に&#34; src=&#34;static/image/sponsors/overthestardust/overthestardust.png&#34; title=&#34;星くず彼方に&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/zonuexe&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;USAMI Kenta&#34; src=&#34;https://gravatar.com/userimage/33138763/7af48baae61cde116bd8d28a5158946e.jpeg?size=256&#34; title=&#34;USAMI Kenta&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/soramimi&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;soramimi&#34; src=&#34;https://www.soramimi.jp/avater.jpg&#34; title=&#34;soramimi&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;Agate Pris様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://x.com/HappyLuckyAkira&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Akira Kubo様&#34; src=&#34;static/image/sponsors/HappyLuckyAkira/HappyLuckyAkira.jpg&#34; title=&#34;Akira Kubo様&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://profile.bocchi-master.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;ぼっちマスター様&#34; src=&#34;static/image/sponsors/bocchi-master/my-icon.png&#34; title=&#34;ぼっちマスター様&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;甲斐智丈&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 4.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++11 -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp11.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp11.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++11&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11とは、2011年8月に改訂され、ISO/IEC 14882:2011で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++03からメジャーバージョンアップされ、多くの有用な機能が追加された。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++0xと呼ばれていた。これは、2009年中までに策定を完了させることを目指して、下一桁を伏せ字にしたものである。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;一般的な機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/auto.html&#34;&gt;変数の型推論のための&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの呼び出しを、波カッコで行う。&lt;code&gt;T x {a, b, c};&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式か&lt;code&gt;bool&lt;/code&gt;値を返す演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default&lt;/code&gt;／&lt;code&gt;delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を委譲する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーライドの禁止を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス以外の型に関する機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型の導入と、それにともなって従来の列挙型を機能拡張&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/unrestricted_unions.html&#34;&gt;共用体でクラスオブジェクトをもつことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持てるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/right_angle_brackets.html&#34;&gt;テンプレートでの連続した右山カッコを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化を抑止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/remove_export_templates.html&#34;&gt;テンプレートのエクスポート機能を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレート定義をエクスポートする機能を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;並行関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;その他様々なユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値の型を後ろに書けるようにすることで、パラメータオブジェクトを戻り値型の文脈で使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメントを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメントを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;p&gt;ここでは、コア言語作業グループへ問題報告され、その解決策として導入された言語仕様の変更を解説する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/feature_test_macros.html&#34;&gt;機能テストマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 の機能がサポートされているかどうかをテストするためのマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/recursive_template_limit.html&#34;&gt;テンプレート再帰回数の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;17回から1024回に制限緩和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/dependent_name_specifier_outside_of_templates.html&#34;&gt;依存名に対する&lt;code&gt;typename&lt;/code&gt;と&lt;code&gt;template&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレート外でも&lt;code&gt;typename&lt;/code&gt;と&lt;code&gt;template&lt;/code&gt;を付けられるようになった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/global_scope_syntax_in_nested_name_specifier.html&#34;&gt;入れ子名の指定にグローバルスコープ&lt;code&gt;::&lt;/code&gt;を付加することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;struct ::A {};&lt;/code&gt;のように入れ子名を指定する際にグローバルスコープから指定できるようになった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/earlier_declarated_array_bounds.html&#34;&gt;宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static&lt;/code&gt;メンバや&lt;code&gt;extern&lt;/code&gt;として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/reserved_namespaces_for_posix.html&#34;&gt;POSIX用の名前空間を予約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将来の標準化のためにPOSIX用の名前空間を予約し、ユーザーがその名前空間で機能を定義することを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html&#34;&gt;&lt;code&gt;sizeof&lt;/code&gt;演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizeof(T::data_member)&lt;/code&gt;のように指定して非静的メンバのサイズを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/deprecation_of_the_register_keyword.html&#34;&gt;&lt;code&gt;register&lt;/code&gt;キーワードを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイラに使われなくなった最適化用の機能を非推奨化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/reference_collapsing.html&#34;&gt;参照への参照を折りたたむ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;型に参照を足しても&lt;code&gt;T&amp;amp;&lt;/code&gt;となる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;C99互換機能&lt;/h3&gt;
&lt;p&gt;C99は、1999年に改訂され、ISO/IEC 9899:1999で標準規格化されたC言語バージョンの通称である。&lt;/p&gt;
&lt;p&gt;C++11では、参照するC言語の規格がC89からC99に変更となり、C99の言語機能が一部、C++に導入された。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マクロで任意の数の引数を受け取る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;処理系定義の機能を使用する単項演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/c99_predefined_macros.html&#34;&gt;定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C99互換で導入された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/string_literal_concatenation.html&#34;&gt;文字列リテラルとワイド文字列リテラルの結合&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列定数として結合する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/func.html&#34;&gt;事前定義識別子&lt;code&gt;__func__&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在いる関数名が格納されている識別子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/trailing_comma_following_enumerator_list.html&#34;&gt;列挙子の末尾へのカンマ付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の列挙子の後ろにカンマを書くことが許可された&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/result_of_integer_division_and_modulo.html&#34;&gt;整数に対する除算と剰余算の丸め結果を規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;これまで実装定義だった整数の除算と剰余算に対する丸め方法を、標準で規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定長配列クラス&lt;code&gt;&lt;a href=&#34;../reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;単方向リンクリストの実装である&lt;code&gt;&lt;a href=&#34;../reference/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表の連想コンテナである&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;クラス、およびその重複を許可するバージョンを追加&lt;/li&gt;
&lt;li&gt;コンテナ全般がムーブセマンティクスに対応&lt;ul&gt;
&lt;li&gt;クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;が、コピー構築可能な型だけでなく、ムーブ構築のみ可能な型も受け付けるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_back()&lt;/code&gt;や&lt;code&gt;insert()&lt;/code&gt;等の要素追加のためのメンバ関数が、新たな要素のコピーだけでなく、一時オブジェクトも受け取れて、ムーブで挿入ができるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要素追加のためのメンバ関数として、クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数を受け取り、一時オブジェクトの生成コストを減らせるものが追加された。これらは、以下のように命名されたメンバ関数である：&lt;code&gt;emplace()&lt;/code&gt;、&lt;code&gt;emplace_back()&lt;/code&gt;、&lt;code&gt;emplace_front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コンテナのメモリアロケータが状態を持てるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストでコンテナを初期化できるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストをパラメータで受け取れるようにするためのクラス&lt;code&gt;&lt;a href=&#34;../reference/initializer_list/initializer_list.html&#34;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;型情報型を連想コンテナのキーとして使用するための&lt;code&gt;&lt;a href=&#34;../reference/typeindex/type_index.html&#34;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータを進める関数&lt;code&gt;&lt;a href=&#34;../reference/iterator/next.html&#34;&gt;std::next()&lt;/a&gt;&lt;/code&gt;、イテレータを逆に進める関数&lt;code&gt;&lt;a href=&#34;../reference/iterator/prev.html&#34;&gt;std::prev()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;要素をムーブするイテレータとして、&lt;code&gt;&lt;a href=&#34;../reference/iterator/move_iterator.html&#34;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;先頭イテレータと末尾イテレータを取得する非メンバ関数として、&lt;code&gt;&lt;a href=&#34;../reference/iterator/begin.html&#34;&gt;std::begin()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/iterator/end.html&#34;&gt;std::end()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲が特定の条件を満たしているか調べる、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/all_of.html&#34;&gt;std::all_of()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/any_of.html&#34;&gt;std::any_of()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/none_of.html&#34;&gt;std::none_of&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たしていない最初の要素を検索する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/find_if_not.html&#34;&gt;std::find_if_not()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された数の要素をコピーする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/copy_n.html&#34;&gt;std::copy_n()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たす要素のみをコピーする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/copy_if.html&#34;&gt;std::copy_if()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータ範囲の要素をムーブする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/move.html&#34;&gt;std::move()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/move_backward.html&#34;&gt;std::move_backward()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;新たな乱数ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;に対応したイテレータ範囲のシャッフルアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/shuffle.html&#34;&gt;std::shuffle()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータ範囲がソート済みか調べる&lt;code&gt;&lt;a href=&#34;../reference/algorithm/is_sorted.html&#34;&gt;std::is_sorted()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;2つの値の最小値を取得する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/min.html&#34;&gt;std::min()&lt;/a&gt;&lt;/code&gt;、最大値を取得する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/max.html&#34;&gt;std::max()&lt;/a&gt;&lt;/code&gt;に、初期化子リストによる可変引数版を追加&lt;/li&gt;
&lt;li&gt;最小値と最大値を同時に取得する関数&lt;code&gt;&lt;a href=&#34;../reference/algorithm/minmax.html&#34;&gt;std::minmax()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/minmax_element.html&#34;&gt;std::minmax_element()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された値から始まる整数列を生成する&lt;code&gt;&lt;a href=&#34;../reference/numeric/iota.html&#34;&gt;std::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メモリアロケータの実装をより容易にするために、コンテナとメモリアロケータの中間インタフェースとして&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits.html&#34;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スマートポインタの実装として、所有権共有方式の&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと、所有権専有方式の&lt;code&gt;&lt;a href=&#34;../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;従来のスマートポインタ&lt;code&gt;auto_ptr&lt;/code&gt;クラスを、非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;amp;()&lt;/code&gt;がオーバーロードされていたとしても正しく変数のアドレスを取得する関数、&lt;code&gt;&lt;a href=&#34;../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準ライブラリ中の入力ストリーム演算子&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;と出力ストリーム演算子&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;がムーブセマンティクスに対応。ストリームの一時オブジェクトを受け取れるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UTF-16の文字列型&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::u16string&lt;/a&gt;&lt;/code&gt;、UTF-32の文字列型&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::u32string&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;UTF-8とUTF-16、UTF-8とUTF-32といった、マルチバイト文字とワイド文字列の相互変換を行うクラス&lt;code&gt;&lt;a href=&#34;../reference/locale/wstring_convert.html&#34;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値から文字列オブジェクトに変換する関数として、&lt;code&gt;&lt;a href=&#34;../reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/string/to_wstring.html&#34;&gt;std::to_wstring()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列オブジェクトから数値に変換する、&lt;code&gt;&lt;a href=&#34;../reference/string/stoi.html&#34;&gt;std::stoi()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;../reference/string/stof.html&#34;&gt;std::stof()&lt;/a&gt;&lt;/code&gt;といった関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタと関数オブジェクトを統一的に扱えるクラス&lt;code&gt;&lt;a href=&#34;../reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;関数の引数を束縛して部分適用する関数&lt;code&gt;&lt;a href=&#34;../reference/functional/bind.html&#34;&gt;std::bind()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;メンバ関数ポインタを関数オブジェクトにアダプトする関数&lt;code&gt;&lt;a href=&#34;../reference/functional/mem_fn.html&#34;&gt;std::mem_fn()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;テンプレートに、明示的に左辺値参照を渡すためのクラス&lt;code&gt;&lt;a href=&#34;../reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;と、そのヘルパ関数である&lt;code&gt;&lt;a href=&#34;../reference/functional/ref.html&#34;&gt;std::ref()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/functional/cref.html&#34;&gt;std::cref()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表コンテナの追加にともない、オブジェクトのハッシュ値を計算する関数オブジェクト&lt;code&gt;&lt;a href=&#34;../reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ビット演算の関数オブジェクトとして、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_and.html&#34;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_or.html&#34;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_xor.html&#34;&gt;std::bit_xor&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;従来の関数オブジェクトアダプタ&lt;code&gt;std::unary_function&lt;/code&gt;、&lt;code&gt;std::binary_function&lt;/code&gt;、&lt;code&gt;std::mem_fun()&lt;/code&gt;、&lt;code&gt;std::mem_fun_ref()&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;li&gt;従来の関数バインダ&lt;code&gt;std::bind1st&lt;/code&gt;、&lt;code&gt;std::bind2nd&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スレッドを管理するクラス&lt;code&gt;&lt;a href=&#34;../reference/thread/thread.html&#34;&gt;std::thread&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド間での排他制御を行うミューテックスの実装である&lt;code&gt;&lt;a href=&#34;../reference/mutex/mutex.html&#34;&gt;std::mutex&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/mutex/recursive_mutex.html&#34;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt;クラス等を追加&lt;ul&gt;
&lt;li&gt;ミューテックスの所有権放棄を自動的に行うためのクラス&lt;code&gt;&lt;a href=&#34;../reference/mutex/lock_guard.html&#34;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/mutex/unique_lock.html&#34;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドセーフに一度だけ処理を呼び出す関数、&lt;code&gt;&lt;a href=&#34;../reference/mutex/call_once.html&#34;&gt;std::call_once()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件変数の実装である&lt;code&gt;&lt;a href=&#34;../reference/condition_variable/condition_variable.html&#34;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/condition_variable/condition_variable_any.html&#34;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;Futureデザインパターンをサポートする&lt;code&gt;&lt;a href=&#34;../reference/future/future.html&#34;&gt;std::future&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/future/promise.html&#34;&gt;std::promise&lt;/a&gt;&lt;/code&gt;クラス、およびその補助機能を追加&lt;/li&gt;
&lt;li&gt;アトミック操作のライブラリ&lt;code&gt;&lt;a href=&#34;../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap()&lt;/code&gt;関数を、&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;から&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に移動&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスのために、左辺値を右辺値に変換する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/move.html&#34;&gt;std::move()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;引数転送のための関数&lt;code&gt;&lt;a href=&#34;../reference/utility/forward.html&#34;&gt;std::forward()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;../reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;が、それぞれの要素型のコンストラクタ引数を直接受け取れるようになった&lt;/li&gt;
&lt;li&gt;タプルの実装である&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;SFINAEのために、型の値を取得する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/declval.html&#34;&gt;std::declval()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;時間ユーティリティライブラリ&lt;code&gt;&lt;a href=&#34;../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;型特性ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラー報告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSのエラー値を扱うライブラリ&lt;code&gt;&lt;a href=&#34;../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;正規表現ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正規表現ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ECMAScript、POSIX、AWK、grepなどの構文を切り替えて使用できるのが特徴。デフォルトではECMAScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;乱数ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;複数定義されている乱数生成器と分布アルゴリズムを、組み合わせて使用するのが特徴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ビット幅規定の整数型ライブラリである&lt;code&gt;&lt;a href=&#34;../reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp11&#34; target=&#34;_blank&#34;&gt;C++11 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp11/noexcept.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index 461dedd5c..815ed6c7c 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -83,7 +83,7 @@ struct X {
   int f() const noexcept; // noexcept例外仕様
 
   // 外側はnoexcept例外仕様、内側はnoexcept演算子。
-  // メンバ関数関数f()が例外を送出しない場合、関数g()もまた例外を送出しない
+  // メンバ関数f()が例外を送出しない場合、関数g()もまた例外を送出しない
   int g() const noexcept(noexcept(f()))
   { return f(); }
 };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータのauto宣言 [P0127R2] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp17/declaring_non-type_template_arguments_with_auto.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
index 046baebd9..26de00e2a 100644
--- a/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
+++ b/lang/cpp17/declaring_non-type_template_arguments_with_auto.md
@@ -47,7 +47,7 @@ A&amp;lt;3.14&amp;gt;; // コンパイルエラー (浮動小数点数は渡せない)
 - オブジェクトへの左辺値参照または関数への左辺値参照
 - メンバへのポインタ
 -  [`std::nullptr_t`](/reference/cstddef/nullptr_t.md)
-- プレースホルダ型を含む型　&amp;lt;-- この行が追加された
+- プレースホルダ型を含む型 &amp;lt;-- この行が追加された
 
 なお、[temp.param]/4 は C++20 で変更予定である。[Working Draft, Standard](http://eel.is/c++draft/temp.param)を参照。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp20/coroutines.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 6a380acd1..c30f35ed2 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -194,7 +194,7 @@ final-suspend :
 
 Promise型のスコープにおいて、非修飾な`return_void`および`return_value`の探索が行われる。両方が見つかった場合、プログラムは不適格となる。
 
-コルーチン呼び出しのglvalue結果またはprvalue結果オブジェクトを初期化するために、式 _promise_`.get_return_object()`が使われる。
+コルーチン呼び出しのglvalue結果またはprvalue結果オブジェクトを初期化するために、式 &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.get_return_object()`が使われる。
 `get_return_object`呼び出しは高々1回であり、`initial_suspend`呼び出しよりも前に順序付けられる。
 
 中断状態にあるコルーチンは、そのコルーチンを指すコルーチンハンドルの再開メンバ関数呼び出しによって、継続実行を再開できる。
@@ -280,9 +280,9 @@ int main() {
 パラメータのコピーの生存期間は、パラメータPromiseオブジェクトの終了直後で終了する。
 （コルーチンが参照渡しのパラメータを持つ場合、そのパラメータにより参照されるエンティティ生存期間終了後のコルーチン再開は未定義動作を引き起こしやすい。）
 
-式 _promise_`.unhandled_exception()`の評価が例外で終了した場合、コルーチンは最終サスペンドポイントで中断したとみなされる。
+式 &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.unhandled_exception()`の評価が例外で終了した場合、コルーチンは最終サスペンドポイントで中断したとみなされる。
 
-式 `co_await ` _promise_`.final_suspend()` は例外送出してはならない。
+式 `co_await` &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.final_suspend()` は例外送出してはならない。
 
 ### Await式
 `co_await`式は、そのオペランド式で表される計算の完了を待機しているあいだ、コルーチン評価をサスペンド(中断)するために用いる。
@@ -303,7 +303,7 @@ Await式の評価では、次のような補助的な型、式、オブジェク
 - _p_ を同Await式を含むコルーチンのPromiseオブジェクトの左辺値名とし、`P`を同オブジェクトの型とする。
 - _a_ (Awaitable) を下記のように定義する：
     - Await式がYield式または初期サスペンドポイントまたは最終サスペンドポイントにより暗黙に生成された場合、_a_ をその _cast-expression_ とする。
-    - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を _p_`.await_transform(` _cast-expression_ `)`とする。
+    - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.await_transform(` &amp;lt;code&amp;gt;_cast-expression_&amp;lt;/code&amp;gt; `)`とする。
     - それ以外では _a_ を _cast-expression_ とする。
 - _o_ (Awaiter) を下記のように定義する。_o_ がprvalueの場合は[Temporary materialization conversion](https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html)が行われる：
     - 実引数 _a_ に対して適用可能な`operator co_await`関数を列挙し、_o_ をオーバーロード解決により選択された関数呼び出しとする。
@@ -311,9 +311,9 @@ Await式の評価では、次のような補助的な型、式、オブジェク
     - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
 - _e_ を、_o_ の評価結果を参照する左辺値とする。
 - _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のオブジェクトとする。
-- _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
-- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
-- _await-resume_ を、式 _e_`.await_resume()`とする。
+- _await-ready_ を、`bool`に変換されうる式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_ready()`とする。
+- _await-suspend_ を、式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_suspend(` &amp;lt;code&amp;gt;_h_&amp;lt;/code&amp;gt; `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
+- _await-resume_ を、式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_resume()`とする。
 
 Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 
@@ -377,7 +377,7 @@ co_yield braced-init-list
 * braced-init-list[italic]
 
 Yield式は関数の中断コンテキストにのみ出現してよい。
-_e_ をYield式のオペランド、_p_ を同式を含むコルーチンのPromiseオブジェクトのlvalue名としたとき、Yield式は式`co_await` _p_`.yield_value(` _e_ `)`と等価である。
+_e_ をYield式のオペランド、_p_ を同式を含むコルーチンのPromiseオブジェクトのlvalue名としたとき、Yield式は式`co_await` &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.yield_value(` &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt; `)`と等価である。
 
 ```cpp
 template &amp;lt;typename T&amp;gt;
@@ -441,10 +441,10 @@ _p_ をコルーチンPromiseオブジェクトのlvalue名とすると、`co_re
 
 ここで _final-suspend_ はコルーチン動作説明用の最終サスペンドポイントラベル名であり、_S_ は次の通り定義される：
 
-- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を _p_`.return_value(` _expr-or-braced-init-list_ `)`とする。式 _S_ は `void`型のprvalueであるべき。
-- そうでなければ、_S_ を複合文 `{` _expression_ _opt_ `;` _p_`.return_void(); }`とする。式 _p_`.return_void()`は`void`型のprvalueであるべき。
+- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_value(` &amp;lt;code&amp;gt;_expr-or-braced-init-list_&amp;lt;/code&amp;gt; `)`とする。式 _S_ は `void`型のprvalueであるべき。
+- そうでなければ、_S_ を複合文 `{` &amp;lt;code&amp;gt;_expression&amp;lt;sub&amp;gt;opt&amp;lt;/sub&amp;gt;_&amp;lt;/code&amp;gt; `;` &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void(); }`とする。式 &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void()`は`void`型のprvalueであるべき。
 
-_p_`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
+&amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
 そうでなければ、コルーチン本体の終端到達は未定義の動作を引き起こす。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>組み込み配列の比較を非推奨化 [P1120R0] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_array_comparisons.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp20/deprecate_array_comparisons.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_array_comparisons.md b/lang/cpp20/deprecate_array_comparisons.md
index 72be0f359..cb0515bc5 100644
--- a/lang/cpp20/deprecate_array_comparisons.md
+++ b/lang/cpp20/deprecate_array_comparisons.md
@@ -17,7 +17,7 @@
 ```cpp
 int arr1[5];
 int arr2[5];
-bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr[0] == &amp;amp;arr[1]と同じ。
+bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr1[0] == &amp;amp;arr2[0]と同じ。
                           // 配列の要素は比較されない
 auto cmp = arr1 &amp;lt;=&amp;gt; arr2; // エラー！
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++26 -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp26.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp26.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++26&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++26とは、2026年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2cと呼ばれることがある。「(2020年代の3つ目のバージョンが) 202c年にリリースされる」という伏せ字として「c」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/static_storage_for_braced_initializers.html&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的記憶域に配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的記憶域に配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/nice_placeholder_with_no_name.html&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/deleting_a_pointer_to_an_incomplete_type_should_be_ill-formed.html&#34;&gt;不完全型へのポインタに対する&lt;code&gt;delete&lt;/code&gt;を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;未定義動作を引き起こす操作をコンパイルエラーとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/disallow_binding_a_returned_glvalue_to_a_temporary.html&#34;&gt;返却された左辺値から暗黙変換された一時オブジェクトが参照に束縛されることを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;寿命切れの変数によって引き起こされるバグを防止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/clarifying_rules_for_brace_elision_in_aggregate_initialization.html&#34;&gt;要素数不明の配列を集成体初期化する規則を明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列要素の集成体初期化で&lt;code&gt;{}&lt;/code&gt;が省略された場合の矛盾していた規定を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/erroneous_behavior_for_uninitialized_reads.html&#34;&gt;未初期化変数の読み取りをエラー性動作とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化されていない自動変数の読み取りの安全性を規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/structured_bindings_can_introduce_a_pack.html&#34;&gt;構造化束縛でパックを導入できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルを分解する際に複数の変数をパックとして宣言できるようにする。&lt;code&gt;auto [a, ...xs] = f();&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/making_non-encodable_string_literals_ill-formed.html&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;分岐・ループ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/structured_binding_declaration_as_a_condition.html&#34;&gt;条件式での構造化束縛の使用を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式全体を&lt;code&gt;bool&lt;/code&gt;値に変換できる場合に条件式で構造化束縛を使用できることとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/trivial_infinite_loops_are_not_undefined_behavior.html&#34;&gt;空の無限ループは未定義動作ではないと規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行プログラムの進行保証などを考慮して空の無限ループを未定義動作ではないものとする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/delete_reason.html&#34;&gt;関数宣言を削除する理由を指定できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;f() = delete(&#34;reason&#34;);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/contracts.html&#34;&gt;契約プログラミングをサポートする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の事前条件、事後条件、不変条件を記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/trivial_unions.md.nolink&#34;&gt;共用体をトリビアルに未初期化できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;での&lt;code&gt;union U { T storage[N]; };&lt;/code&gt;を許可し、未初期化にできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/trivial_relocatability.md.nolink&#34;&gt;トリビアルな再配置&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ムーブ構築と破棄のためにビット単位のコピーとデストラクタ評価が必要になる型のオブジェクトを再配置するメカニズムを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/on_the_ignorability_of_standard_attributes.html&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/attributes_for_structured_bindings.html&#34;&gt;構造化束縛への属性を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto [a, b [[maybe_unused]], c] = f();&lt;/code&gt;のように構造化束縛の要素に対して属性を付加できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/pack_indexing.html&#34;&gt;パラメータパックへのインデックスアクセスを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレートのパラメータパックに添字アクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/ordering_of_constraints_involving_fold_expressions.md.nolink&#34;&gt;制約式内での畳み込み式の順序付け&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;畳み込み式では全体ではなく個別の制約を原子制約式として扱う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/variadic_friends.html&#34;&gt;可変引数テンプレートで&lt;code&gt;friend&lt;/code&gt;宣言をできるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートの可変引数テンプレートでまとめて&lt;code&gt;friend&lt;/code&gt;宣言できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/concept_and_variable-template_template-parameters.md.nolink&#34;&gt;コンセプトと変数テンプレートにテンプレートテンプレートパラメータのサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレート引数をあとで指定するテンプレートテンプレートパラメータを、コンセプトと変数テンプレートでも使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/reflection.md.nolink&#34;&gt;静的リフレクション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リフレクション演算子&lt;code&gt;^^&lt;/code&gt;と&lt;code&gt;std::meta::info&lt;/code&gt;型によりコンパイル時にさまざまな情報を取得できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/expansion_statements.md.nolink&#34;&gt;コンパイル時のタプルやリストを展開処理する&lt;code&gt;template for&lt;/code&gt;文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラス・タプル・Range・パラメータパックなどを展開してすべての要素をコンパイル時の処理する&lt;code&gt;template for&lt;/code&gt;文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/constexpr_cast_from_voidptr.html&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/user-generated_static_assert_messages.html&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/constexpr_placement_new.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;配置&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式の文脈での配置&lt;code&gt;new&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/constexpr_structured_bindings_and_references_to_constexpr_variables.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;構造化束縛の許可と、&lt;code&gt;constexpr&lt;/code&gt;参照の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式に対する構造化束縛を許可し、関連して&lt;code&gt;constexpr&lt;/code&gt;参照の制限を緩和して自動変数も参照できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/allowing_exception_throwing_in_constant-evaluation.html&#34;&gt;定数評価での例外送出を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式の文脈での例外の送出と捕捉を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/constexpr_virtual_inheritance.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;仮想継承を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式の文脈での仮想継承を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/embed.html&#34;&gt;ファイルを読み込む&lt;code&gt;#embed&lt;/code&gt;命令を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;バイナリファイルをインクルードするメカニズム。&lt;code&gt;#include&lt;/code&gt;とちがって読み出しサイズなどの柔軟な指定ができる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/preprocessing_is_never_undefined.md.nolink&#34;&gt;プリプロセッサ仕様での「未定義動作」を不適格 (診断不要) に変更&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサとレキサーの文脈での「未定義動作」用語を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt; (診断不要) に変更&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソースコード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.html&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;モジュール&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/module_declarations_shouldnt_be_macros.html&#34;&gt;モジュール宣言でのモジュール名のマクロ展開を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;export module MACRO_NAME;&lt;/code&gt;を禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/allow_attaching_main_to_the_global_module.md.nolink&#34;&gt;&lt;code&gt;main&lt;/code&gt;関数をグローバルモジュールに含められるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt;関数に&lt;code&gt;extern &#34;C++&#34;&lt;/code&gt;を指定できるようにすることで名前付きモジュールに含められるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/the_oxford_variadic_comma.html&#34;&gt;先行するカンマのない省略記号を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void f(int, ...);&lt;/code&gt;はOK。&lt;code&gt;void f(int...);&lt;/code&gt;は非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/remove_deprecated_array_comparisons.html&#34;&gt;非推奨だった組み込み配列の比較を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20で非推奨となっていた配列比較を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.html&#34;&gt;非推奨となっていた列挙型の算術変換を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20から非推奨となっていた列挙値への算術演算で算術型に暗黙変換される仕様を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列エンコーディングを識別するライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;要素のメモリ位置が安定するシーケンスコンテナのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/hive.md.nolink&#34;&gt;&amp;lt;hive&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理におけるデータの参照・更新を行うRCU (Read Copy Update) のライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/rcu.html&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理において参照中のデータが更新されないよう保護するハザードポインタのライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;データ並列ライブラリとして、&lt;code&gt;&lt;a href=&#34;../reference/simd.md.nolink&#34;&gt;&amp;lt;simd&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;デバッグサポートのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/debugging.html&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;線形代数ライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コンパイル時に容量を固定する可変長配列クラスのライブラリとして&lt;code&gt;&lt;a href=&#34;../reference/inplace_vector.md.nolink&#34;&gt;&amp;lt;inplace_vector&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;C23の互換ライブラリとして、ビット操作ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/stdbit.h.md.nolink&#34;&gt;&amp;lt;stdbit.h&amp;gt;&lt;/a&gt;&lt;/code&gt;と、検査付き整数演算ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/stdckdint.h.md.nolink&#34;&gt;&amp;lt;stdckdint.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。&lt;code&gt;&amp;lt;cstd…&amp;gt;&lt;/code&gt;形式のライブラリは追加されない&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;全体&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準ライブラリに付加された、戻り値を無視した際に警告を出力する&lt;a href=&#34;cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;から部分ビューを取り出す&lt;code&gt;&lt;a href=&#34;../reference/mdspan/submdspan.html&#34;&gt;std::submdspan()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;に、インデックスを指定して要素を取り出す&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan/at.md.nolink&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;に対する&lt;code&gt;&lt;a href=&#34;../reference/mdspan/extents.html&#34;&gt;std::dextents&lt;/a&gt;&lt;/code&gt;指定の冗長さを解決する&lt;code&gt;&lt;a href=&#34;../reference/mdspan/extents.html&#34;&gt;std::dims&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;のレイアウトとして、&lt;code&gt;&lt;a href=&#34;../reference/mdspan/layout_left_padded.html&#34;&gt;std::layout_left_padded&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/mdspan/layout_right_padded.html&#34;&gt;std::layout_right_padded&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素アクセスにアライメント保証を与える&lt;code&gt;&lt;a href=&#34;../reference/mdspan/aligned_accessor.html&#34;&gt;std::aligned_accessor&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;に、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/initializer_list/initializer_list.html&#34;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;をとるコンストラクタ&lt;/li&gt;
&lt;li&gt;インデックスアクセスのための&lt;code&gt;&lt;a href=&#34;../reference/span/span/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;連想コンテナの以下のメンバ関数に、一時オブジェクトが生成されるコストを抑える拡張を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/set/set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_multiset/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;の推論補助を改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges/concat_view.html&#34;&gt;std::views::concat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges/cache_latest.md.nolink&#34;&gt;std::views::cache_latest&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges/to_input_view.html&#34;&gt;std::views::to_input&lt;/a&gt;&lt;/code&gt;を追加。これはパフォーマンス向上のために、Rangeを入力Rangeかつ非&lt;code&gt;&lt;a href=&#34;../reference/ranges/common_range.html&#34;&gt;common_range&lt;/a&gt;&lt;/code&gt; (イテレータと番兵の型を別する) に変換する&lt;/li&gt;
&lt;li&gt;Range関係の、償却定数時間での要素追加を行う機能を追加&lt;ul&gt;
&lt;li&gt;各viewクラスに&lt;code&gt;reserve_hint()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges/reserve_hint.md.nolink&#34;&gt;std::ranges::reserve_hint()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ranges/approximately_sized_range.md.nolink&#34;&gt;std::ranges::approximately_sized_range&lt;/a&gt;&lt;/code&gt;コンセプトを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インデックス列を生成する&lt;code&gt;&lt;a href=&#34;../reference/ranges/indices.md.nolink&#34;&gt;std::views::indices&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連続イテレータのコンセプト&lt;code&gt;&lt;a href=&#34;../reference/iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;に、ポインタに変換できることを要件として追加&lt;/li&gt;
&lt;li&gt;以下のコンテナを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/deque/deque.html&#34;&gt;std::deque&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/forward_list/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/list/list.html&#34;&gt;std::list&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt; (ただし&lt;code&gt;&lt;a href=&#34;../reference/node_handle/node_handle.html&#34;&gt;node_handle&lt;/a&gt;::&lt;a href=&#34;../reference/node_handle/node_handle/key.html&#34;&gt;key()&lt;/a&gt;&lt;/code&gt;を使用すると未定義動作)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/map/multimap.html&#34;&gt;std::multimap&lt;/a&gt;&lt;/code&gt; (ただし&lt;code&gt;&lt;a href=&#34;../reference/node_handle/node_handle.html&#34;&gt;node_handle&lt;/a&gt;::&lt;a href=&#34;../reference/node_handle/node_handle/key.html&#34;&gt;key()&lt;/a&gt;&lt;/code&gt;を使用すると未定義動作)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/set/multiset.html&#34;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt; (ハッシュ関数のカスタム化が必要) (ただし&lt;code&gt;&lt;a href=&#34;../reference/node_handle/node_handle.html&#34;&gt;node_handle&lt;/a&gt;::&lt;a href=&#34;../reference/node_handle/node_handle/key.html&#34;&gt;key()&lt;/a&gt;&lt;/code&gt;を使用すると未定義動作)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt; (ハッシュ関数のカスタム化が必要) (ただし&lt;code&gt;&lt;a href=&#34;../reference/node_handle/node_handle.html&#34;&gt;node_handle&lt;/a&gt;::&lt;a href=&#34;../reference/node_handle/node_handle/key.html&#34;&gt;key()&lt;/a&gt;&lt;/code&gt;を使用すると未定義動作)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt; (ハッシュ関数のカスタム化が必要)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt; (ハッシュ関数のカスタム化が必要)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/flat_map/flat_map.html&#34;&gt;std::flat_map&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/flat_map/flat_multimap.html&#34;&gt;std::flat_multimap&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/flat_set/flat_set.html&#34;&gt;std::flat_set&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/flat_set/flat_multiset.html&#34;&gt;std::flat_multiset&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/queue/priority_queue.html&#34;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;のアルゴリズムを並列実行に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/stable_sort.html&#34;&gt;std::stable_sort()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_stable_sort.html&#34;&gt;std::ranges::stable_sort()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/stable_partition.html&#34;&gt;std::stable_partition()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_stable_partition.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/inplace_merge.html&#34;&gt;std::inplace_merge()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_inplace_merge.html&#34;&gt;std::ranges::inplace_merge()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_default_construct.html&#34;&gt;std::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_default_construct.html&#34;&gt;std::ranges::uninitialized_default_construct()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_default_construct_n.html&#34;&gt;std::uninitialized_default_construct_n()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_default_construct_n.html&#34;&gt;std::ranges::uninitialized_default_construct_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_value_construct.html&#34;&gt;std::uninitialized_value_construct()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_value_construct.html&#34;&gt;std::ranges::uninitialized_value_construct()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_value_construct_n.html&#34;&gt;std::uninitialized_value_construct_n()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_value_construct_n.html&#34;&gt;std::ranges::uninitialized_value_construct_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_copy.html&#34;&gt;std::uninitialized_copy()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_copy.html&#34;&gt;std::ranges::uninitialized_copy()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_copy_n.html&#34;&gt;std::uninitialized_copy_n()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_copy_n.html&#34;&gt;std::ranges::uninitialized_copy_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_move.html&#34;&gt;std::uninitialized_move()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_move.html&#34;&gt;std::ranges::uninitialized_move()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_move_n.html&#34;&gt;std::uninitialized_move_n()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_move_n.html&#34;&gt;std::ranges::uninitialized_move_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_fill.html&#34;&gt;std::uninitialized_fill()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_fill.html&#34;&gt;std::ranges::uninitialized_fill()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/uninitialized_fill_n.html&#34;&gt;std::uninitialized_fill_n()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;../reference/memory/ranges_uninitialized_fill_n.html&#34;&gt;std::ranges::uninitialized_fill_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムが完全型を要求しないようにするため、&lt;code&gt;&lt;a href=&#34;../reference/iterator/projected.html&#34;&gt;std::projected&lt;/a&gt;&lt;/code&gt;の制約を緩和&lt;/li&gt;
&lt;li&gt;以下のアルゴリズムに、値を波カッコ初期化で渡せるよう制約を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::erase()&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;版&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string/erase_free.html&#34;&gt;std::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/deque/deque.html&#34;&gt;std::deque&lt;/a&gt;&lt;/code&gt;版&lt;code&gt;&lt;a href=&#34;../reference/deque/deque/erase_free.html&#34;&gt;std::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/forward_list/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;版&lt;code&gt;&lt;a href=&#34;../reference/forward_list/forward_list/erase_free.html&#34;&gt;std::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/list/list.html&#34;&gt;std::list&lt;/a&gt;&lt;/code&gt;版&lt;code&gt;&lt;a href=&#34;../reference/list/list/erase_free.html&#34;&gt;std::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;版&lt;code&gt;&lt;a href=&#34;../reference/vector/vector/erase_free.html&#34;&gt;std::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/find.html&#34;&gt;std::find()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find.html&#34;&gt;std::ranges::find()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_find_last.html&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/count.html&#34;&gt;std::count()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_count.html&#34;&gt;std::ranges::count()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/search_n.html&#34;&gt;std::search_n()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_search_n.html&#34;&gt;std::ranges::search_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace.html&#34;&gt;std::replace()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace.html&#34;&gt;std::ranges::replace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace_if.html&#34;&gt;std::replace_if()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace_if.html&#34;&gt;std::ranges::replace_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace_copy.html&#34;&gt;std::ranges::replace_copy()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace_copy_if.html&#34;&gt;std::replace_copy_if()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/replace_copy_if.html&#34;&gt;std::ranges::replace_copy_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/fill.html&#34;&gt;std::fill()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fill.html&#34;&gt;std::ranges::fill()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/fill_n.html&#34;&gt;std::fill_n()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fill_n.html&#34;&gt;std::ranges::fill_n()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/remove.html&#34;&gt;std::remove()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_remove.html&#34;&gt;std::ranges::remove()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/remove_copy.html&#34;&gt;std::remove_copy()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_remove_copy.html&#34;&gt;std::ranges::remove_copy()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/lower_bound.html&#34;&gt;std::lower_bound()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_lower_bound.html&#34;&gt;std::ranges::lower_bound()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/upper_bound.html&#34;&gt;std::upper_bound()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_upper_bound.html&#34;&gt;std::ranges::upper_bound()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/equal_range.html&#34;&gt;std::equal_range()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_equal_range.html&#34;&gt;std::ranges::equal_range()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/binary_search.html&#34;&gt;std::binary_search()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_binary_search.html&#34;&gt;std::ranges::binary_search()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_left.html&#34;&gt;std::ranges::fold_left()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_fold_right.html&#34;&gt;std::ranges::fold_right()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/algorithm/ranges_contains.html&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有権を保持しない&lt;code&gt;&lt;a href=&#34;../reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;として、&lt;code&gt;&lt;a href=&#34;../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;../reference/functional/function_ref.html&#34;&gt;std::function_ref&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;のコピー可能版として、&lt;code&gt;&lt;a href=&#34;../reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;../reference/functional/copyable_function.html&#34;&gt;std::copyable_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/functional/bind_back.html&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;に、非型テンプレート引数として関数を指定するオーバーロードを追加&lt;ul&gt;
&lt;li&gt;関連して、非型テンプレート引数の関数オブジェクトを反転させられるよう、&lt;code&gt;&lt;a href=&#34;../reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;に非型テンプレート引数版のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;に、比較演算子&lt;code&gt;&lt;a href=&#34;../reference/functional/reference_wrapper/op_equal.html&#34;&gt;==&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/functional/reference_wrapper/op_compare_3way.html&#34;&gt;&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;の変換結果&lt;code&gt;&lt;a href=&#34;../reference/charconv/to_chars_result.html&#34;&gt;std::to_chars_result&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/charconv/from_chars_result.html&#34;&gt;std::from_chars_result&lt;/a&gt;&lt;/code&gt;に、変換が正しく完了したかを判定する&lt;code&gt;operator bool&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;の仕様が&lt;code&gt;std::sprintf()&lt;/code&gt;で説明されていたが、&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で定義するよう仕様を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/sstream/basic_istringstream.html&#34;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;および&lt;code&gt;&lt;a href=&#34;../reference/sstream/basic_ostringstream.html&#34;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;のコンストラクタおよび&lt;code&gt;str()&lt;/code&gt;メンバ関数に、&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;に、以下の改善を導入&lt;ul&gt;
&lt;li&gt;ポインタ出力のサポートを追加&lt;/li&gt;
&lt;li&gt;幅と精度を動的に指定した場合でも型の検証がコンパイル時に行われるよう仕様を見直し&lt;/li&gt;
&lt;li&gt;コンパイル時の書式文字列だけでなく、実行時の書式文字列を渡せるよう仕様修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、部分文字列を&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;として取得するメンバ関数&lt;code&gt;subview()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;として連結させる&lt;code&gt;operator+&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ファイルのネイティブハンドルを取得できるよう、&lt;code&gt;&lt;a href=&#34;../reference/fstream/basic_filebuf.html&#34;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/fstream/basic_ifstream.html&#34;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/fstream/basic_ofstream.html&#34;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/fstream/basic_fstream.html&#34;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;クラスに、以下のメンバを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native_handle_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native_handle()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path.html&#34;&gt;std::filesystem::path&lt;/a&gt;&lt;/code&gt;クラスに、文字列フォーマットのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path.html&#34;&gt;std::filesystem::path&lt;/a&gt;&lt;/code&gt;クラスに、出力用の文字列を取得するための、以下のメンバ関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/display_string.md.nolink&#34;&gt;display_string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/system_encoded_string.md.nolink&#34;&gt;system_encoded_string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/generic_display_string.md.nolink&#34;&gt;generic_display_string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/generic_system_encoded_string.md.nolink&#34;&gt;generic_system_encoded_string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/print/print.html&#34;&gt;std::print()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/print/println.html&#34;&gt;std::println()&lt;/a&gt;&lt;/code&gt;に、ロックを取得せず高速に書き出す最適化を許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/print/println.html&#34;&gt;std::println()&lt;/a&gt;&lt;/code&gt;に、改行のみを出力するオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/print/print.html&#34;&gt;std::print()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/print/println.html&#34;&gt;std::println()&lt;/a&gt;&lt;/code&gt;をより高速にできる最適化が可能か判定する&lt;code&gt;&lt;a href=&#34;../reference/format/enable_nonlocking_formatter_optimization.html&#34;&gt;std::enable_nonlocking_formatter_optimization&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/istream/basic_istream.html&#34;&gt;std::basic_istream&lt;/a&gt;::&lt;a href=&#34;../reference/istream/basic_istream/ignore.html&#34;&gt;ignore()&lt;/a&gt;&lt;/code&gt;メンバ関数に、区切り文字として&lt;code&gt;char&lt;/code&gt;型をとるオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列・非同期処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;に汎用的な非同期実行を管理するフレームワークを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;オブジェクトに対する2つの値の最大値・最小値を取得する関数として、以下を追加&lt;ul&gt;
&lt;li&gt;メンバ関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_max.html&#34;&gt;fetch_max()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_min.html&#34;&gt;fetch_min()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_fmaximum.md.nolink&#34;&gt;fetch_fmaximum()&lt;/a&gt;&lt;/code&gt; (浮動小数点数用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_fminimum.md.nolink&#34;&gt;fetch_fminimum()&lt;/a&gt;&lt;/code&gt; (浮動小数点数用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_fmaximum_num.md.nolink&#34;&gt;fetch_fmaximum_num()&lt;/a&gt;&lt;/code&gt; (浮動小数点数用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/fetch_fminimum_num.md.nolink&#34;&gt;fetch_fminimum_num()&lt;/a&gt;&lt;/code&gt; (浮動小数点数用)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非メンバ関数として&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_fetch_max.html&#34;&gt;std::atomic_fetch_max()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_fetch_max_explicit.html&#34;&gt;std::atomic_fetch_max_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_fetch_min.html&#34;&gt;std::atomic_fetch_min()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_fetch_min_explicit.html&#34;&gt;std::atomic_fetch_min_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;クラスに、現在の値を読み込まず (fetchせず) に加算などをする高速な縮約用の操作として、以下を追加&lt;ul&gt;
&lt;li&gt;メンバ関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_add.md.nolink&#34;&gt;store_add()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_sub.md.nolink&#34;&gt;store_sub()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_and.md.nolink&#34;&gt;store_and()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_or.md.nolink&#34;&gt;store_or()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_xor.md.nolink&#34;&gt;store_xor()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_max.md.nolink&#34;&gt;store_max()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic/store_min.md.nolink&#34;&gt;store_min()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非メンバ関数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_add.md.nolink&#34;&gt;std::atomic_store_add()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_add_explicit.md.nolink&#34;&gt;std::atomic_store_add_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_sub.md.nolink&#34;&gt;std::atomic_store_sub()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_sub_explicit.md.nolink&#34;&gt;std::atomic_store_sub_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_and.md.nolink&#34;&gt;std::atomic_store_and()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_and_explicit.md.nolink&#34;&gt;std::atomic_store_and_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_or.md.nolink&#34;&gt;std::atomic_store_or()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_or_explicit.md.nolink&#34;&gt;std::atomic_store_or_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_xor.md.nolink&#34;&gt;std::atomic_store_xor()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_xor_explicit.md.nolink&#34;&gt;std::atomic_store_xor_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_max.md.nolink&#34;&gt;std::atomic_store_max()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_max_explicit.md.nolink&#34;&gt;std::atomic_store_max_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_min.md.nolink&#34;&gt;std::atomic_store_min()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_store_min_explicit.md.nolink&#34;&gt;std::atomic_store_min_explicit()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;クラスに、参照するオブジェクトのアドレスを取得する&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_ref/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスのテンプレートパラメータとしてCV修飾された型を禁止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;クラスのテンプレートパラメータとして、CV修飾された型を受け取れるようにした (内部でCV修飾が外される)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリのアトミック操作を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ・メモリ関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;動的確保したオブジェクトに値の意味論をもたせてディープコピーさせるユーティリティクラスとして、&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;../reference/memory/indirect.md.nolink&#34;&gt;std::indirect&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/memory/polymorphic.md.nolink&#34;&gt;std::polymorphic&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を非順序連想コンテナのキーとして使用できるよう、&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に所有権ベースのハッシュ値を取得する関数オブジェクト&lt;code&gt;&lt;a href=&#34;../reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;、および所有権ベースの等値比較を行う関数オブジェクト&lt;code&gt;&lt;a href=&#34;../reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;関連して、&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;../reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ関数として、&lt;code&gt;owner_hash()&lt;/code&gt;と&lt;code&gt;owner_equal()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスとその関連機能を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日付・時間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のクラスに、ハッシュ値サポートとして&lt;code&gt;&lt;a href=&#34;../reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;の特殊化を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/time_point.html&#34;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/day.html&#34;&gt;std::chrono::day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/month.html&#34;&gt;std::chrono::month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year.html&#34;&gt;std::chrono::year&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/weekday.html&#34;&gt;std::chrono::weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/weekday_indexed.html&#34;&gt;std::chrono::weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/weekday_last.html&#34;&gt;std::chrono::weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/month_day.html&#34;&gt;std::chrono::month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/month_day_last.html&#34;&gt;std::chrono::month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/month_weekday.html&#34;&gt;std::chrono::month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/month_weekday_last.html&#34;&gt;std::chrono::month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year_month.html&#34;&gt;std::chrono::year_month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year_month_day.html&#34;&gt;std::chrono::year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year_month_day_last.html&#34;&gt;std::chrono::year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year_month_weekday.html&#34;&gt;std::chrono::year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/year_month_weekday_last.html&#34;&gt;std::chrono::year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/zoned_time.html&#34;&gt;std::chrono::zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/chrono/leap_second.html&#34;&gt;std::chrono::leap_second&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数値&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、飽和演算 (Saturation Arithmetic) として、型の表現可能な範囲で演算を行う以下の関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric/add_sat.html&#34;&gt;std::add_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric/sub_sat.html&#34;&gt;std::sub_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric/mul_sat.html&#34;&gt;std::mul_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric/div_sat.html&#34;&gt;std::div_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/numeric/saturate_cast.html&#34;&gt;std::saturate_cast()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応 (特殊関数と、グローバルの丸めモードに依存する丸め関数以外の全て)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/atan2.html&#34;&gt;std::atan2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/exp2.html&#34;&gt;std::exp2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/expm1.html&#34;&gt;std::expm1()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/log1p.html&#34;&gt;std::log1p()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/log2.html&#34;&gt;std::log2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/cbrt.html&#34;&gt;std::cbrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/erf.html&#34;&gt;std::erf()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/erfc.html&#34;&gt;std::erfc()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/lgamma.html&#34;&gt;std::lgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cmath/tgamma.html&#34;&gt;std::tgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応 (すべて)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/abs.html&#34;&gt;std::abs()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/arg.html&#34;&gt;std::arg()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/proj.html&#34;&gt;std::proj()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/polar.html&#34;&gt;std::polar()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/norm.html&#34;&gt;std::norm()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/conj.html&#34;&gt;std::conj()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/imag_free.html&#34;&gt;std::imag()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex/real_free.html&#34;&gt;std::real()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;を構造化束縛や、将来のパターンマッチで使用できるようタプルインタフェースの特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;の範囲&lt;code&gt;[0, 1)&lt;/code&gt;の乱数を生成する&lt;code&gt;&lt;a href=&#34;../reference/random/generate_canonical.html&#34;&gt;std::generate_canonical()&lt;/a&gt;&lt;/code&gt;を、望ましい統計的性質を保証するようアルゴリズムと制約を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;に、乱数列を生成する&lt;code&gt;&lt;a href=&#34;../reference/random/generate_random.html&#34;&gt;std::ranges::generate_random()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;に、乱数生成器は並列シミュレーションに効果的なカウンターベースのPhilox乱数生成器として、&lt;code&gt;&lt;a href=&#34;../reference/random/philox_engine.html&#34;&gt;std::philox_engine&lt;/a&gt;&lt;/code&gt;クラス、およびその別名である&lt;code&gt;&lt;a href=&#34;../reference/random/philox4x32.html&#34;&gt;std::philox4x32&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/random/philox4x64.html&#34;&gt;std::philox4x64&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;クラスに、メンバ関数版の&lt;code&gt;&lt;a href=&#34;../reference/variant/variant/visit.md.nolink&#34;&gt;visit()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::monostate&lt;/code&gt;を&lt;code&gt;&lt;a href=&#34;../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;から&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に移動&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;クラスに、0もしくは1要素のRangeとして扱えるようにするための拡張として、イテレータインタフェースを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterator&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_iterator&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/begin.md.nolink&#34;&gt;begin()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional/end.md.nolink&#34;&gt;end()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;に、参照を保持するための&lt;code&gt;T&amp;amp;&lt;/code&gt;の部分特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple/apply.html&#34;&gt;std::apply&lt;/a&gt;&lt;/code&gt;の戻り値型推論をやめて、戻り値型用の&lt;code&gt;&lt;a href=&#34;../reference/tuple/apply_result.md.nolink&#34;&gt;std::apply_result&lt;/a&gt;&lt;/code&gt;クラスを追加し、関連する以下の機能を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_applicable.md.nolink&#34;&gt;std::is_applicable&lt;/a&gt;&lt;/code&gt;型特性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_nothrow_applicable.md.nolink&#34;&gt;std::is_nothrow_applicable&lt;/a&gt;&lt;/code&gt;型特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/tuple/ignore.html&#34;&gt;std::ignore&lt;/a&gt;&lt;/code&gt;をファーストクラス・オブジェクトとして型を詳細に定義&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;../reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、新たなSI接頭辞として、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio/si_prefix.html&#34;&gt;ronna&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio/si_prefix.html&#34;&gt;ronto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio/si_prefix.html&#34;&gt;quetta&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;30&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/ratio/si_prefix.html&#34;&gt;quecto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−30&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定数式での例外送出が許可されることにともない、以下を&lt;code&gt;constexpr&lt;/code&gt;化&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/exception.html&#34;&gt;std::exception&lt;/a&gt;&lt;/code&gt;クラスの全メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/nested_exception.html&#34;&gt;std::nested_exception&lt;/a&gt;&lt;/code&gt;クラスの全メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/bad_exception.html&#34;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;what()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/uncaught_exceptions.html&#34;&gt;std::uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/current_exception.html&#34;&gt;std::current_exception()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/rethrow_exception.html&#34;&gt;std::rethrow_exception()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/make_exception_ptr.html&#34;&gt;std::make_exception_ptr()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/throw_with_nested.html&#34;&gt;std::throw_with_nested()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/rethrow_if_nested.html&#34;&gt;std::rethrow_if_nested()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;what()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/new/bad_array_new_length.html&#34;&gt;std::bad_array_new_length&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;what()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/bad_cast.html&#34;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;what()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/typeinfo/bad_typeid.html&#34;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;what()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::domain_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::length_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::logic_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::runtime_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::range_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::overflow_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/stdexcept.html&#34;&gt;std::underflow_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/expected.html&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/expected/bad_expected_access.html&#34;&gt;std::bad_expected_access&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/optional/bad_optional_access.html&#34;&gt;std::bad_optional_access&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/variant/bad_variant_access.html&#34;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの以下の機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/format/format_error.html&#34;&gt;std::format_error&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、ポインタのアライメントを判定する&lt;code&gt;&lt;a href=&#34;../reference/memory/is_sufficiently_aligned.html&#34;&gt;std::is_sufficiently_aligned()&lt;/a&gt;&lt;/code&gt;関数を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、タイムトラベル最適化を抑止するための観測可能ポイントとして&lt;code&gt;&lt;a href=&#34;../reference/utility/observable_checkpoint.md.nolink&#34;&gt;std::observable_checkpoint()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/exception/exception_ptr.html&#34;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt;を指定した例外型にキャストする&lt;code&gt;&lt;a href=&#34;../reference/exception/exception_ptr_cast.md.nolink&#34;&gt;std::exception_ptr_cast()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;に、型の順序を取得する&lt;code&gt;&lt;a href=&#34;../reference/compare/type_order.md.nolink&#34;&gt;std::type_order&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デバッグ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/cassert/assert.html&#34;&gt;assert&lt;/a&gt;&lt;/code&gt;マクロの引数としてカンマを含む式を指定できるよう、可変引数化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、共用体の指定されたメンバがアクティブかを定数式で判定するための関数として&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_within_lifetime.html&#34;&gt;std::is_within_lifetime()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、仮想継承の関係を判定する&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_virtual_base_of.html&#34;&gt;std::is_virtual_base_of&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;../reference/type_traits/integral_constant.html&#34;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt;クラスを置き換える定数ラッパーとして&lt;code&gt;&lt;a href=&#34;../reference/type_traits/constant_wrapper.md.nolink&#34;&gt;std::constant_wrapper&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;制約&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;間接実行に関連する制約から、共通参照の要件を削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirectly_unary_invocable.html&#34;&gt;std::indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirectly_unary_invocable.html&#34;&gt;std::indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirect_unary_predicate.html&#34;&gt;std::indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirect_binary_predicate.html&#34;&gt;std::indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirect_equivalence_relation.html&#34;&gt;std::indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/iterator/indirect_strict_weak_order.html&#34;&gt;std::indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_trivial.html&#34;&gt;std::is_trivial&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;ul&gt;
&lt;li&gt;これは&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_trivially_copyable.html&#34;&gt;std::is_trivially_copyable&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/type_traits/is_trivially_default_constructible.html&#34;&gt;std::is_trivially_default_constructible&lt;/a&gt;&lt;/code&gt;の2つが合わさったものであるが、それらは異なる状況で必要になるものであった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/atomic/memory_order.html&#34;&gt;std::memory_order::consume&lt;/a&gt;&lt;/code&gt;と、それに関連して&lt;code&gt;&lt;a href=&#34;../reference/atomic/kill_dependency.html&#34;&gt;std::kill_dependency()&lt;/a&gt;&lt;/code&gt;を非推奨化し、&lt;code&gt;&lt;a href=&#34;cpp11/attributes.html&#34;&gt;[[carries_dependency]]&lt;/a&gt;&lt;/code&gt;属性を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path.html&#34;&gt;std::filesystem::path&lt;/a&gt;&lt;/code&gt;クラスの以下のメンバ関数を非推奨化&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/string.html&#34;&gt;string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/filesystem/path/generic_string.html&#34;&gt;generic_string()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;非推奨の取り消し&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::polymorphic_allocator&lt;/a&gt;::&lt;a href=&#34;../reference/memory_resource/polymorphic_allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;の非推奨を取り消し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98から非推奨となっていた&lt;code&gt;&amp;lt;strstream&amp;gt;&lt;/code&gt;ライブラリを削除&lt;/li&gt;
&lt;li&gt;C++17から非推奨となっていたUnicode変換ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;と、&lt;code&gt;&lt;a href=&#34;../reference/locale/wstring_convert.html&#34;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/locale/wbuffer_convert.html&#34;&gt;std::wbuffer_convert&lt;/a&gt;&lt;/code&gt;クラスを削除&lt;/li&gt;
&lt;li&gt;C++20から非推奨となっていた、&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;../reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;のパラメータなしのオーバーロードを削除&lt;/li&gt;
&lt;li&gt;C++20から非推奨となっていた&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;に対する、以下の古いアトミック操作関数のオーバーロードを削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_is_lock_free.html&#34;&gt;std::atomic_is_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_load.html&#34;&gt;std::atomic_load&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_load_explicit.html&#34;&gt;std::atomic_load_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_store.html&#34;&gt;std::atomic_store&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_store_explicit.html&#34;&gt;std::atomic_store_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_exchange.html&#34;&gt;std::atomic_exchange&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_exchange_explicit.html&#34;&gt;std::atomic_exchange_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_compare_exchange_weak.html&#34;&gt;std::atomic_compare_exchange_weak&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_compare_exchange_strong.html&#34;&gt;std::atomic_compare_exchange_strong&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.html&#34;&gt;std::atomic_compare_exchange_weak_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.html&#34;&gt;std::atomic_compare_exchange_strong_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++23から非推奨となっていた、&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;のメンバ型&lt;code&gt;is_always_equal&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;取り決め&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C言語の参照をC17からC23に更新&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった組み込み配列の比較を削除 [P2865R6] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/remove_deprecated_array_comparisons.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:lang/cpp26/remove_deprecated_array_comparisons.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/remove_deprecated_array_comparisons.md b/lang/cpp26/remove_deprecated_array_comparisons.md
index 83fff0fd0..308150ca1 100644
--- a/lang/cpp26/remove_deprecated_array_comparisons.md
+++ b/lang/cpp26/remove_deprecated_array_comparisons.md
@@ -18,7 +18,7 @@ C++20での[三方比較演算子](/lang/cpp20/consistent_comparison.md)の導
 int arr1[5];
 int arr2[5];
 bool same = arr1 == arr2; // C++20: 非推奨、C++26: エラー。
-                          // &amp;amp;arr[0] == &amp;amp;arr[1]と同じ。
+                          // &amp;amp;arr1[0] == &amp;amp;arr2[0]と同じ。
                           // 配列の要素は比較されない
 auto cmp = arr1 &amp;lt;=&amp;gt; arr2; // エラー！
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_find -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_adjacent_find.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_adjacent_find.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_adjacent_find.md b/reference/algorithm/ranges_adjacent_find.md
index 4685f276c..e9b81315a 100644
--- a/reference/algorithm/ranges_adjacent_find.md
+++ b/reference/algorithm/ranges_adjacent_find.md
@@ -51,7 +51,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` 内にあるイテレータ i について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *(i + 1))) != false` であるような最初のイテレータを返す。
+`[first,last)` 内にあるイテレータ i について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *(i + 1))) != false` であるような最初のイテレータを返す。
 
 もしそのようなイテレータが見つからなかった場合は `last` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_all_of.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index 09cb6a9a9..861c19bff 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -37,7 +37,7 @@ namespace std::ranges {
     - `Pred`は`R`のイテレータを`Proj`で射影した値を受け取る[単項述語](/reference/iterator/indirect_unary_predicate.md)である
 
 ## 戻り値
-`[first,last)` あるいは `r` が空であったり、その範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` である場合は `true` を返し、そうでない場合は `false` を返す。
+`[first,last)` あるいは `r` が空であったり、その範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` である場合は `true` を返し、そうでない場合は `false` を返す。
 
 ## 計算量
 最大で `last - first` 回 `proj` と `pred` を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_any_of.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
index 77e2ffd1e..25e3f53fb 100644
--- a/reference/algorithm/ranges_any_of.md
+++ b/reference/algorithm/ranges_any_of.md
@@ -38,7 +38,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` になるような要素があれば`true`を返し、そうでなければ`false`を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` になるような要素があれば`true`を返し、そうでなければ`false`を返す。
 `[first,last)` あるいは `r` の範囲が空の場合は`false`を返す。
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_count_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count_if.md b/reference/algorithm/ranges_count_if.md
index e4881886a..265ff9c5a 100644
--- a/reference/algorithm/ranges_count_if.md
+++ b/reference/algorithm/ranges_count_if.md
@@ -39,7 +39,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` であるイテレータの数を返す
+`[first,last)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` であるイテレータの数を返す
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ends_with -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_ends_with.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_ends_with.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_ends_with.md b/reference/algorithm/ranges_ends_with.md
index 2f32e02f3..4b15e622c 100644
--- a/reference/algorithm/ranges_ends_with.md
+++ b/reference/algorithm/ranges_ends_with.md
@@ -55,9 +55,9 @@ namespace std::ranges {
 * (1): 
     * `N1 = last1 - first1`, `N2 = last2 - first2` とする。
     * `N1 &amp;lt; N2` のとき、`false`
-    * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`std::move`](/reference/utility/move.md)`(first1) + (N1 - N2), last1, `[`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2)`
+    * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`std::move`](/reference/utility/move.md)`(first1) + (N1 - N2), last1,` [`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2)`
 * (2): 
-    * `N1 = `[`ranges::distance`](/reference/iterator/ranges_distance.md)`(r1)`, `N2 = `[`ranges::distance`](/reference/iterator/ranges_distance.md)`(r2)` とする。
+    * `N1 =` [`ranges::distance`](/reference/iterator/ranges_distance.md)`(r1)`, `N2 =` [`ranges::distance`](/reference/iterator/ranges_distance.md)`(r2)` とする。
     * `N1 &amp;lt; N2` のとき、`false`
     * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`ranges::drop_view`](/reference/ranges/drop_view.md)`(`[`ranges::ref_view`](/reference/ranges/ref_view.md)`(r1), N1 - N2), r2, pred, proj1, proj2)`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_equal.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal.md b/reference/algorithm/ranges_equal.md
index e69f26008..d3a0c6d14 100644
--- a/reference/algorithm/ranges_equal.md
+++ b/reference/algorithm/ranges_equal.md
@@ -49,7 +49,7 @@ namespace std::ranges {
 ## 戻り値
 2つの範囲の長さを定数時間で求められ、もし `last1 - first1 != last2 - first2` であれば、`false` を返す。
 
-そうでない場合、`[first1,last1)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + (i - first1)))) != false` が全てのイテレータ `i` について満たされているのであれば `true` を返す。  
+そうでない場合、`[first1,last1)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + (i - first1)))) != false` が全てのイテレータ `i` について満たされているのであれば `true` を返す。  
 そうでない場合は `false` を返す。
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_equal_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal_range.md b/reference/algorithm/ranges_equal_range.md
index 3b0e59e80..d97ab1578 100644
--- a/reference/algorithm/ranges_equal_range.md
+++ b/reference/algorithm/ranges_equal_range.md
@@ -79,7 +79,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`{`[`ranges::lower_bound`](ranges_lower_bound.md)`(first, last, value, comp, proj), `[`ranges::upper_bound`](ranges_upper_bound.md)`(first, last, value, comp, proj)}`
+`{`[`ranges::lower_bound`](ranges_lower_bound.md)`(first, last, value, comp, proj),` [`ranges::upper_bound`](ranges_upper_bound.md)`(first, last, value, comp, proj)}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_end -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_end.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_end.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_end.md b/reference/algorithm/ranges_find_end.md
index ef0bc69de..fb9caa812 100644
--- a/reference/algorithm/ranges_find_end.md
+++ b/reference/algorithm/ranges_find_end.md
@@ -46,7 +46,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-- (1): `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の全ての整数 `n` について、それぞれ `*(i + n) == *(first2 + n)` もしくは `invoke(pred, invoke(proj1, *(i + n)), invoke(proj2, *(first2 + n)))) != false` であるようなサブシーケンスを探し、見つかった **最後の** サブシーケンス`{i, i + (i == last1 ? 0 : last2 - first2)}`を返す。そのようなイテレータが見つからない、もしくは `[first2,last2)` が空である場合は `{last1, last1}` を返す。
+- (1): `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の全ての整数 `n` について、それぞれ `*(i + n) == *(first2 + n)` もしくは `invoke(pred, invoke(proj1, *(i + n)), invoke(proj2, *(first2 + n))) != false` であるようなサブシーケンスを探し、見つかった **最後の** サブシーケンス`{i, i + (i == last1 ? 0 : last2 - first2)}`を返す。そのようなイテレータが見つからない、もしくは `[first2,last2)` が空である場合は `{last1, last1}` を返す。
 - (2): `first1 = begin(r1)`, `last1 = end(r1)`, `first2 = begin(r2)`, `last2 = end(r2)`の下で(1)と等しい。
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_first_of.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_first_of.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_first_of.md b/reference/algorithm/ranges_find_first_of.md
index cf2c7a805..b385eb8f3 100644
--- a/reference/algorithm/ranges_find_first_of.md
+++ b/reference/algorithm/ranges_find_first_of.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、`[first2,last2)` 内のイテレータ `j` について、どれかが [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == true` であるような最初のイテレータを返す。
+`[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、`[first2,last2)` 内のイテレータ `j` について、どれかが [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == true` であるような最初のイテレータを返す。
 
 そのようなイテレータが見つからない、もしくは `[first2,last2)` が空である場合は `last1` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if.md b/reference/algorithm/ranges_find_if.md
index 132209765..e6cf396a7 100644
--- a/reference/algorithm/ranges_find_if.md
+++ b/reference/algorithm/ranges_find_if.md
@@ -35,7 +35,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if_not -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if_not.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_if_not.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if_not.md b/reference/algorithm/ranges_find_if_not.md
index e2b25e41c..250693822 100644
--- a/reference/algorithm/ranges_find_if_not.md
+++ b/reference/algorithm/ranges_find_if_not.md
@@ -35,7 +35,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_last_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_last_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_last_if.md b/reference/algorithm/ranges_find_last_if.md
index 33aa02e73..3364c92a8 100644
--- a/reference/algorithm/ranges_find_last_if.md
+++ b/reference/algorithm/ranges_find_last_if.md
@@ -34,7 +34,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_if_not -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_last_if_not.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_find_last_if_not.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_last_if_not.md b/reference/algorithm/ranges_find_last_if_not.md
index 1ffbed588..fbbc83a07 100644
--- a/reference/algorithm/ranges_find_last_if_not.md
+++ b/reference/algorithm/ranges_find_last_if_not.md
@@ -34,7 +34,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_for_each.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
index b68d9e5dc..e9a3ef5a9 100644
--- a/reference/algorithm/ranges_for_each.md
+++ b/reference/algorithm/ranges_for_each.md
@@ -48,7 +48,7 @@ namespace std::ranges {
 この他にFunは[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであることが要求される。
 
 ## 効果
-`[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
+`[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
 
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each_n -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each_n.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_for_each_n.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each_n.md b/reference/algorithm/ranges_for_each_n.md
index d6eb16ba9..92b0e79c7 100644
--- a/reference/algorithm/ranges_for_each_n.md
+++ b/reference/algorithm/ranges_for_each_n.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 `n &amp;gt;= 0`
 
 ## 効果
-イテレータ範囲`[first, first + n)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。
+イテレータ範囲`[first, first + n)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。
 
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_max.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_max.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_max.md b/reference/algorithm/ranges_max.md
index 862861ece..32ca3a62f 100644
--- a/reference/algorithm/ranges_max.md
+++ b/reference/algorithm/ranges_max.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の値
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の値
 
 ## 備考
 - 等価な要素が 2 つ以上あった場合には、最も左の要素を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_element -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_max_element.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_max_element.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_max_element.md b/reference/algorithm/ranges_max_element.md
index 9d00ee5d4..eebec0f04 100644
--- a/reference/algorithm/ranges_max_element.md
+++ b/reference/algorithm/ranges_max_element.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の要素を指すイテレータ
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の要素を指すイテレータ
 
 ## 計算量
 [`max`](max.md)`((last - first) - 1, 0)`回の比較を行う
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_min.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min.md b/reference/algorithm/ranges_min.md
index 7282981d4..f3ec69f0d 100644
--- a/reference/algorithm/ranges_min.md
+++ b/reference/algorithm/ranges_min.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の値
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の値
 
 ## 備考
 - 等価な要素が 2 つ以上あった場合には、最も左の要素を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_element -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_element.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_min_element.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_element.md b/reference/algorithm/ranges_min_element.md
index c81c1e676..e7c039f0f 100644
--- a/reference/algorithm/ranges_min_element.md
+++ b/reference/algorithm/ranges_min_element.md
@@ -38,7 +38,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の要素を指すイテレータ
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の要素を指すイテレータ
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_minmax.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index 21a8fc127..2f678c217 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -56,7 +56,7 @@ minmax_result {
 ```
 * minmax_result[link ranges_min_max_result.md]
 
-それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
+それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
 
 ## 計算量
 - 2値比較バージョンは1操作。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax_element.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_minmax_element.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax_element.md b/reference/algorithm/ranges_minmax_element.md
index e7e170459..a243db083 100644
--- a/reference/algorithm/ranges_minmax_element.md
+++ b/reference/algorithm/ranges_minmax_element.md
@@ -47,7 +47,7 @@ minmax_element_result {
 ```
 * minmax_element_result[link ranges_min_max_result.md]
 
-それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
+それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
 
 ## 計算量
 `n` を範囲の要素数とする場合、[`max`](max.md)`(floor(3(n - 1) / 2), 0)` 回の述語適用を行う。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mismatch -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_mismatch.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_mismatch.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_mismatch.md b/reference/algorithm/ranges_mismatch.md
index f5aedb6f8..e45983580 100644
--- a/reference/algorithm/ranges_mismatch.md
+++ b/reference/algorithm/ranges_mismatch.md
@@ -57,7 +57,7 @@ namespace std::ranges {
 
 - `j`が範囲`[first2, last2)`に含まれており、
 - `!(*i == *j)` もしくは
-- [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = i, .in2 = j }` を返す。
+- [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = i, .in2 = j }` を返す。
 
 そのようなイテレータが見つからなかった場合は [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = last1, .in2 = first2 + (last1 - first1)}` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next_permutation -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_next_permutation.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_next_permutation.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_next_permutation.md b/reference/algorithm/ranges_next_permutation.md
index 0c18b0c5d..5ce95dbe5 100644
--- a/reference/algorithm/ranges_next_permutation.md
+++ b/reference/algorithm/ranges_next_permutation.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 
 ## 効果
 `[first, last)`の範囲を次の順列に変換する。
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、次の順列が発見される。
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、次の順列が発見される。
 
 順列の辞書順とは、同じ長さ`N`の順列`a, b`があった時、その最上位の項から見た時に`ai != bi`となる最初の`i`番目の項について、`ai &amp;lt; bi`（もしくは`comp(ai, bi) == true`）となる時に`a &amp;lt; b`とするように定めた順序のことである。例えばこれは、各項（`ai, bi`）が`0 ~ 9`の数であるとすれば、それらをそのまま並べて構成した数の通常の大小関係に等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_none_of.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
index 6521578ba..9d3bc4f7a 100644
--- a/reference/algorithm/ranges_none_of.md
+++ b/reference/algorithm/ranges_none_of.md
@@ -42,7 +42,7 @@ namespace std::ranges {
     - `Pred`は`R`のイテレータを`Proj`で射影した値を受け取る[単項述語](/reference/iterator/indirect_unary_predicate.md)である
 
 ## 戻り値
-`[first,last)` あるいは `r` が空であったり、範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `false` である場合は `true` を返し、そうでない場合は `false` を返す。
+`[first,last)` あるいは `r` が空であったり、範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `false` である場合は `true` を返し、そうでない場合は `false` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sort_copy -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partial_sort_copy.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_partial_sort_copy.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partial_sort_copy.md b/reference/algorithm/ranges_partial_sort_copy.md
index 538b68a6a..bb5a1dd34 100644
--- a/reference/algorithm/ranges_partial_sort_copy.md
+++ b/reference/algorithm/ranges_partial_sort_copy.md
@@ -58,7 +58,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 効果
-`N = `[`min`](/reference/algorithm/min.md)`(last - first, result_last - result_first)` とする。
+`N =` [`min`](/reference/algorithm/min.md)`(last - first, result_last - result_first)` とする。
 
 `[first,last)` にある要素の中から、`N` 個の要素をソート済みの状態で `[result_first,result_first + N)` に配置する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev_permutation -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_prev_permutation.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_prev_permutation.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_prev_permutation.md b/reference/algorithm/ranges_prev_permutation.md
index 05d947f3a..b22921f44 100644
--- a/reference/algorithm/ranges_prev_permutation.md
+++ b/reference/algorithm/ranges_prev_permutation.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 ## 効果
 `[first, last)`の範囲を前の順列に変換する。
 
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、前の順列が発見される。
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、前の順列が発見される。
 
 ## 戻り値
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_copy.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_remove_copy.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_copy.md b/reference/algorithm/ranges_remove_copy.md
index 5766aa8f0..68e13f9ee 100644
--- a/reference/algorithm/ranges_remove_copy.md
+++ b/reference/algorithm/ranges_remove_copy.md
@@ -85,7 +85,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 事前条件
-- `[first,last)` と `[result,result + (last - first)` は重なってはならない。
+- `[first,last)` と `[result,result + (last - first))` は重なってはならない。
 
 ## 効果
 `[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(proj, *i) == value` でない要素を `result` へコピーする
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_copy_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_remove_copy_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_copy_if.md b/reference/algorithm/ranges_remove_copy_if.md
index 810f918c2..2f0c10842 100644
--- a/reference/algorithm/ranges_remove_copy_if.md
+++ b/reference/algorithm/ranges_remove_copy_if.md
@@ -43,7 +43,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 事前条件
-- `[first,last)` と `[result,result + (last - first)` は重なってはならない。
+- `[first,last)` と `[result,result + (last - first))` は重なってはならない。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_remove_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_if.md b/reference/algorithm/ranges_remove_if.md
index 5d3b31601..6ee0da6da 100644
--- a/reference/algorithm/ranges_remove_if.md
+++ b/reference/algorithm/ranges_remove_if.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 
 ## 効果
-`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` である要素を取り除き、有効な要素を範囲の前に寄せる。
+`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` である要素を取り除き、有効な要素を範囲の前に寄せる。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_search.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search.md b/reference/algorithm/ranges_search.md
index 51a1b2d16..4ff7e480e 100644
--- a/reference/algorithm/ranges_search.md
+++ b/reference/algorithm/ranges_search.md
@@ -46,7 +46,7 @@ namespace std::ranges {
 
 ## 戻り値
 - (1) :
-    - `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *(i + n)), `[`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + n)))` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
+    - `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *(i + n)),` [`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + n)))` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
     - そのようなイテレータが見つからない場合は `{last1, last1}` を返し、`[first2,last2)` が空である場合には `{first1, first1}` を返す。
 - (2): `first1 = begin(r1)`, `last1 = end(r1)`, `first2 = begin(r2)`, `last2 = end(r2)`の下で(1)と等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search_n.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_search_n.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search_n.md b/reference/algorithm/ranges_search_n.md
index 52816a0f5..a14e481c4 100644
--- a/reference/algorithm/ranges_search_n.md
+++ b/reference/algorithm/ranges_search_n.md
@@ -66,7 +66,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 戻り値
-`[first,last-count)` 内のイテレータ `i` があるとき、0 以上 `count` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *(i + n)), value)` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
+`[first,last-count)` 内のイテレータ `i` があるとき、0 以上 `count` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *(i + n)), value)` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
 
 そのようなイテレータが見つからない場合は `{last, last}` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_with -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_starts_with.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_starts_with.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_starts_with.md b/reference/algorithm/ranges_starts_with.md
index 3dae90c87..a3e605434 100644
--- a/reference/algorithm/ranges_starts_with.md
+++ b/reference/algorithm/ranges_starts_with.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 ## 戻り値
 
-[`ranges::mismatch`](ranges_mismatch.md)`(`[`std::move`](/reference/utility/move.md)`(first1), last1, `[`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2).in2 == last2`
+[`ranges::mismatch`](ranges_mismatch.md)`(`[`std::move`](/reference/utility/move.md)`(first1), last1,` [`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2).in2 == last2`
 
 ## 計算量
 最大で `min(last1 - first1, last2 - first2)` 回の対応する述語が適用される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_ranges -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_swap_ranges.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/ranges_swap_ranges.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_swap_ranges.md b/reference/algorithm/ranges_swap_ranges.md
index 0b17e98b7..eca99ff9a 100644
--- a/reference/algorithm/ranges_swap_ranges.md
+++ b/reference/algorithm/ranges_swap_ranges.md
@@ -55,7 +55,7 @@ swap_ranges_result {
 ```
 * swap_ranges_result[link ranges_in_in_result.md]
 
-ただし、`M = `[`min`](ranges_min.md)`(last1 - first1, last2 - first2)` とする。
+ただし、`M =` [`min`](ranges_min.md)`(last1 - first1, last2 - first2)` とする。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/remove_copy.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/remove_copy.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/remove_copy.md b/reference/algorithm/remove_copy.md
index a7d0807a7..0d68759f1 100644
--- a/reference/algorithm/remove_copy.md
+++ b/reference/algorithm/remove_copy.md
@@ -62,7 +62,7 @@ namespace std {
 
 
 ## 事前条件
-- `[first,last)` と `[result,result + (last - first)` は重なってはならない。
+- `[first,last)` と `[result,result + (last - first))` は重なってはならない。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_copy_if -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/remove_copy_if.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/algorithm/remove_copy_if.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/remove_copy_if.md b/reference/algorithm/remove_copy_if.md
index aafd67fa6..02d1c216b 100644
--- a/reference/algorithm/remove_copy_if.md
+++ b/reference/algorithm/remove_copy_if.md
@@ -39,7 +39,7 @@ namespace std {
 
 
 ## 事前条件
-- `[first,last)` と `[result,result + (last - first)` は重なってはならない
+- `[first,last)` と `[result,result + (last - first))` は重なってはならない
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_wait_explicit -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_wait_explicit.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/atomic/atomic_flag_wait_explicit.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_wait_explicit.md b/reference/atomic/atomic_flag_wait_explicit.md
index 7baa5cd5f..bf2c1275a 100644
--- a/reference/atomic/atomic_flag_wait_explicit.md
+++ b/reference/atomic/atomic_flag_wait_explicit.md
@@ -106,8 +106,8 @@ int main()
 }
 ```
 * std::atomic_flag_wait_explicit[color ff0000]
-* std::atomic_flag_test_and_set_explicit[link atomic_flag_test_and_set.md]
-* std::atomic_flag_clear_explicit[link atomic_flag_clear.md]
+* std::atomic_flag_test_and_set_explicit[link atomic_flag_test_and_set_explicit.md]
+* std::atomic_flag_clear_explicit[link atomic_flag_clear_explicit.md]
 * std::atomic_flag_notify_one[link /reference/atomic/atomic_flag_notify_one.md]
 * ATOMIC_FLAG_INIT[link /reference/atomic/atomic_flag_init.md]
 * std::memory_order[link /reference/atomic/memory_order.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assert -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cassert/assert.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cassert/assert.md b/reference/cassert/assert.md
index 0971cf000..edb1e9195 100644
--- a/reference/cassert/assert.md
+++ b/reference/cassert/assert.md
@@ -30,7 +30,7 @@
     - C++03 : パラメータの式を評価し、
     - C++26 : 可変引数パラメータ`__VA_ARGS__`を`bool`に変換し、
     - 真に評価された場合は、なにもしない
-    - そうでない場合（`0`と等しい場合）、式をテキスト化したもの、（[`std::source_location`](/reference/source_location/source_location.md)`::`[`current()`](/reference/source_location/source_location/current.md)で取得できるような) ソースファイル名、行番号、関数名を標準エラー出力に処理系定義の書式で書き込み、[`abort()`](/reference/cstdlib/abort.md)関数を呼び出してプログラムを異常終了させる
+    - そうでない場合（`0`と等しい場合）、式をテキスト化したもの、（[`std::source_location`](/reference/source_location/source_location.md)`::`[`current()`](/reference/source_location/source_location/current.md)で取得できるような）ソースファイル名、行番号、関数名を標準エラー出力に処理系定義の書式で書き込み、[`abort()`](/reference/cstdlib/abort.md)関数を呼び出してプログラムを異常終了させる
 - 無効な場合:
     - パラメータの式は評価はされず、なにもしない
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/charconv/from_chars.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 407346b19..dbdf19242 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -287,7 +287,7 @@ int main()
     const char str[] = &amp;#34;00000123456789 is decimal&amp;#34;;
 
     //(1) 10進数文字列からintへ変換
-    //変換変換の成否判定に`operator bool`を使用
+    //変換の成否判定に`operator bool`を使用
     if (int value{}; std::from_chars(std::begin(str), std::end(str), value)) {
       std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/chrono/format.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index afb745343..a630dc839 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -45,7 +45,7 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%b` | ロケール依存の月の略称。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;April&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;` |
-| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | 2020年では`&amp;#34;20&amp;#34;`) |
+| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | 2020年では`&amp;#34;20&amp;#34;` |
 | `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%Od`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;24&amp;#34;` |
 | `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/24/20&amp;#34;` |
 | `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%Oe`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34; 1&amp;#34;` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>system_clock -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/chrono/system_clock.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/chrono/system_clock.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/system_clock.md b/reference/chrono/system_clock.md
index 5cd997425..ec323b9c0 100644
--- a/reference/chrono/system_clock.md
+++ b/reference/chrono/system_clock.md
@@ -22,8 +22,8 @@ namespace chrono {
 
 `system_clock`のエポックは、以下である：
 
-- C++17 以前の場合、`system_clock` のエポックがどの時間を指しているかは未規定だが、ほとんどの処理系は UNIX 時間（1970年1月1日0時0分0秒)を指している
-- C++20 以降の場合、`system_clock` のエポックは必ず UNIX 時間（1970年1月1日0時0分0秒)を指す
+- C++17 以前の場合、`system_clock` のエポックがどの時間を指しているかは未規定だが、ほとんどの処理系は UNIX 時間（1970年1月1日0時0分0秒）を指している
+- C++20 以降の場合、`system_clock` のエポックは必ず UNIX 時間（1970年1月1日0時0分0秒）を指す
 
 
 ### うるう秒の扱い
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>year_month_day -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/chrono/year_month_day.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day.md b/reference/chrono/year_month_day.md
index 13001ffd7..8615859ba 100644
--- a/reference/chrono/year_month_day.md
+++ b/reference/chrono/year_month_day.md
@@ -226,7 +226,7 @@ chrono::year_month_day unix_time_to_ymd(std::time_t unixtime) {
 
 int main()
 {
-  // UNIX時間での現在日時を取得　
+  // UNIX時間での現在日時を取得
   std::time_t now = std::time(nullptr);
   chrono::year_month_day date = unix_time_to_ymd(now);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>beta -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/beta.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/beta.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/beta.md b/reference/cmath/beta.md
index 08b495321..ce97c597d 100644
--- a/reference/cmath/beta.md
+++ b/reference/cmath/beta.md
@@ -91,7 +91,7 @@ beta(2, 4)      = 0.05
 ### 備考
 #### GCC (libstdc++)
 GCC 7.1.0–8.0.0 では `beta` は [`exp`](exp.md) と [`lgamma`](lgamma.md) を用いて
-$ |\mathrm{B}(x, y)| = \exp(\ln |\Gamma(x) \Gamma(y) / \Gamma(x + y)|)) $
+$ |\mathrm{B}(x, y)| = \exp(\ln |\Gamma(x) \Gamma(y) / \Gamma(x + y)|) $
 を計算する。
 `x &amp;lt; 0 || y &amp;lt; 0` でも定義域エラーを報告せずに値を返すが、戻り値は必ず正になる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fabs -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fabs.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/fabs.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fabs.md b/reference/cmath/fabs.md
index 62bbf60f1..80215e8eb 100644
--- a/reference/cmath/fabs.md
+++ b/reference/cmath/fabs.md
@@ -51,7 +51,7 @@ namespace std {
 
 ## 備考
 - $$ f(x) = | x | $$
-- C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)` != false`）、以下の規定が追加される。
+- C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md) `!= false`）、以下の規定が追加される。
 - `value = ±0` の場合、戻り値は `+0` となる。
 - `value = ±∞` の場合、戻り値は `+∞` となる。
 - 戻り値は正確で、現在の丸め方式には依存しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_NAN -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fp_nan.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/fp_nan.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fp_nan.md b/reference/cmath/fp_nan.md
index d681b3a44..ca001cc1d 100644
--- a/reference/cmath/fp_nan.md
+++ b/reference/cmath/fp_nan.md
@@ -9,7 +9,7 @@
 * integer-constant-expression[italic]
 
 ## 概要
-浮動小数点数が `NaN` であることを表すを表す整数定数式。
+浮動小数点数が `NaN` であることを表す整数定数式。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llrint -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llrint.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/llrint.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llrint.md b/reference/cmath/llrint.md
index f9ce5d8ae..fa84b6320 100644
--- a/reference/cmath/llrint.md
+++ b/reference/cmath/llrint.md
@@ -42,7 +42,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - 丸めの結果が `long long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
     - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
-- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は四捨五入ではなく、最近接偶数への丸めであることに注意。（例を参照）  
     四捨五入が必要であれば、[`llround`](llround.md) を使用すること。（ただし、[`llround`](llround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lrint -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lrint.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/lrint.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lrint.md b/reference/cmath/lrint.md
index 275b9f3ae..62e4d6c0a 100644
--- a/reference/cmath/lrint.md
+++ b/reference/cmath/lrint.md
@@ -41,7 +41,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - 丸めの結果が `long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
     - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
-- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。  
     四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nearbyint -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nearbyint.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/nearbyint.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nearbyint.md b/reference/cmath/nearbyint.md
index b12acb459..4f47d9ab5 100644
--- a/reference/cmath/nearbyint.md
+++ b/reference/cmath/nearbyint.md
@@ -38,12 +38,12 @@ namespace std {
 
 
 ## 備考
-- 本関数と [`rint`](rint.md) は戻り値は同一であるが、本関数は引数 `x` が戻り値と異なっていても [`FE_INEXACT`](../cfenv/fe_invalid.md) は発生しないが、[`rint`](rint.md) は発生する可能性がある点のみ動作が異なる。
+- 本関数と [`rint`](rint.md) は戻り値は同一であるが、本関数は引数 `x` が戻り値と異なっていても [`FE_INEXACT`](../cfenv/fe_inexact.md) は発生しないが、[`rint`](rint.md) は発生する可能性がある点のみ動作が異なる。
 - 本関数は、C99 の規格にある `nearbyint`（より正確には `math.h` ヘッダの `nearbyint`、`nearbyintf`、`nearbyintl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、`±0` を返す。
     - `x = ±∞` の場合、`±∞` を返す。
-- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
 - C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rint -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cmath/rint.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cmath/rint.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/rint.md b/reference/cmath/rint.md
index 00fd095b2..74270d4fc 100644
--- a/reference/cmath/rint.md
+++ b/reference/cmath/rint.md
@@ -44,7 +44,7 @@ namespace std {
     - `x = ±0` の場合、`±0` を返す。
     - `x = ±∞` の場合、`±∞` を返す。
     - 引数 `x` が戻り値と異なってる場合、[`FE_INEXACT`](../cfenv/fe_inexact.md) が発生する。
-- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
 - C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_order -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_order.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/compare/strong_order.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_order.md b/reference/compare/strong_order.md
index 686fcd814..83c666685 100644
--- a/reference/compare/strong_order.md
+++ b/reference/compare/strong_order.md
@@ -27,7 +27,7 @@ namespace std {
 2. `std::strong_order`（本関数オブジェクト）の宣言を含まないコンテキストで、[`strong_ordering`](strong_ordering.md)`(strong_order(a, b))`が呼び出し可能ならば`strong_ordering(strong_order(a, b))`
 
 3. [`decay`](/reference/type_traits/decay.md)を通した`a, b`の型`T`が浮動小数点型の場合、`T`の組み込みの比較演算子による順序と一貫する[`strong_ordering`](strong_ordering.md)の値を返す。  
-   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合、その順序はISO/IEC/IEEE 60559の`totalOrder`による全順序と一致する。
+   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合、その順序はISO/IEC/IEEE 60559の`totalOrder`による全順序と一致する。
 
 4. [`strong_ordering`](strong_ordering.md)`(a &amp;lt;=&amp;gt; b)`が呼び出し可能ならば`strong_ordering(a &amp;lt;=&amp;gt; b)`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_ordering -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/compare/strong_ordering.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering.md b/reference/compare/strong_ordering.md
index f0a37196d..ec99dda78 100644
--- a/reference/compare/strong_ordering.md
+++ b/reference/compare/strong_ordering.md
@@ -22,7 +22,7 @@ namespace std {
   //静的メンバ定数の定義（初期化している値は説明のためのもの）
   inline constexpr strong_ordering strong_ordering::less(-1);
   inline constexpr strong_ordering strong_ordering::equal(0);
-  inline constexpr strong_ordering strong_ordering::equivalent(0));
+  inline constexpr strong_ordering strong_ordering::equivalent(0);
   inline constexpr strong_ordering strong_ordering::greater(1);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_order -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_order.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/compare/weak_order.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_order.md b/reference/compare/weak_order.md
index cc44775a8..8af4f6595 100644
--- a/reference/compare/weak_order.md
+++ b/reference/compare/weak_order.md
@@ -28,7 +28,7 @@ namespace std {
 2. `std::weak_order`（本関数オブジェクト）の宣言を含まないコンテキストで、[`weak_ordering`](weak_ordering.md)`(weak_order(a, b))`が呼び出し可能ならば`weak_ordering(weak_order(a, b))`
 
 3. [`decay`](/reference/type_traits/decay.md)を通した`a, b`の型`T`が浮動小数点型の場合、`T`の組み込みの比較演算子および[`strong_order`](strong_order.md)による順序と一貫する[`weak_ordering`](weak_ordering.md)の値を返す。  
-   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合、追加で以下の同値類の順序に従った順序付けを行う。
+   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合、追加で以下の同値類の順序に従った順序付けを行う。
 
     1. 全ての`-NaN`
     2. `-Inf`
@@ -87,7 +87,7 @@ namespace std {
 
 ## 備考
 
-[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合の浮動小数点数の比較において、各同値類間の順序は以下のようになる。
+[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合の浮動小数点数の比較において、各同値類間の順序は以下のようになる。
 
 {全ての`-NaN`} ` &amp;lt; ` {`-Inf`} ` &amp;lt; ` {負の正規化数} ` &amp;lt; ` {負の非正規化数} ` &amp;lt; ` {`±0.0`} ` &amp;lt; ` {正の非正規化数} ` &amp;lt; ` {正の正規化数} ` &amp;lt; ` {`+Inf`} ` &amp;lt; ` {全ての`+NaN`}
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pow -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/pow.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/complex/complex/pow.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/pow.md b/reference/complex/complex/pow.md
index 8135bf4e0..92f483eaf 100644
--- a/reference/complex/complex/pow.md
+++ b/reference/complex/complex/pow.md
@@ -120,8 +120,8 @@ pow( (1,2), (3,4) ) = (0.12901,0.0339241)
 
 ### 備考
 - libstdc++ では、バージョンによって C++11 モードの挙動が異なる。
-	- 4.3.6 では第 2 引数が `int` のオーバーロード (4) が無効化されていない。また、追加のオーバーロード (5) は `complex&amp;lt;T&amp;gt;` でない方の引数の型が算術型でなくても、算術型への暗黙の型変換が可能であれば、適用されてしまう。さらに、追加のオーバーロード (5) の結果型は、引数の型が `complex&amp;lt;float&amp;gt;` と整数型の場合、`complex&amp;lt;float&amp;gt;`　になってしまう。
-	- 4.4.7、4.5.4 では、第 2 引数が `int` のオーバーロード (4) は無効化されているが、追加のオーバーロード (5) は `complex&amp;lt;T&amp;gt;` でない方の引数の型が算術型でなくても、算術型への暗黙の型変換が可能であれば、適用されてしまう。さらに、追加のオーバーロード (5) の結果型は、引数の型が `complex&amp;lt;float&amp;gt;` と整数型の場合、`complex&amp;lt;float&amp;gt;`　になってしまう。
+	- 4.3.6 では第 2 引数が `int` のオーバーロード (4) が無効化されていない。また、追加のオーバーロード (5) は `complex&amp;lt;T&amp;gt;` でない方の引数の型が算術型でなくても、算術型への暗黙の型変換が可能であれば、適用されてしまう。さらに、追加のオーバーロード (5) の結果型は、引数の型が `complex&amp;lt;float&amp;gt;` と整数型の場合、`complex&amp;lt;float&amp;gt;` になってしまう。
+	- 4.4.7、4.5.4 では、第 2 引数が `int` のオーバーロード (4) は無効化されているが、追加のオーバーロード (5) は `complex&amp;lt;T&amp;gt;` でない方の引数の型が算術型でなくても、算術型への暗黙の型変換が可能であれば、適用されてしまう。さらに、追加のオーバーロード (5) の結果型は、引数の型が `complex&amp;lt;float&amp;gt;` と整数型の場合、`complex&amp;lt;float&amp;gt;` になってしまう。
 	- 4.6.4 から 4.8.2 の間は第 2 引数が `int` のオーバーロード (4) は無効化されている。また、追加のオーバーロード (5) は、引数の型が `complex&amp;lt;T&amp;gt;` と算術型でなければ適用されない。（最も規格に準拠した挙動である）
 	- 4.9.0 では第 2 引数が `int` のオーバーロード (5) は無効化されていないが、追加のオーバーロード (5) は、引数の型が `complex&amp;lt;T&amp;gt;` と算術型でなければ適用されない。
 	なお、いずれのバージョンでも C++03 モードでは追加のオーバーロード (5) は無効化されている。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>INVOKE -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Invoke.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/concepts/Invoke.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;named requirement&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;INVOKE&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++における関数呼び出しという性質を抽象化しまとめた、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt; を定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++17からは、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt; を実体化した&lt;code&gt;&lt;a href=&#34;../functional/invoke.html&#34;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;関数テンプレートが提供される。&lt;/li&gt;
&lt;li&gt;C++23からは、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;&lt;/code&gt; を実体化した&lt;code&gt;&lt;a href=&#34;../functional/invoke_r.html&#34;&gt;std::invoke_r&lt;/a&gt;&lt;/code&gt;関数テンプレートが提供される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用語定義&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;call-signature&lt;/em&gt; とは、戻り値型に続けて丸カッコの中に0個以上の引数型を並べたものである。 &lt;em&gt;cf.&lt;/em&gt; &lt;code&gt;int ( std::string, int )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-type&lt;/em&gt; とは、関数呼び出し演算子を適用できる型 ( 関数、関数への参照、関数へのポインタ、&lt;code&gt;operator ()&lt;/code&gt; をオーバーロードした型もしくはそれを(直接または間接的に) &lt;code&gt;public&lt;/code&gt; 継承した型 ) もしくはメンバへのポインタ型を指す。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-object&lt;/em&gt; は、 &lt;em&gt;callable-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper-type&lt;/em&gt; は、 &lt;em&gt;callable-object&lt;/em&gt; を保持し、自身に対する関数呼び出し操作が行われたとき、保持しているオブジェクトに委譲する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; は、 &lt;em&gt;call-wrapper-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;target-object&lt;/em&gt; とは、 &lt;em&gt;callable-object&lt;/em&gt; に保持されているオブジェクトのことである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件（C++14まで）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が T 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN, R)&lt;/code&gt; を、 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること、と定義する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; が &lt;em&gt;weak-result-type&lt;/em&gt; を用意している場合、メンバ型 &lt;code&gt;result_type&lt;/code&gt; は&lt;em&gt;target-object&lt;/em&gt; の型 &lt;code&gt;T&lt;/code&gt; に応じて次のように定義される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; がメンバ関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;result_type&lt;/code&gt; という名前のメンバ型を持つとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T::result_type&lt;/code&gt; と等しい。&lt;/li&gt;
&lt;li&gt;どの条件にも当てはまらない場合、 &lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;MoveAssignable&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++17）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;(t1.get().*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;t1.get().*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;が&lt;code&gt;void&lt;/code&gt;かそのcv修飾の場合は、&lt;code&gt;static_cast&amp;lt;void&amp;gt;(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;それ以外の場合は、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;MoveConstructible&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++20）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;(t1.get().*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;t1.get().*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;が&lt;code&gt;void&lt;/code&gt;かそのcv修飾の場合は、&lt;code&gt;static_cast&amp;lt;void&amp;gt;(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;それ以外の場合は、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;Cpp17MoveConstructible&lt;/em&gt; かつ &lt;em&gt;Cpp17Destructible&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++23差分）&lt;/h2&gt;
&lt;p&gt;C++20 における 2. について、次の文言を項目の最後に追加する。この変更は、&lt;code&gt;R&lt;/code&gt;が参照かつ&lt;em&gt;INVOKE&lt;/em&gt;の実行結果が&lt;code&gt;R&lt;/code&gt;に束縛されることで寿命が延長される場合にダングリング参照が作成されてしまう事例を検出するための要件である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../type_traits/reference_converts_from_temporary.html&#34;&gt;reference_converts_from_temporary_v&lt;/a&gt;&amp;lt;R, decltype(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, …, tN))&amp;gt; == true&lt;/code&gt;の場合、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, …, tN)&lt;/code&gt;は&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/Cryolite/status/216814363221303296&#34; target=&#34;_blank&#34;&gt;第1引数がメンバ関数へのポインタの場合でも非静的メンバデータへのポインタの場合でも，第2引数がクラスオブジェクトへの参照の場合でもポインタの場合でもポインタっぽいものの場合でも，なんか知らんけどそれっぽく上手くいく&lt;/a&gt; ように取り計らった操作のことである。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/function.html&#34;&gt;function&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/bind.html&#34;&gt;bind&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/not_fn.html&#34;&gt;not_fn&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../thread/thread.html&#34;&gt;thread&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../future/async.html&#34;&gt;async&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../future/packaged_task.html&#34;&gt;packaged_task&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../mutex/call_once.html&#34;&gt;call_once&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0777r1.pdf&#34; target=&#34;_blank&#34;&gt;P0777R1 Treating Unnecessary &lt;code&gt;decay&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++20から&lt;code&gt;decay_t&lt;/code&gt;を&lt;code&gt;remove_cvref_t&lt;/code&gt;へ変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2136r3.html&#34; target=&#34;_blank&#34;&gt;P2136R3 &lt;code&gt;invoke_r&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assignable_from -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/concepts/assignable_from.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/concepts/assignable_from.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/assignable_from.md b/reference/concepts/assignable_from.md
index 571b8fcae..6bb059909 100644
--- a/reference/concepts/assignable_from.md
+++ b/reference/concepts/assignable_from.md
@@ -27,7 +27,7 @@ namespace std {
 
 これらの`lhs, rhs, lcopy, rcopy`について、以下の条件を満たす場合に限って、型`LHS, RHS`は`assignable_from`のモデルである。
 
-- [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) == `[`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
+- [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) ==` [`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
 - `lhs = rhs;`という式の評価の後で以下のことが成り立っている
     - `rhs`が`lcopy`を参照する非`const` *xvalue*でない（ムーブが起こる自己代入ではない）場合
         - `lhs`は`rcopy`と等値である
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_reference_with -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/concepts/common_reference_with.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/concepts/common_reference_with.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/common_reference_with.md b/reference/concepts/common_reference_with.md
index b34c5de45..75da3c5d1 100644
--- a/reference/concepts/common_reference_with.md
+++ b/reference/concepts/common_reference_with.md
@@ -20,7 +20,7 @@ namespace std {
 
 2つの型`T, U`は以下の全ての条件を満たす場合にのみ、共通の参照型を持つ。
 
-- `C = `[`common_reference_t&amp;lt;T, U&amp;gt;`](/reference/type_traits/common_reference.md)が有効な型である
+- `C =` [`common_reference_t&amp;lt;T, U&amp;gt;`](/reference/type_traits/common_reference.md)が有効な型である
 - 型`T, C`は、[`convertible_to&amp;lt;T, C&amp;gt;`](/reference/concepts/convertible_to.md)のモデルである
 - 型`U, C`は、[`convertible_to&amp;lt;U, C&amp;gt;`](/reference/concepts/convertible_to.md)のモデルである
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equality_comparable -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/concepts/equality_comparable.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/concepts/equality_comparable.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/equality_comparable.md b/reference/concepts/equality_comparable.md
index 668b8078d..63fc1fde0 100644
--- a/reference/concepts/equality_comparable.md
+++ b/reference/concepts/equality_comparable.md
@@ -62,7 +62,7 @@ concept equality_comparable_with =
 - (1) : `T`のオブジェクト`a, b`について次の条件を満たす場合に限って、型`T`は`equality_comparable`のモデルである。
     - `bool(a == b)`は`a, b`の値が等値である場合に`true`となり、それ以外の場合は`false`となる
 
-- (2) :　`const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`型の左辺値`t, u`及び`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U`は`equality_comparable_with`のモデルである。
+- (2) : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`型の左辺値`t, u`及び`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U`は`equality_comparable_with`のモデルである。
     - `bool(t == u) == bool(C(t) == C(u))`が`true`であること
 
 - `weakly-equality-comparable-with` : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`型の左辺値`t, u`について次の条件を満たす場合に限って、型`T, U`は`weakly-equality-comparable-with`のモデルである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>totally_ordered -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/concepts/totally_ordered.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/concepts/totally_ordered.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/totally_ordered.md b/reference/concepts/totally_ordered.md
index e9f34d82b..fb64dfd41 100644
--- a/reference/concepts/totally_ordered.md
+++ b/reference/concepts/totally_ordered.md
@@ -36,7 +36,7 @@ namespace std {
     - `bool(a &amp;lt;= b) == !bool(b &amp;lt; a)`が`true`であること
     - `bool(a &amp;gt;= b) == !bool(a &amp;lt; b)`が`true`であること
 
-- (2) :　`const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`型の左辺値`t, u`及び`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U`は`totally_ordered_with`のモデルである。
+- (2) : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`型の左辺値`t, u`及び`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U`は`totally_ordered_with`のモデルである。
     - `bool(t &amp;lt;  u) == bool(C(t) &amp;lt;  C(u))`が`true`であること
     - `bool(t &amp;gt;  u) == bool(C(t) &amp;gt;  C(u))`が`true`であること
     - `bool(t &amp;gt;= u) == bool(C(t) &amp;gt;= C(u))`が`true`であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size_t -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/size_t.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cstddef/size_t.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/size_t.md b/reference/cstddef/size_t.md
index d2e450a91..f1f8dfc04 100644
--- a/reference/cstddef/size_t.md
+++ b/reference/cstddef/size_t.md
@@ -14,7 +14,7 @@ namespace std {
 `size_t`は、オブジェクトのバイト数を表現できる程度に十分に大きい符号なし整数型である。
 C++03まではC言語と同じく「`sizeof`演算子によって返される符号なし整数型」と規定されていた。
 
-オブジェクトのバイト数（例えば[`malloc`](/reference/cstdlib.md)の引数）やコンテナの要素数（例えば[`std::size()`](/reference/iterator/size.md)の戻り値）を表現するために用いられる。
+オブジェクトのバイト数（例えば[`malloc`](/reference/cstdlib/malloc.md)の引数）やコンテナの要素数（例えば[`std::size()`](/reference/iterator/size.md)の戻り値）を表現するために用いられる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdint -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cstdint.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cstdint.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdint&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;ヘッダでは、ビット数が規定された整数型の別名、およびマクロを提供する。これらの機能は、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。&lt;/p&gt;
&lt;h2&gt;符号付き整数型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int8_t.html&#34;&gt;int8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8ビット幅の符号付き整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int16_t.html&#34;&gt;int16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;16ビット幅の符号付き整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int32_t.html&#34;&gt;int32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32ビット幅の符号付き整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int64_t.html&#34;&gt;int64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64ビット幅の符号付き整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast8_t.html&#34;&gt;int_fast8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても8ビット幅を持ち、演算が高速な符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast16_t.html&#34;&gt;int_fast16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても16ビット幅を持ち、演算が高速な符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast32_t.html&#34;&gt;int_fast32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても32ビット幅を持ち、演算が高速な符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast64_t.html&#34;&gt;int_fast64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても64ビット幅を持ち、演算が高速な符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least8_t.html&#34;&gt;int_least8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても8ビット幅を持つ、最小の符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least16_t.html&#34;&gt;int_least16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても16ビット幅を持つ、最小の符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least32_t.html&#34;&gt;int_least32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても32ビット幅を持つ、最小の符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least64_t.html&#34;&gt;int_least64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても64ビット幅を持つ、最小の符号付き整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intmax_t.html&#34;&gt;intmax_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最も大きい符号付き整数型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intptr_t.html&#34;&gt;intptr_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタサイズの符号付き整数型(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号なし整数型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint8_t.html&#34;&gt;uint8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8ビット幅の符号なし整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint16_t.html&#34;&gt;uint16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;16ビット幅の符号なし整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint32_t.html&#34;&gt;uint32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32ビット幅の符号なし整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint64_t.html&#34;&gt;uint64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64ビット幅の符号なし整数(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast8_t.html&#34;&gt;uint_fast8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても8ビット幅を持ち、演算が高速な符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast16_t.html&#34;&gt;uint_fast16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても16ビット幅を持ち、演算が高速な符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても32ビット幅を持ち、演算が高速な符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても64ビット幅を持ち、演算が高速な符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least8_t.html&#34;&gt;uint_least8_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても8ビット幅を持つ、最小の符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least16_t.html&#34;&gt;uint_least16_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても16ビット幅を持つ、最小の符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least32_t.html&#34;&gt;uint_least32_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても32ビット幅を持つ、最小の符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least64_t.html&#34;&gt;uint_least64_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;少なくても64ビット幅を持つ、最小の符号なし整数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uintmax_t.html&#34;&gt;uintmax_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最も大きい符号なし整数型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uintptr_t.html&#34;&gt;uintptr_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタサイズの符号なし整数型(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下のマクロは、整数型の限界値を表す。&lt;/p&gt;
&lt;h2&gt;符号付き整数型用の限界値マクロ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int8_min.html&#34;&gt;INT8_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int8_t&lt;/code&gt;の最小値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int8_max.html&#34;&gt;INT8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int8_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int16_min.html&#34;&gt;INT16_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int16_t&lt;/code&gt;の最小値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int16_max.html&#34;&gt;INT16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int16_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int32_min.html&#34;&gt;INT32_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int32_t&lt;/code&gt;の最小値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int32_max.html&#34;&gt;INT32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int32_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int64_min.html&#34;&gt;INT64_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int64_t&lt;/code&gt;の最小値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int64_max.html&#34;&gt;INT64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int64_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast8_min.html&#34;&gt;INT_FAST8_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast8_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast8_max.html&#34;&gt;INT_FAST8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast8_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast16_min.html&#34;&gt;INT_FAST16_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast16_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast16_max.html&#34;&gt;INT_FAST16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast16_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast32_min.html&#34;&gt;INT_FAST32_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast32_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast32_max.html&#34;&gt;INT_FAST32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast32_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast64_min.html&#34;&gt;INT_FAST64_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast64_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_fast64_max.html&#34;&gt;INT_FAST64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast64_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least8_min.html&#34;&gt;INT_LEAST8_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least8_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least8_max.html&#34;&gt;INT_LEAST8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least8_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least16_min.html&#34;&gt;INT_LEAST16_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least16_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least16_max.html&#34;&gt;INT_LEAST16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least16_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least32_min.html&#34;&gt;INT_LEAST32_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least32_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least32_max.html&#34;&gt;INT_LEAST32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least32_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least64_min.html&#34;&gt;INT_LEAST64_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least64_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/int_least64_max.html&#34;&gt;INT_LEAST64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least64_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intmax_min.html&#34;&gt;INTMAX_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intmax_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intmax_max.html&#34;&gt;INTMAX_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intmax_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intptr_min.html&#34;&gt;INTPTR_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intptr_t&lt;/code&gt;の最小値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/intptr_max.html&#34;&gt;INTPTR_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intptr_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/ptrdiff_min.html&#34;&gt;PTRDIFF_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstddef/ptrdiff_t.html&#34;&gt;ptrdiff_t&lt;/a&gt;&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/ptrdiff_max.html&#34;&gt;PTRDIFF_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstddef/ptrdiff_t.html&#34;&gt;ptrdiff_t&lt;/a&gt;&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/sig_atomic_min.html&#34;&gt;SIG_ATOMIC_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sig_atomic_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/sig_atomic_max.html&#34;&gt;SIG_ATOMIC_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sig_atomic_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/wchar_min.html&#34;&gt;WCHAR_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/wchar_max.html&#34;&gt;WCHAR_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/wint_min.html&#34;&gt;WINT_MIN&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wint_t&lt;/code&gt;の最小値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/wint_max.html&#34;&gt;WINT_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wint_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号なし整数型用の限界値マクロ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint8_max.html&#34;&gt;UINT8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint8_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint16_max.html&#34;&gt;UINT16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint16_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint32_max.html&#34;&gt;UINT32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint32_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint64_max.html&#34;&gt;UINT64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint64_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast8_max.html&#34;&gt;UINT_FAST8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast8_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast16_max.html&#34;&gt;UINT_FAST16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast16_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast32_max.html&#34;&gt;UINT_FAST32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_fast64_max.html&#34;&gt;UINT_FAST64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least8_max.html&#34;&gt;UINT_LEAST8_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least8_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least16_max.html&#34;&gt;UINT_LEAST16_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least16_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least32_max.html&#34;&gt;UINT_LEAST32_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least32_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uint_least64_max.html&#34;&gt;UINT_LEAST64_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least64_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uintmax_max.html&#34;&gt;UINTMAX_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintmax_t&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/uintptr_max.html&#34;&gt;UINTPTR_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintptr_t&lt;/code&gt;の最大値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdint/size_max.html&#34;&gt;SIZE_MAX&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstddef/size_t.html&#34;&gt;size_t&lt;/a&gt;&lt;/code&gt;の最大値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号付き整数型用の定数値マクロ&lt;/h2&gt;
&lt;p&gt;以下のマクロは、各整数型の定数値を表す関数マクロである。&lt;br /&gt;
例： &lt;code&gt;int8_t x = INT8_C(1);&lt;/code&gt;  &lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INT8_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8ビット幅を持つ、符号付き整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INT16_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;16ビット幅を持つ、符号付き整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INT32_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32ビット幅を持つ、符号付き整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INT64_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64ビット幅を持つ、符号付き整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INTMAX_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最も大きい符号付き整数型の定数値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号なし整数型用の定数値マクロ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UINT8_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8ビット幅を持つ、符号なし整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UINT16_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;16ビット幅を持つ、符号なし整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UINT32_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32ビット幅を持つ、符号なし整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UINT64_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64ビット幅を持つ、符号なし整数型の定数値(実装するかどうかは処理系定義)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UINTMAX_C(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最も大きい符号なし整数型の定数値&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h3&gt;&lt;a id=&#34;stdc-macros&#34;&gt;&lt;/a&gt;&lt;code&gt;__STDC_LIMIT_MACROS&lt;/code&gt;, &lt;code&gt;__STDC_CONSTANT_MACROS&lt;/code&gt; マクロについて&lt;/h3&gt;
&lt;p&gt;C99 の 7.18.3 &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; についての脚注で、同ヘッダを C++ でコンパイルする場合に限界値マクロ、定数値マクロを得るためにはこれらのマクロを事前に定義する必要があるものとされていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Footnote 219, 220: C++ implementations should define these macros only when &lt;code&gt;__STDC_LIMIT_MACROS&lt;/code&gt; is defined before &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; is included.&lt;/p&gt;
&lt;p&gt;Footnote 222: C++ implementations should define these macros only when &lt;code&gt;__STDC_CONSTANT_MACROS&lt;/code&gt; is defined before &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; is included.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかしその後の C 規格改定でこの脚注は削除され、 C11 では触れられていない。 C++11 は（ C++14 も） C99 を参照規格としているが、 &lt;a href=&#34;https://github.com/cplusplus/draft/blob/0b7593f0e716910bab7c1511533b2f9b5a886de1/source/support.tex#L1263&#34; target=&#34;_blank&#34;&gt;18.4.1 [cstdint.syn] p2&lt;/a&gt; に注釈として、これらのマクロは採用されていないことが明記されている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The macros defined by &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt; are provided unconditionally. In particular, the symbols &lt;code&gt;__STDC_LIMIT_MACROS&lt;/code&gt; and
&lt;code&gt;__STDC_CONSTANT_MACROS&lt;/code&gt; (mentioned in footnotes 219, 220, and 222 in
the C standard) play no role in C++.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;おそらく上記 C99 の脚注のため、 C++ 処理系によってはヘッダ &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt; での限界値マクロ、定数値マクロの提供にこれらマクロの定義が必要となっているかもしれない。（特に C++03 対応の処理系が拡張として C99 由来のこれらヘッダを提供していた場合など。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glibc に対するバグ報告（修正は 2013/05/21 ）
  &lt;a href=&#34;https://sourceware.org/bugzilla/show_bug.cgi?id=15366&#34; target=&#34;_blank&#34;&gt;Bug 15366 – Per C11 and C++11, &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; should not look at &lt;code&gt;__STDC_LIMIT_MACROS&lt;/code&gt; or &lt;code&gt;__STDC_CONSTANT_MACROS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/986426/what-do-stdc-limit-macros-and-stdc-constant-macros-mean&#34; target=&#34;_blank&#34;&gt;What do __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS mean? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1568.htm&#34; target=&#34;_blank&#34;&gt;N1568 Proposed additions to TR-1 to improve compatibility with C99&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1835.pdf&#34; target=&#34;_blank&#34;&gt;N1835 &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; for C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fpos_t -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fpos_t.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cstdio/fpos_t.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fpos_t.md b/reference/cstdio/fpos_t.md
index cee012fd6..9c1a6e356 100644
--- a/reference/cstdio/fpos_t.md
+++ b/reference/cstdio/fpos_t.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 ファイルの位置を保持するための型。
 
-[`fgetpos()`](/reference/cstdio/fgetpos.md.nolink)関数や[`fsetpos()`](/reference/cstdio/fsetpos.md.nolink)関数で用いられる。これらの関数は[`fseek()`](/reference/cstdio/fseek.md.nolink)関数や[`ftell()`](/reference/cstdio/ftell.md.nolink)関数と違い、巨大なファイルやマルチバイトファイルに対しても適切に動作するすることを目的に設計された。
+[`fgetpos()`](/reference/cstdio/fgetpos.md.nolink)関数や[`fsetpos()`](/reference/cstdio/fsetpos.md.nolink)関数で用いられる。これらの関数は[`fseek()`](/reference/cstdio/fseek.md.nolink)関数や[`ftell()`](/reference/cstdio/ftell.md.nolink)関数と違い、巨大なファイルやマルチバイトファイルに対しても適切に動作することを目的に設計された。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atof -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/atof.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cstdlib/atof.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/atof.md b/reference/cstdlib/atof.md
index 4a54ad8b0..6adb2eaf8 100644
--- a/reference/cstdlib/atof.md
+++ b/reference/cstdlib/atof.md
@@ -18,7 +18,7 @@ namespace std {
 - 空白文字から始まる場合、最初の非空白文字から変換する。
 - `0x` または `0X` の場合、空白でない16進数として処理する。
 - `e`または`E`は、それより前を基数、その後ろを指数として処理する。
-- \+　、\-は変換後の符号に適用される。
+- \+ 、\-は変換後の符号に適用される。
 - `INF`または`INFINITY`(大小文字区別せず)は`inf`を返す。
 - NAN(大小文字区別せず)はそれ以前の数値を返す。もし以前の数値がないなら、`nan`を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atoi,atol,atoll -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/atoi_atol_atoll.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/cstdlib/atoi_atol_atoll.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/atoi_atol_atoll.md b/reference/cstdlib/atoi_atol_atoll.md
index 00e59ca87..c2420dab8 100644
--- a/reference/cstdlib/atoi_atol_atoll.md
+++ b/reference/cstdlib/atoi_atol_atoll.md
@@ -21,7 +21,7 @@ namespace std {
 
 空白文字から始まる場合、最初の非空白文字から変換する。
 
-\+　、\-は変換後の符号に適用される。
+\+ 、\-は変換後の符号に適用される。
 
 
 変換不可能ならば0を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 176d49705..dd27c311b 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -45,6 +45,7 @@ namespace std::execution {
 | [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md) | 前方進行保証 (enum) | C++26 |
 | [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md) | 前方進行保証取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_await_completion_adaptor`](execution/get_await_completion_adaptor.md) | Awaitable完了アダプタ取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_env`](execution/get_env.md) | 環境取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::env_of_t`](execution/env_of_t.md) | 指定型から環境型を取得 (alias template) | C++26 |
 | [`execution::prop`](execution/prop.md) | Key/Valueペアによる[クエリ可能オブジェクト](queryable.md) (class template) | C++26 |
@@ -122,12 +123,16 @@ namespace std::execution {
 | [`execution::let_value`](execution/let_value.md) | 値完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::let_error`](execution/let_error.md) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::let_stopped`](execution/let_stopped.md) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
-| [`execution::bulk`](execution/bulk.md) | インデクス空間上で指定関数を反復実行 (customization point object) | C++26 |
+| [`execution::bulk`](execution/bulk.md) | インデクス空間上で指定関数を一括実行 (customization point object) | C++26 |
+| [`execution::bulk_chunked`](execution/bulk_chunked.md) | インデクス空間を分割チャンク単位で指定関数を一括実行 (customization point object) | C++26 |
+| [`execution::bulk_unchunked`](execution/bulk_unchunked.md) | インデクス空間の各インデクス単位で指定関数を一括実行 (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::when_all_with_variant`](execution/when_all_with_variant.md) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
 | [`execution::stopped_as_optional`](execution/stopped_as_optional.md) | 入力Senderの停止完了を空の[`optional`](/reference/optional/optional.md)値完了に変換 (customization point object) | C++26 |
 | [`execution::stopped_as_error`](execution/stopped_as_error.md) | 入力Senderの停止完了をエラー完了に変換 (customization point object) | C++26 |
+| [`execution::associate`](execution/associate.md.nolink) | 非同期スコープへの関連付け (customization point object) | C++26 |
+| [`execution::spawn_future`](execution/spawn_future.md.nolink) | 非同期操作を早期開始 (customization point object) | C++26 |
 
 ### Senderコンシューマ
 
@@ -135,8 +140,9 @@ namespace std::execution {
 |------|------|----------------|
 | [`this_thread::sync_wait`](this_thread/sync_wait.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
 | [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
+| [`execution::spawn`](execution/spawn.md.nolink) | 非同期操作を早期開始 (customization point object) | C++26 |
 
-Senderコンシューマは名前空間 `std::this_thread` で定義される。
+Senderコンシューマは名前空間 `std::this_thread` および名前空間 `std::execution` で定義される。
 
 ### Sender/Receiverユーティリティ
 
@@ -155,6 +161,22 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 | [`execution::as_awaitable`](execution/as_awaitable.md) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
 | [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
 
+### 実行スコープユーティリティ
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`execution::scope_token`](execution/scope_token.md) | 非同期スコープトークン (concept) | C++26 |
+| [`execution::simple_counting_scope`](execution/simple_counting_scope.md) | カウント式非同期スコープ (class) | C++26 |
+| [`execution::counting_scope`](execution/counting_scope.md) | 停止要求可能なカウント式非同期スコープ (class) | C++26 |
+
+### 並列Scheduler
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`execution::parallel_scheduler`](execution/parallel_scheduler.md) | 並列Scheduler (class) | C++26 |
+| [`execution::get_parallel_scheduler`](execution/get_parallel_scheduler.md) | 並列Schedulerを取得 (function) | C++26 |
+| [`execution::system_context_replaceability`](execution/system_context_replaceability.md) | `parallel_scheduler`動作カスタマイズ用の名前空間 (namespace) | C++26 |
+
 
 ## バージョン
 ### 言語
@@ -164,6 +186,10 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 ## 参照
 - [P0024R2 The Parallelism TS Should be Standardized](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
 - [P3284R4 `write_env` and `unstoppable` Sender Adaptors](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3284r4.html)
+- [P3481R5 `std::execution::bulk()` issues](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3481r5.html)
 - [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
+- [P3570R2 optional variants in sender/receiver](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3570r2.html)
 - [P3682R0 Remove `std::execution::split`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3682r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator-aware-forward -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/allocator-aware-forward.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/allocator-aware-forward.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/allocator-aware-forward.md b/reference/execution/execution/allocator-aware-forward.md
new file mode 100644
index 000000000..4637c1d7d
--- /dev/null
+++ b/reference/execution/execution/allocator-aware-forward.md
@@ -0,0 +1,42 @@
+# allocator-aware-forward
+* execution[meta header]
+* function template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T, class Context&amp;gt;
+decltype(auto) allocator-aware-forward(T&amp;amp;&amp;amp; obj, Context&amp;amp;&amp;amp; context);
+```
+
+## 概要
+`allocator-aware-forward`は、Senderアルゴリズム動作仕様定義で用いられる説明専用の関数テンプレートである。
+
+アロケータの利用可否に応じて、`obj`から`T`型の新規オブジェクトを作成するか、`obj`を転送する。
+`context`に関連付けられた[環境](../queryable.md)がアロケータを提供する（つまり、式[`get_allocator`](../get_allocator.md)`(`[`get_env`](get_env.md)`(context))`が有効である）とき、同式の結果を`alloc`、型`P`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;T&amp;gt;`とする。
+
+
+## 戻り値
+- `alloc`が定義されなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(obj)`を返す。
+- そうではなく、`P`が`product-type`の特殊化のときは、`obj`の要素を`e`としたとき各要素が次の通り初期化された`P`型のオブジェクトを返す。
+
+    ```cpp
+    make_obj_using_allocator&amp;lt;decltype(e)&amp;gt;(std::forward_like&amp;lt;T&amp;gt;(e), alloc)
+    ```
+    * make_obj_using_allocator[link /reference/memory/make_obj_using_allocator.md]
+
+- そうでなければ、[`make_obj_using_allocator`](/reference/memory/make_obj_using_allocator.md)`&amp;lt;P&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(e), alloc)`を返す。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::impls-for`](impls-for.md)
+- [`execution::let_value`](let_value.md)
+
+
+## 参照
+- [P3433R1 Allocator Support for Operation States](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3433r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index e5d61cb41..fdcf54492 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -18,7 +18,9 @@ namespace std::execution {
 Promise型`p`をもつコルーチンにおいて、Await式`co_await as_awaitable(expr, p)`は下記のように動作する。
 
 - 式`expr.as_awaitable(p)`が有効ならば、同式が返すAwaitableオブジェクトに対してAwait式を実行する。
-- `expr`が[単一の値を送信するSender](single-sender.md)であり、Promise型が停止完了ハンドラを定義するならば、下記動作を行う。
+- `expr`が[Sender型](sender.md)かつ[`get_await_completion_adaptor`](get_await_completion_adaptor.md)問い合わせに対応する場合、同問い合わせが返すSenderアダプタを`expr`に適用した結果を`adapted-expr`とする。
+
+- `expr`（または上記ステップの`adapted-expr`）が[単一の値を送信するSender](single-sender.md)であり、Promise型が停止完了ハンドラを定義するならば、下記動作を行う。
     - Senderを[接続(connect)](connect.md)し、結果[Operation State](operation_state.md)をAwaitableオブジェクトに格納する。
     - コルーチンを中断し、Operation Stateを[開始(start)](start.md)する。
     - [クエリオブジェクト](../queryable.md)による[Receiver](receiver.md)環境への問い合わせは、Promise型に関連付けられた環境(`get_env`)へと転送される。
@@ -37,6 +39,7 @@ Promise型`p`をもつコルーチンにおいて、Await式`co_await as_awaitab
     - 適格要件 : 同式の型を`A`としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;A, Promise&amp;gt; == true`であるべき。
 - そうではなく、説明用の型`U`を`Promise`とは異なりかつ`await_transform`メンバ関数を持たない未規定の型としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, U&amp;gt; == true`ならば、式`(void(p), expr)`
     - 事前条件 : [`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, Promise&amp;gt; == true`、かつPromise型`U`のコルーチンにおける式`co_await expr`がPromise型`Promise`のコルーチンにおける同式と等しさを保持すること。
+- そうではなく、説明用の式`adapted-expr`を`expr`が1回だけ評価されることを除いて[`get_await_completion_adaptor`](get_await_completion_adaptor.md)`(`[`get_env`](get_env.md)`(expr))(expr)`としたとき、`has-queryable-await-completion-adaptor&amp;lt;Expr&amp;gt;`と`awaitable-sender&amp;lt;decltype((adapted-expr)), Promise&amp;gt;`が共に満たされるならば、式`sender-awaitable{adapted-expr, p}`
 - そうではなく、`awaitable-sender&amp;lt;Expr, Promise&amp;gt;`ならば、式`sender-awaitable{expr, p}`
 - そうでなければ、式`(void(p), expr)`
 
@@ -59,6 +62,21 @@ namespace std::execution {
 * sender_to[link sender_to.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 
+### コンセプト`has-queryable-await-completion-adaptor`
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr&amp;gt;
+  concept has-queryable-await-completion-adaptor =  // exposition only
+    sender&amp;lt;Sndr&amp;gt;
+    &amp;amp;&amp;amp; requires(Sndr&amp;amp;&amp;amp; sender) {
+      get_await_completion_adaptor(get_env(sender));
+    };
+}
+```
+* sender[link sender.md]
+* get_await_completion_adaptor[link get_await_completion_adaptor.md]
+* get_env[link get_env.md]
+
 ### クラステンプレート`sender-awaitable`
 ```cpp
 namespace std::execution {
@@ -196,6 +214,8 @@ value-type await_resume();
 ## カスタマイゼーションポイント
 `expr`に対して、適格であるならば式`expr.as_awaitable(p)`が呼び出される。
 
+`expr`が[Sender型](sender.md)かつ関連付けられた[属性](../queryable.md)がクエリオブジェクト[`get_await_completion_adaptor`](get_await_completion_adaptor.md)に対応するとき、`expr`に対して同クエリオブジェクトが返すSenderアダプタを適用してからAwaitableオブジェクトへ変換する。
+
 
 ## バージョン
 ### 言語
@@ -210,9 +230,11 @@ value-type await_resume();
 
 ## 関連項目
 - [`execution::with_awaitable_senders`](with_awaitable_senders.md)
+- [`execution::get_await_completion_adaptor`](get_await_completion_adaptor.md)
 - [C++20 コルーチン](/lang/cpp20/coroutines.md)
 
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
 - [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
+- [P3570R2 optional variants in sender/receiver](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3570r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bulk -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/bulk.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/bulk.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/bulk.md b/reference/execution/execution/bulk.md
index fc2f1cad1..1088bd6de 100644
--- a/reference/execution/execution/bulk.md
+++ b/reference/execution/execution/bulk.md
@@ -13,104 +13,79 @@ namespace std::execution {
 * unspecified[italic]
 
 ## 概要
-`bulk`は、インデクス空間の各インデクスに対してタスクを反復実行するSenderアダプタである。
+`bulk`は、インデクス空間の各インデクスに対してタスクを一括実行するSenderアダプタである。
 
 `bulk`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
 
+実行制御ライブラリのデフォルト動作では、`bulk`は[`bulk_chunked`](bulk_chunked.md)に変換され、下記のように振る舞う。
+
+- [並列Scheduler](parallel_scheduler.md)上では、インデクス空間を区間分割されたチャンク単位で並列実行される。
+- 明示的にカスタマイズされていなければ、各インデクスに対する処理は逐次実行される。
+
 
 ## 効果
-説明用の式`sndr`, `shape`, `f`に対して、型`Shape`を`decltype(auto(shape))`とする。下記いずれかの条件をみたすとき、呼び出し式`bulk(sndr, shape, f)`は不適格となる。
+説明用の式`sndr`, `policy`, `shape`, `f`に対して、型`Policy`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(policy)&amp;gt;`、型`Shape`を`decltype(auto(shape))`、型`Func`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((f))&amp;gt;`とする。下記いずれかの条件をみたすとき、呼び出し式`bulk(sndr, policy, shape, f)`は不適格となる。
 
 - `decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは
+- [`is_execution_policy_v`](../is_execution_policy.md)`&amp;lt;Policy&amp;gt; == false`、もしくは
 - `Shape`が[`integral`](/reference/concepts/integral.md)を満たさない、もしくは
-- `decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき。
+- `Func`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルでないとき。
 
-そうでなければ、呼び出し式`bulk(sndr, shape, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+そうでなければ、呼び出し式`bulk(sndr, policy, shape, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
 
 ```cpp
-transform_sender(get-domain-early(sndr), make-sender(bulk, product-type{shape, f}, sndr))
+transform_sender(
+  get-domain-early(sndr),
+  make-sender(bulk, product-type&amp;lt;see below, Shape, Func&amp;gt;{policy, shape, f}, sndr))
 ```
 * transform_sender[link transform_sender.md]
 * get-domain-early[link get-domain-early.md]
 * make-sender[link make-sender.md]
 * product-type[link product-type.md]
 
+`product-type`の第1テンプレート引数は、`Policy`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるとき`Policy`となる。そうでなければ、`const Policy&amp;amp;`となる。
 
-### Senderアルゴリズムタグ `bulk`
-Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
-
-```cpp
-namespace std::execution {
-  template&amp;lt;&amp;gt;
-  struct impls-for&amp;lt;bulk_t&amp;gt; : default-impls {
-    static constexpr auto complete = see below;
 
-    template&amp;lt;class Sndr, class... Env&amp;gt;
-    static consteval void check-types();
-  };
-}
-```
-* impls-for[link impls-for.md]
-* default-impls[link impls-for.md]
+### Senderアルゴリズムタグ `bulk`
+説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr, bulk_t&amp;gt; == false`のとき、式`bulk.transform_sender(sndr, env)`は不適格となる。
 
-`impls-for&amp;lt;bulk_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+そうでなければ、式`bulk.transform_sender(sndr, env)`は下記と等価。
 
 ```cpp
-[]&amp;lt;class Index, class State, class Rcvr, class Tag, class... Args&amp;gt;
-  (Index, State&amp;amp; state, Rcvr&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void requires see below {
-    if constexpr (same_as&amp;lt;Tag, set_value_t&amp;gt;) {
-      auto&amp;amp; [shape, f] = state;
-      constexpr bool nothrow = noexcept(f(auto(shape), args...));
-      TRY-EVAL(rcvr, [&amp;amp;]() noexcept(nothrow) {
-        for (decltype(auto(shape)) i = 0; i &amp;lt; shape; ++i) {
-          f(auto(i), args...);
-        }
-        Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
-      }());
-    } else {
-      Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
-    }
-  }
+auto [_, data, child] = sndr;
+auto&amp;amp; [policy, shape, f] = data;
+auto new_f = [func = std::move(f)](Shape begin, Shape end, auto&amp;amp;&amp;amp;... vs)
+    noexcept(noexcept(f(begin, vs...))) {
+  while (begin != end) func(begin++, vs...);
+}
+return bulk_chunked(std::move(child), policy, shape, std::move(new_f));
 ```
-* set_value_t[link set_value.md]
-* TRY-EVAL[link set_value.md]
+* bulk_chunked[link bulk_chunked.md]
 * std::move[link /reference/utility/move.md]
 
-型`Tag`が[`set_value_t`](set_value.md)以外の型であるとき、もしくは式`f(auto(shape), args...)`が適格なときに限って、上記ラムダ式のrequires節が満たされる。
-
-メンバ関数`impls-for&amp;lt;bulk_t&amp;gt;::check-types`の効果は下記の通り。
-
-```cpp
-auto cs = get_completion_signatures&amp;lt;child-type&amp;lt;Sndr&amp;gt;, FWD-ENV-T(Env)...&amp;gt;();
-auto fn = []&amp;lt;class... Ts&amp;gt;(set_value_t(*)(Ts...)) {
-  if constexpr (!invocable&amp;lt;remove_cvref_t&amp;lt;data-type&amp;lt;Sndr&amp;gt;&amp;gt;, Ts&amp;amp;...&amp;gt;)
-    throw unspecified-exception();
-};
-cs.for-each(overload-set{fn, [](auto){}});
-```
-* get_completion_signatures[link get_completion_signatures.md]
-* child-type[link child-type.md]
-* FWD-ENV-T[link ../forwarding_query.md]
-* set_value_t[link set_value.md]
-* data-type[link data-type.md]
-* for-each[link completion_signatures.md]
-* overload-set[link overload-set.md]
-
-`unspecified-exception`は[`exception`](/reference/exception/exception.md)から派生した型となる。
-
 
 ## カスタマイゼーションポイント
-Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+Senderアルゴリズム構築時に、[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
-説明用の式`out_sndr`を`bulk(sndr, shape, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
+[Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では`bulk.transform_sender(out_sndr, env)`が呼ばれ、[`bulk_chunked`](bulk_chunked.md)Senderへと変換される。
+
+説明用の式`out_sndr`を`bulk(sndr, policy, shape, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
 
-- 値完了操作において、パック`args`を入力[Sender](sender.md)の値完了結果データを参照する左辺値式としたとき、型`Shape`の半開区間`[0, Shape)`における全ての`i`に対して`f(i, args...)`を呼び出すこと。
-- `sndr`により送信された全ての完了操作を伝搬すること。
+- 説明用の`args`を`sndr`の値完了結果を参照する左辺値式のパック、または[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるならばそれらの値のdecayコピーのパックとする。`sndr`が値完了したとき、
+    - `out_sndr`もまた値完了するとき、`0`から`shape`までの型`Shape`の全ての`i`に対して`f(i, args...)`を呼び出す。
+    - `out_sndr`が[`set_error`](set_error.md)`(rcvr, eptr)`で完了するとき、エラー完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性があり、`eptr`は下記いずれかを指す[`exception_ptr`](/reference/exception/exception_ptr.md)となる。
+        - `f`呼び出しから送出された例外、または
+        - 処理系が要求リソースの確保に失敗したときは[`bad_alloc`](/reference/new/bad_alloc.md)例外、または
+        - [`runtime_error`](/reference/stdexcept.md)から派生された例外。
+    - `out_sndr`が[`set_stopped`](set_stopped.md)`(rcvr)`で完了するとき、停止完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性がある。
+- `sndr`が[`set_value`](set_value.md)で完了しないとき、その完了操作は`recv`に転送される。
+- パラメータ`policy`は、アルゴリズムに対応した非同期操作の実行を並列化する方法、および`f`に適用する方法を規程する。並列アルゴリズム要素アクセス関数に対する権限と要件は`f`に適用される。
 
 
 ## 備考
-非同期実行フレームワークで定義される[デフォルト実行ドメイン](default_domain.md)では、`bulk`に指定したタスク`f`は単一スレッド上で逐次実行される。
+`bulk`アルゴリズムを直接カスタマイズしない実行ドメインであっても、`bulk`の動作は[Receiver](receiver.md)接続時に変換される[`bulk_chunked`](bulk_chunked.md)へ委譲される。
 
 
 ## 例
@@ -123,7 +98,7 @@ int main()
 {
   ex::sender auto sndr =
     ex::just()
-    | ex::bulk(3, [](int i) {
+    | ex::bulk(3, ex::seq, [](int i) {
         std::println(&amp;#34;{}&amp;#34;, i);
       });
   std::this_thread::sync_wait(sndr);
@@ -132,9 +107,10 @@ int main()
 * ex::bulk[color ff0000]
 * ex::sender[link sender.md]
 * ex::just[link just.md]
+* ex::seq[link execution_policy.md]
 * std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
 
-### 出力例
+### 出力
 ```
 0
 1
@@ -153,7 +129,12 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 関連項目
+- [`execution::bulk_chunked`](bulk_chunked.md)
+- [`execution::bulk_unchunked`](bulk_unchunked.md)
+
+
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
-- [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
+- [P3481R5 `std::execution::bulk()` issues](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3481r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bulk_chunked -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/bulk_chunked.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/bulk_chunked.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/bulk_chunked.md b/reference/execution/execution/bulk_chunked.md
new file mode 100644
index 000000000..33242087f
--- /dev/null
+++ b/reference/execution/execution/bulk_chunked.md
@@ -0,0 +1,184 @@
+# bulk_chunked
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct bulk_chunked_t { unspecified };
+  inline constexpr bulk_chunked_t bulk_chunked{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`bulk_chunked`は、インデクス空間を区間分割したチャンク単位でタスクを一括実行するSenderアダプタである。
+
+`bulk_chunked`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+実行制御ライブラリのデフォルト動作では、下記のように振る舞う。
+
+- [並列Scheduler](parallel_scheduler.md)上では、インデクス空間を区間分割されたチャンク単位で並列実行される。
+- 明示的にカスタマイズされていなければ、各インデクスに対する処理は逐次実行される。
+
+
+## 効果
+説明用の式`sndr`, `policy`, `shape`, `f`に対して、型`Policy`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(policy)&amp;gt;`、型`Shape`を`decltype(auto(shape))`、型`Func`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((f))&amp;gt;`とする。下記いずれかの条件をみたすとき、呼び出し式`bulk_chunked(sndr, policy, shape, f)`は不適格となる。
+
+- `decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは
+- [`is_execution_policy_v`](../is_execution_policy.md)`&amp;lt;Policy&amp;gt; == false`、もしくは
+- `Shape`が[`integral`](/reference/concepts/integral.md)を満たさない、もしくは
+- `Func`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルでないとき。
+
+そうでなければ、呼び出し式`bulk_chunked(sndr, policy, shape, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(
+  get-domain-early(sndr),
+  make-sender(bulk_chunked, product-type&amp;lt;see below, Shape, Func&amp;gt;{policy, shape, f}, sndr))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+* product-type[link product-type.md]
+
+`product-type`の第1テンプレート引数は、`Policy`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるとき`Policy`となる。そうでなければ、`const Policy&amp;amp;`となる。
+
+
+### Senderアルゴリズムタグ `bulk_chunked`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;bulk_chunked_t&amp;gt; : default-impls {
+    static constexpr auto complete = see below;
+
+    template&amp;lt;class Sndr, class... Env&amp;gt;
+    static consteval void check-types();
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+
+`impls-for&amp;lt;bulk_chunked_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class Index, class State, class Rcvr, class Tag, class... Args&amp;gt;
+  (Index, State&amp;amp; state, Rcvr&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept
+  -&amp;gt; void requires see below {
+    if constexpr (same_as&amp;lt;Tag, set_value_t&amp;gt;) {
+      auto&amp;amp; [policy, shape, f] = state;
+      constexpr bool nothrow = noexcept(f(auto(shape), auto(shape), args...));
+      TRY-EVAL(rcvr, [&amp;amp;]() noexcept(nothrow) {
+        f(static_cast&amp;lt;decltype(auto(shape))&amp;gt;(0), auto(shape), args...);
+        Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+      }());
+    } else {
+      Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+    }
+  }
+```
+* set_value_t[link set_value.md]
+* TRY-EVAL[link set_value.md]
+* std::move[link /reference/utility/move.md]
+
+型`Tag`が[`set_value_t`](set_value.md)以外の型であるとき、もしくは式`f(auto(shape), auto(shape), args...)`が適格なときに限って、上記ラムダ式のrequires節が満たされる。
+
+メンバ関数`impls-for&amp;lt;bulk_chunked_t&amp;gt;::check-types`の効果は下記の通り。
+
+```cpp
+auto cs = get_completion_signatures&amp;lt;child-type&amp;lt;Sndr&amp;gt;, FWD-ENV-T(Env)...&amp;gt;();
+auto fn = []&amp;lt;class... Ts&amp;gt;(set_value_t(*)(Ts...)) {
+  if constexpr (!invocable&amp;lt;remove_cvref_t&amp;lt;data-type&amp;lt;Sndr&amp;gt;&amp;gt;, Ts&amp;amp;...&amp;gt;)
+    throw unspecified-exception();
+};
+cs.for-each(overload-set{fn, [](auto){}});
+```
+* get_completion_signatures[link get_completion_signatures.md]
+* child-type[link child-type.md]
+* FWD-ENV-T[link ../forwarding_query.md]
+* set_value_t[link set_value.md]
+* data-type[link data-type.md]
+* for-each[link completion_signatures.md]
+* overload-set[link overload-set.md]
+
+`unspecified-exception`は[`exception`](/reference/exception/exception.md)から派生した型となる。
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+説明用の式`out_sndr`を`bulk_chunked(sndr, policy, shape, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
+
+- 説明用の`args`を`sndr`の値完了結果を参照する左辺値式のパック、または[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるならばそれらの値のdecayコピーのパックとする。`sndr`が値完了したとき、
+    - `out_sndr`もまた値完了するとき、範囲`[0, shape]`にある型`Shape`の0個以上の`b`と`e`のペアに対して`f(b, e, args...)`を呼び出す。このとき`b &amp;lt; e`であり、かつ`0`から`shape`までの型`Shape`の全ての`i`において、`b`と`e`のペアに対して`i`が範囲`[b, e)`にあるような呼び出しが正確に1回だけ存在する。
+    - `out_sndr`が[`set_error`](set_error.md)`(rcvr, eptr)`で完了するとき、エラー完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性があり、`eptr`は下記いずれかを指す[`exception_ptr`](/reference/exception/exception_ptr.md)となる。
+        - `f`呼び出しから送出された例外、または
+        - 処理系が要求リソースの確保に失敗したときは[`bad_alloc`](/reference/new/bad_alloc.md)例外、または
+        - [`runtime_error`](/reference/stdexcept.md)から派生された例外。
+    - `out_sndr`が[`set_stopped`](set_stopped.md)`(rcvr)`で完了するとき、停止完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性がある。
+- `sndr`が[`set_value`](set_value.md)で完了しないとき、その完了操作は`recv`に転送される。
+- パラメータ`policy`は、アルゴリズムに対応した非同期操作の実行を並列化する方法、および`f`に適用する方法を規程する。並列アルゴリズム要素アクセス関数に対する権限と要件は`f`に適用される。
+
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::sender auto sndr =
+    ex::just()
+    | ex::bulk_chunked(3, ex::seq,
+        [](int begin, int end) {
+          for (int i = begin; i &amp;lt; end; i++) {
+            std::println(&amp;#34;{}&amp;#34;, i);
+          }
+        });
+  std::this_thread::sync_wait(sndr);
+}
+```
+* ex::bulk_chunked[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::seq[link execution_policy.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+
+### 出力
+```
+0
+1
+2
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::bulk`](bulk.md)
+- [`execution::bulk_unchunked`](bulk_unchunked.md)
+- [`execution::parallel_scheduler`](parallel_scheduler.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
+- [P3481R5 `std::execution::bulk()` issues](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3481r5.html)
+- [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bulk_unchunked -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/bulk_unchunked.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/bulk_unchunked.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/bulk_unchunked.md b/reference/execution/execution/bulk_unchunked.md
new file mode 100644
index 000000000..a460e8c4e
--- /dev/null
+++ b/reference/execution/execution/bulk_unchunked.md
@@ -0,0 +1,159 @@
+# bulk_unchunked
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct bulk_unchunked_t { unspecified };
+  inline constexpr bulk_unchunked_t bulk_unchunked{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`bulk_unchunked`は、インデクス空間の各インデクスに対してタスクを一括実行するSenderアダプタである。
+
+`bulk_unchunked`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+実行制御ライブラリのデフォルト動作では、下記のように振る舞う。
+
+- [並列Scheduler](parallel_scheduler.md)上では、各インデクスに対する処理は個別の実行エージェント上で並列実行される。
+- 明示的にカスタマイズされていなければ、各インデクスに対する処理は逐次実行される。
+
+
+## 効果
+説明用の式`sndr`, `policy`, `shape`, `f`に対して、型`Policy`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype(policy)&amp;gt;`、型`Shape`を`decltype(auto(shape))`、型`Func`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((f))&amp;gt;`とする。下記いずれかの条件をみたすとき、呼び出し式`bulk_unchunked(sndr, policy, shape, f)`は不適格となる。
+
+- `decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは
+- [`is_execution_policy_v`](../is_execution_policy.md)`&amp;lt;Policy&amp;gt; == false`、もしくは
+- `Shape`が[`integral`](/reference/concepts/integral.md)を満たさない、もしくは
+- `Func`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルでないとき。
+
+そうでなければ、呼び出し式`bulk_unchunked(sndr, policy, shape, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(
+  get-domain-early(sndr),
+  make-sender(bulk_unchunked, product-type&amp;lt;see below, Shape, Func&amp;gt;{policy, shape, f}, sndr))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+* product-type[link product-type.md]
+
+`product-type`の第1テンプレート引数は、`Policy`が[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるとき`Policy`となる。そうでなければ、`const Policy&amp;amp;`となる。
+
+
+### Senderアルゴリズムタグ `bulk_unchunked`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;bulk_unchunked_t&amp;gt; : default-impls {
+    static constexpr auto complete = see below;
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+
+`impls-for&amp;lt;bulk_unchunked_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+```cpp
+[]&amp;lt;class Index, class State, class Rcvr, class Tag, class... Args&amp;gt;
+  (Index, State&amp;amp; state, Rcvr&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept
+  -&amp;gt; void requires see below {
+    if constexpr (same_as&amp;lt;Tag, set_value_t&amp;gt;) {
+      auto&amp;amp; [shape, f] = state;
+      constexpr bool nothrow = noexcept(f(auto(shape), args...));
+      TRY-EVAL(rcvr, [&amp;amp;]() noexcept(nothrow) {
+        for (decltype(auto(shape)) i = 0; i &amp;lt; shape; ++i) {
+          f(auto(i), args...);
+        }
+        Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+      }());
+    } else {
+      Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+    }
+  }
+```
+* set_value_t[link set_value.md]
+* TRY-EVAL[link set_value.md]
+* std::move[link /reference/utility/move.md]
+
+型`Tag`が[`set_value_t`](set_value.md)以外の型であるとき、もしくは式`f(auto(shape), args...)`が適格なときに限って、上記ラムダ式のrequires節が満たされる。
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+説明用の式`out_sndr`を`bulk_unchunked(sndr, policy, shape, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
+
+- 説明用の`args`を`sndr`の値完了結果を参照する左辺値式のパック、または[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであるならばそれらの値のdecayコピーのパックとする。`sndr`が値完了したとき、
+    - `out_sndr`もまた値完了するとき、`0`から`shape`までの型`Shape`の全ての`i`に対して`f(i, args...)`を呼び出す。
+        - [Scheduler](scheduler.md)実装者は、各イテレーションを独立した実行エージェント上で実行することが推奨される。
+    - `out_sndr`が[`set_error`](set_error.md)`(rcvr, eptr)`で完了するとき、エラー完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性があり、`eptr`は下記いずれかを指す[`exception_ptr`](/reference/exception/exception_ptr.md)となる。
+        - `f`呼び出しから送出された例外、または
+        - 処理系が要求リソースの確保に失敗したときは[`bad_alloc`](/reference/new/bad_alloc.md)例外、または
+        - [`runtime_error`](/reference/stdexcept.md)から派生された例外。
+    - `out_sndr`が[`set_stopped`](set_stopped.md)`(rcvr)`で完了するとき、停止完了ハンドラが呼び出される前に非同期操作は`f`呼び出しのサブセットを呼び出す可能性がある。
+- `sndr`が[`set_value`](set_value.md)で完了しないとき、その完了操作は`recv`に転送される。
+- パラメータ`policy`は、アルゴリズムに対応した非同期操作の実行を並列化する方法、および`f`に適用する方法を規程する。並列アルゴリズム要素アクセス関数に対する権限と要件は`f`に適用される。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::sender auto sndr =
+    ex::just()
+    | ex::bulk_unchunked(3, ex::seq, [](int i) {
+        std::println(&amp;#34;{}&amp;#34;, i);
+      });
+  std::this_thread::sync_wait(sndr);
+}
+```
+* ex::bulk_unchunked[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::seq[link execution_policy.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+
+### 出力
+```
+0
+1
+2
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::bulk`](bulk.md)
+- [`execution::bulk_chunked`](bulk_chunked.md)
+- [`execution::parallel_scheduler`](parallel_scheduler.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
+- [P3481R5 `std::execution::bulk()` issues](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3481r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_scope -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/counting_scope.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope.md b/reference/execution/execution/counting_scope.md
new file mode 100644
index 000000000..4819fa15b
--- /dev/null
+++ b/reference/execution/execution/counting_scope.md
@@ -0,0 +1,57 @@
+# counting_scope
+* execution[meta header]
+* class[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class counting_scope;
+}
+```
+
+## 概要
+`counting_scope`は、停止要求を作成可能なカウント式の非同期スコープを表現する。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](counting_scope/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| [`(destructor)`](counting_scope/op_destructor.md.nolink) | デストラクタ | C++26 |
+| [`get_token`](counting_scope/get_token.md.nolink) | 非同期スコープトークンを取得 | C++26 |
+| [`close`](counting_scope/close.md.nolink) | 非同期スコープを閉じる | C++26 |
+| [`join`](counting_scope/join.md.nolink) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
+| [`request_stop`](counting_scope/request_stop.md.nolink) | 停止要求を行う | C++26 |
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`token`](counting_scope/token.md.nolink) | 非同期スコープトークン型 | C++26 |
+
+## 静的メンバ変数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `constexpr size_t max_associations = implementation-defined;` | 関連付けの最大数 | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::simple_counting_scope`](simple_counting_scope.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-early -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-early.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/get-domain-early.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-early.md b/reference/execution/execution/get-domain-early.md
index 8ca93cb86..57875cca8 100644
--- a/reference/execution/execution/get-domain-early.md
+++ b/reference/execution/execution/get-domain-early.md
@@ -37,6 +37,16 @@ constexpr auto get-domain-early(const Sndr&amp;amp; sndr) noexcept;
 
 
 ## 関連項目
+- [`execution::continues_on`](continues_on.md)
+- [`execution::then`](then.md)
+- [`execution::let_value`](let_value.md)
+- [`execution::bulk`](bulk.md)
+- [`execution::when_all`](when_all.md)
+- [`execution::into_variant`](into_variant.md)
+- [`execution::stopped_as_optional`](stopped_as_optional.md)
+- [`execution::stopped_as_error`](stopped_as_error.md)
+- [`execution::associate`](associate.md.nolink)
+- [`execution::affine_on`](affine_on.md.nolink)
 - [`this_thread::sync_wait`](../this_thread/sync_wait.md)
 - [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-late -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-late.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/get-domain-late.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-late.md b/reference/execution/execution/get-domain-late.md
index 877a17341..20eb3fe6b 100644
--- a/reference/execution/execution/get-domain-late.md
+++ b/reference/execution/execution/get-domain-late.md
@@ -61,6 +61,7 @@ Senderアダプタ[`continues_on`](continues_on.md)は[`schedule_from`](schedule
 ## 関連項目
 - [`execution::connect`](connect.md)
 - [`execution::continues_on`](continues_on.md)
+- [`execution::get_completion_signatures`](get_completion_signatures.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_await_completion_adaptor -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_await_completion_adaptor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/get_await_completion_adaptor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_await_completion_adaptor.md b/reference/execution/execution/get_await_completion_adaptor.md
new file mode 100644
index 000000000..cdf08b0b1
--- /dev/null
+++ b/reference/execution/execution/get_await_completion_adaptor.md
@@ -0,0 +1,53 @@
+# get_await_completion_adaptor
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct get_await_completion_adaptor_t { unspecified };
+  inline constexpr get_await_completion_adaptor_t get_await_completion_adaptor{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`get_await_completion_adaptor`は、関連付けられたAwaitable完了アダプタを問い合わせる[クエリオブジェクト](../queryable.md)である。
+
+コア定数式[`forwarding_query`](../forwarding_query.md)`(get_await_completion_adaptor)`は`true`値を返す。
+
+
+## 効果
+呼び出し式`get_await_completion_adaptor(env)`は下記と等価。
+
+- 引数`env`がconst修飾された`cenv`を用いて、式`cenv.query(get_await_completion_adaptor)`
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+const修飾[クエリ可能オブジェクト](../queryable.md)`cenv`に対して式`cenv.query(get_await_completion_adaptor)`が呼び出される。
+このとき、`noexcept(cenv.query(get_await_completion_adaptor)) == true`であること。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::as_awaitable`](as_awaitable.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3570R2 optional variants in sender/receiver](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3570r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_parallel_scheduler -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_parallel_scheduler.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/get_parallel_scheduler.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_parallel_scheduler.md b/reference/execution/execution/get_parallel_scheduler.md
new file mode 100644
index 000000000..a29bd63aa
--- /dev/null
+++ b/reference/execution/execution/get_parallel_scheduler.md
@@ -0,0 +1,60 @@
+# get_parallel_scheduler
+* execution[meta header]
+* function[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  parallel_scheduler get_parallel_scheduler();
+}
+```
+* parallel_scheduler[link parallel_scheduler.md]
+
+## 概要
+システムの[並列Scheduler](parallel_scheduler.md)を取得する。
+
+
+## 効果
+説明用の`eb`を[`system_context_replaceability::query_parallel_scheduler_backend()`](system_context_replaceability/query_parallel_scheduler_backend.md)の結果とする。
+
+もし`eb == nullptr`ならば、[`terminate`](/reference/exception/terminate.md)を呼び出す。そうでなければ、`eb`に関連付けられた[`parallel_scheduler`](parallel_scheduler.md)オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::scheduler auto sch = ex::get_parallel_scheduler();
+}
+```
+* ex::get_parallel_scheduler[color ff0000]
+* ex::scheduler[link scheduler.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](parallel_scheduler.md)
+- [`execution::system_context_replaceability`](system_context_replaceability.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>impls-for -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/impls-for.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/impls-for.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/impls-for.md b/reference/execution/execution/impls-for.md
index f875fb8a3..72f754f83 100644
--- a/reference/execution/execution/impls-for.md
+++ b/reference/execution/execution/impls-for.md
@@ -75,9 +75,10 @@ namespace std::execution {
 ```cpp
 []&amp;lt;class Sndr, class Rcvr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept -&amp;gt; decltype(auto) {
   auto&amp;amp; [_, data, ...child] = sndr;
-  return std::forward_like&amp;lt;Sndr&amp;gt;(data);
+  return allocator-aware-forward(std::forward_like&amp;lt;Sndr&amp;gt;(data), rcvr);
 }
 ```
+* allocator-aware-forward[link allocator-aware-forward.md]
 
 ### `start`メンバ
 `start`は、[`basic-operation`](basic-operation.md)実装における[開始(start)](start.md)のカスタマイゼーションポイントとして機能する。
@@ -146,4 +147,5 @@ static consteval void default-impls::check-types();
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3433R1 Allocator Support for Operation States](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3433r1.pdf)
 - [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/let_value.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index a92609bdc..a21829bfa 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -83,9 +83,11 @@ namespace std::execution {
     args_variant_t args;  // exposition only
     ops2_variant_t ops2;  // exposition only
   };
-  return state-type{std::forward_like&amp;lt;Sndr&amp;gt;(fn), let-env(child), {}, {}};
+  return state-type{allocator-aware-forward(std::forward_like&amp;lt;Sndr&amp;gt;(fn), rcvr),
+                    let-env(child), {}, {}};
 }
 ```
+* allocator-aware-forward[link allocator-aware-forward.md]
 
 - 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;`[`child-type`](child-type.md)`&amp;lt;Sndr&amp;gt;,` [`FWD-ENV-T`](../forwarding_query.md)`(`[`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;)&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータとし、パック`LetSigs`を`Sigs`に含まれる型のうち戻り値型が[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;set-cpo&amp;gt;`に等しいものと定義する。説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Args...&amp;gt;`と定義する。型`args_variant_t`は下記定義において重複削除した型となる。
 
@@ -132,7 +134,7 @@ namespace std::execution {
 using LetFn = remove_cvref_t&amp;lt;data-type&amp;lt;Sndr&amp;gt;&amp;gt;;
 auto cs = get_completion_signatures&amp;lt;child-type&amp;lt;Sndr&amp;gt;, FWD-ENV-T(Env)...&amp;gt;();
 auto fn = []&amp;lt;class... Ts&amp;gt;(decayed-typeof&amp;lt;set-cpo&amp;gt;(*)(Ts...)) {
-  if constexpr (!is-valid-let-sender) 　// see below
+  if constexpr (!is-valid-let-sender) // see below
     throw unspecified-exception();
 };
 cs.for-each(overload-set(fn, [](auto){}));
@@ -438,6 +440,7 @@ catch 0
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
 - [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
+- [P3433R1 Allocator Support for Operation States](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3433r1.pdf)
 - [P3557R3 High-Quality Sender Diagnostics with Constexpr Exceptions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3557r3.html)
 - [LWG 4203. Constraints on `get-state` functions are incorrect](https://cplusplus.github.io/LWG/issue4203)
 - [LWG 4204. specification of `as-sndr2(Sig)` in [exec.let] is incomplete](https://cplusplus.github.io/LWG/issue4204)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parallel_scheduler -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/parallel_scheduler.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/parallel_scheduler.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/parallel_scheduler.md b/reference/execution/execution/parallel_scheduler.md
new file mode 100644
index 000000000..b6f7f2361
--- /dev/null
+++ b/reference/execution/execution/parallel_scheduler.md
@@ -0,0 +1,118 @@
+# parallel_scheduler
+* execution[meta header]
+* class[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class parallel_scheduler { unspecified };
+}
+```
+* unspecified[italic]
+
+## 概要
+`parallel_scheduler`は、実行制御ライブラリ上でタスクの並列実行を可能とする並列[Scheduler](scheduler.md)である。
+
+`parallel_scheduler`はシステムグローバルなスレッドプール（実行リソース）に関連付けられ、[`schedule`](schedule.md)操作により得られる[Sender](sender.md)はスレッドプールに属する任意のスレッド（実行エージェント）上で実行される。
+
+下記のSenderアルゴリズムに対してカスタマイズ実装を提供することで、タスクの一括(bulk)実行をスレッドプールを利用したタスク並列(parallel)実行に変換する。
+
+- [`execution::bulk`](bulk.md) : `bulk_chunked`に変換してタスク並列実行
+- [`execution::bulk_chunked`](bulk_chunked.md) : インデクス範囲をチャンク単位でタスク並列実行
+- [`execution::bulk_unchunked`](bulk_unchunked.md) : インデクス範囲を要素単位でタスク並列実行
+
+[`execution::system_context_replaceability`](system_context_replaceability.md) 名前空間で定義されるインタフェースを介して、スレッドプール実装をユーザ定義の並列Schedulerバックエンドに置き換えることもできる。
+
+
+## クラス仕様
+`parallel_scheduler`は[`scheduler`](scheduler.md)のモデルである。
+
+説明用の`sch`を`parallel_scheduler`型のオブジェクト、`sch`が`ptr`と関連付けられるとき`BACKEND-OF(sch)`を`*ptr`とする。
+
+式[`get_forward_progress_guarantee`](get_forward_progress_guarantee.md)`(sch)`は[`forward_progress_guarantee::parallel`](forward_progress_guarantee.md)を返す。
+
+説明用の`sch2`を`parallel_scheduler`型のオブジェクトとしたとき、`BACKEND-OF(sch)`と`BACKEND-OF(sch2)`が同一オブジェクトを指す場合に限って、2つのオブジェクト`sch`と`sch2`は等しい。
+
+`rcvr`を[Receiver](receiver.md)としたとき、基底`B`を持つ`rcvr`のプロキシは下記を満たす`B`型の左辺値`r`となる。
+
+- `r.set_value()`は、[`set_value`](set_value.md)`(std::move(rcvr))`と同じ効果。
+- `r.set_error(e)`は、`e`を[`exception_ptr`](/reference/exception/exception_ptr.md)として、[`set_error`](set_error.md)`(std::move(rcvr), std::move(e))`と同じ効果。
+- `r.set_stopped()`は、[`set_stopped`](set_stopped.md)`(std::move(rcvr))`と同じ効果。
+
+プロキシ`r`に対する事前確保バックエンドストレージ(preallocated backend storage)は、[`span`](/reference/span/span.md)`&amp;lt;`[`byte`](/reference/cstddef/byte.md)`&amp;gt;`型のオブジェクト`s`であり、`r`に対して[`set_value`](set_value.md)／[`set_error`](set_error.md)／[`set_stopped`](set_stopped.md)いずれかが呼び出されるまで範囲`s`は有効かつ上書き可能である。
+
+呼び出し可能オブジェクト`f`と引数`arg`を持つ`rcvr`のバルクチャンク化プロキシ(bulk chunked proxy)は、基底
+[`system_context_replaceability::bulk_item_receiver_proxy`](system_context_replaceability/bulk_item_receiver_proxy.md)を持つ`rcvr`のプロキシ`r`であり、インデクス`i`, `j`に対する`r.execute(i, j)`は`f(i, j, args...)`と同じ効果を持つ。
+
+呼び出し可能オブジェクト`f`と引数`arg`を持つ`rcvr`のバルク非チャンク化プロキシ(bulk unchunked proxy)は、基底
+[`system_context_replaceability::bulk_item_receiver_proxy`](system_context_replaceability/bulk_item_receiver_proxy.md)を持つ`rcvr`のプロキシ`r`であり、インデクス`i`に対する`r.execute(i, i + 1)`は`f(i, args...)`と同じ効果を持つ。
+
+
+### `schedule`アルゴリズム
+説明用の`b`を`BACKEND-OF(sch)`、`sndr`を[`schedule`](schedule.md)`(sch)`が返すオブジェクト、`rcvr`を[Receiver](receiver.md)とする。`rcvr`が`sndr`に[接続(connect)](connect.md)され、結果の[Operation State](operation_state.md)が[開始(start)](start.md)されたとき、
+
+- `sndr`が値完了するならば、[`b.schedule`](system_context_replaceability/parallel_scheduler_backend/schedule.md)`(r, s)`が呼ばれる。このとき、
+    - `r`は基底[`system_context_replaceability::receiver_proxy`](system_context_replaceability/receiver_proxy.md)を持つ`rcvr`のプロキシであり、かつ
+    - `s`は`r`に対する事前確保バックエンドストレージである。
+- 他の全ての完了操作は、変更なしに転送される。
+
+
+### `bulk_chunked`アルゴリズム
+`parallel_scheduler`は[`bulk_chunked`](bulk_chunked.md)アルゴリズムのカスタマイズ実装を提供する。[Receiver](receiver.md)`rcvr`が`bulk_chunked(sndr, pol, shape, f)`が返す[Sender](sender.md)に[接続(connect)](connect.md)され、結果の[Operation State](operation_state.md)が[開始(start)](start.md)されたとき、
+
+- `sndr`が値`vals`で値完了するならば、`args`を`vals`を指す左辺値式のパックとして、[`b.schedule_bulk_chunked`](system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.md)`(shape, r, s)`が呼ばれる。このとき、
+    - `r`は呼び出し可能オブジェクト`f`と引数`arg`を持つ`rcvr`のバルクチャンク化プロキシであり、かつ
+    - `s`は`r`に対する事前確保バックエンドストレージである。
+- 他の全ての完了操作は、変更なしに転送される。
+
+
+### `bulk_unchunked`アルゴリズム
+`parallel_scheduler`は[`bulk_unchunked`](bulk_unchunked.md)アルゴリズムのカスタマイズ実装を提供する。[Receiver](receiver.md)`rcvr`が`bulk_unchunked(sndr, pol, shape, f)`が返す[Sender](sender.md)に[接続(connect)](connect.md)され、結果の[Operation State](operation_state.md)が[開始(start)](start.md)されたとき、
+
+- `sndr`が値`vals`で値完了するならば、`args`を`vals`を指す左辺値式のパックとして、[`b.schedule_bulk_unchunked`](system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.md)`(shape, r, s)`が呼ばれる。このとき、
+    - `r`は呼び出し可能オブジェクト`f`と引数`arg`を持つ`rcvr`のバルク非チャンク化プロキシであり、かつ
+    - `s`は`r`に対する事前確保バックエンドストレージである。
+- 他の全ての完了操作は、変更なしに転送される。
+
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::scheduler auto sch = ex::get_parallel_scheduler();
+  static_assert(std::same_as&amp;lt;decltype(sch), ex::parallel_scheduler&amp;gt;);
+}
+```
+* ex::parallel_scheduler[color ff0000]
+* ex::scheduler[link scheduler.md]
+* ex::get_parallel_scheduler()[link get_parallel_scheduler.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::get_parallel_scheduler`](get_parallel_scheduler.md)
+- [`execution::system_context_replaceability`](system_context_replaceability.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_scheduler -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/get_scheduler.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/run_loop/get_scheduler.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/get_scheduler.md b/reference/execution/execution/run_loop/get_scheduler.md
index cf45a1648..cde02aa02 100644
--- a/reference/execution/execution/run_loop/get_scheduler.md
+++ b/reference/execution/execution/run_loop/get_scheduler.md
@@ -40,7 +40,7 @@ int main()
                               ex::set_error_t(std::exception_ptr),
                               ex::set_stopped_t()&amp;gt;&amp;gt;);
 
-  // スケジュールSender属性の値完了スケジューラを確認
+  // スケジュールSender属性の値完了Schedulerを確認
   auto compl_sch = ex::get_completion_scheduler&amp;lt;ex::set_value_t&amp;gt;(ex::get_env(sndr));
   assert(compl_sch == sch);
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/scheduler.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 5c0fd70dc..8b908529a 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -107,6 +107,7 @@ int main()
 ## 関連項目
 - [`execution::schedule`](schedule.md)
 - [`execution::get_completion_scheduler`](get_completion_scheduler.md)
+- [`execution::get_parallel_scheduler`](get_parallel_scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scope_token -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scope_token.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/scope_token.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scope_token.md b/reference/execution/execution/scope_token.md
new file mode 100644
index 000000000..f44f23393
--- /dev/null
+++ b/reference/execution/execution/scope_token.md
@@ -0,0 +1,77 @@
+# scope_token
+* execution[meta header]
+* concept[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Token&amp;gt;
+  concept scope_token =
+    copyable&amp;lt;Token&amp;gt; &amp;amp;&amp;amp;
+    requires(const Token token) {
+      { token.try_associate() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      { token.disassociate() } noexcept -&amp;gt; same_as&amp;lt;void&amp;gt;;
+      { token.wrap(declval&amp;lt;test-sender&amp;gt;()) } -&amp;gt; sender_in&amp;lt;test-env&amp;gt;;
+    };
+}
+```
+* copyable[link /reference/concepts/copyable.md]
+* sender_in[link sender_in.md]
+* test-sender[italic]
+* test-env[italic]
+
+## 概要
+`scope_token`コンセプトは、[Sender](sender.md)と非同期スコープ間の関連付けを作成するために利用できる型`Token`に対する要件を定義する。
+
+`test-sender`と`test-env`は、[`sender_in`](sender_in.md)`&amp;lt;test-sender, test-env&amp;gt;`のモデルである未規定の型とする。
+
+
+## モデル
+型`Token`は、次のとき`scope_token`のモデルとなる。
+
+- `Token`型オブジェクトのコピー構築、ムーブ構築、コピー代入、ムーブ代入から例外送出しない、かつ
+- （const修飾の可能性のある）型`Token`の左辺値`token`が与えられたとき、型`decltype((sndr))`が[`sender`](sender.md)のモデルである全ての式`sndr`に対して、
+    - `token.warp(sndr)`が有効な式、かつ
+    - `decltype(token.warp(sndr))`は[`sender`](sender.md)のモデルであり、かつ
+    - [`sender_in`](sender_in.md)`&amp;lt;decltype((sndr)), E&amp;gt;`のモデルである全ての`E`型に対して、[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;decltype(token.wrap(sndr)), E&amp;gt;`は[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;decltype((sndr)), E&amp;gt;`と同一の完了シグネチャを含むこと。
+
+
+## 例
+```cpp example
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::counting_scope scope;
+  ex::scope_token auto token = scope.get_token();
+}
+```
+* ex::scope_token[color ff0000]
+* ex::counting_scope[link counting_scope.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::associate`](associate.md.nolink)
+- [`execution::spawn_future`](spawn_future.md.nolink)
+- [`execution::spawn`](spawn.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender-in-of -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender-in-of.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/sender-in-of.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender-in-of.md b/reference/execution/execution/sender-in-of.md
index 50fbb1aff..72721a6a4 100644
--- a/reference/execution/execution/sender-in-of.md
+++ b/reference/execution/execution/sender-in-of.md
@@ -47,7 +47,7 @@ namespace std::execution {
 * MATCHING-SIG[link get_completion_signatures.md]
 * gather-signatures[link gather-signatures.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md]
-* type_identity_t[link /reference/type_traits/true_type.md]
+* type_identity_t[link /reference/type_traits/type_identity.md]
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/sender.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 12b11c6be..e915cd2c3 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -59,7 +59,7 @@ inline constexpr bool enable_sender = enable-sender&amp;lt;Sndr&amp;gt;;
 ```cpp
 template&amp;lt;class Sndr&amp;gt;
 concept sender =
-  enable_sender&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;gt;) &amp;amp;&amp;amp;
+  enable_sender&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;gt; &amp;amp;&amp;amp;
   requires (const remove_cvref_t&amp;lt;Sndr&amp;gt;&amp;amp; sndr) {
     { get_env(sndr) } -&amp;gt; queryable;
   } &amp;amp;&amp;amp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>simple_counting_scope -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/simple_counting_scope.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope.md b/reference/execution/execution/simple_counting_scope.md
new file mode 100644
index 000000000..6ca315a01
--- /dev/null
+++ b/reference/execution/execution/simple_counting_scope.md
@@ -0,0 +1,201 @@
+# simple_counting_scope
+* execution[meta header]
+* class[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  class simple_counting_scope;
+}
+```
+
+## 概要
+`simple_counting_scope`は、カウント式の非同期スコープを表現する。
+
+
+## クラス仕様
+`simple_counting_scope`型と[`counting_scope`](counting_scope.md)型による非同期スコープは関連付けカウントを管理する。
+
+クラス動作説明用のメンバ変数として下記を保持する。
+
+- `count` : `size_t`型の関連付けカウント値
+- `state` : `scope-state-type`列挙型（後述）の状態
+
+
+### 状態遷移
+説明専用の各種エンティティを下記の通り定義する。
+
+- `Scope`型 : `simple_counting_scope`または`counting_scope`のいずれか
+- `scope`オブジェクト : `Scope`型のオブジェクト
+- `tkn`オブジェクト : `scope.get_token()`が返す`Scope::token`型のオブジェクト
+- `jsndr` : `scope.join()`が返す[Sender](sender.md)
+- `op` : `jsndr`を[Receiver](receiver.md)と接続して得られる[Operation State](operation_state.md)
+
+```cpp
+enum scope-state-type {  // exposition only
+  unused,                // exposition only
+  open,                  // exposition only
+  closed,                // exposition only
+  open-and-joining,      // exposition only
+  closed-and-joining,    // exposition only
+  unused-and-closed,     // exposition only
+  joined,                // exposition only
+};
+```
+
+`scope`はその生存期間中にさまざまな状態をとり、各状態で許可される操作とその結果を決定する：
+
+- `unused` : 新しく構築されたオブジェクトは`unused`状態で開始する。
+- `open` : `scope`が`unused`状態にあるとき`tkn.try_associate()`が呼び出されると、`scope`は`open`状態に遷移する。
+- `open-and-joining` : `scope`が`unused`または`open`状態にあるとき[Operation State](operation_state.md)`op`が[開始(start)](start.md)されると、`scope`は`open-and-joining`状態に遷移する。
+- `closed` : `scope`が`open`状態にあるとき`scope.close()`が呼び出されると、`scope`は`closed`状態に遷移する。
+- `unused-and-closed` : `scope`が`unused`状態にあるとき`scope.close()`が呼び出されると、`scope`は`unused-and-closed`状態に遷移する。
+- `closed-and-joining` : `scope`が`open-and-joining`状態にあるとき`scope.close()`が呼び出される、もしくは`scope`が`closed`または`unused-and-closed`状態にあるとき[Operation State](operation_state.md)`op`が[開始(start)](start.md)されると、`scope`は`closed-and-joining`状態に遷移する。
+- `joined` : `scope`が`open-and-joining`または`closed-and-joining`状態にあるとき関連付けカウントがゼロに到達すると、`scope`は`joined`状態に遷移する。
+
+
+### Senderアルゴリズムタグ `scope-join-t`
+説明専用の[Senderアルゴリズムタグ型](tag_of_t.md)`scope-join-t`を定義する。
+
+```cpp
+struct scope-join-t {};  // exposition only
+```
+
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;scope-join-t&amp;gt; : default-impls {
+    template&amp;lt;class Scope, class Rcvr&amp;gt;
+    struct state {                          // exposition only
+      struct rcvr-t {                       // exposition only
+        using receiver_concept = receiver_t;
+
+        Rcvr&amp;amp; rcvr;                         // exposition only
+
+        void set_value() &amp;amp;&amp;amp; noexcept {
+          execution::set_value(std::move(rcvr));
+        }
+
+        template&amp;lt;class E&amp;gt;
+          void set_error(E&amp;amp;&amp;amp; e) &amp;amp;&amp;amp; noexcept {
+            execution::set_error(std::move(rcvr), std::forward&amp;lt;E&amp;gt;(e));
+          }
+
+        void set_stopped() &amp;amp;&amp;amp; noexcept {
+          execution::set_stopped(std::move(rcvr));
+        }
+
+        decltype(auto) get_env() const noexcept {
+          return execution::get_env(rcvr);
+        }
+      };
+
+      using sched-sender =                  // exposition only
+        decltype(schedule(get_scheduler(get_env(declval&amp;lt;Rcvr&amp;amp;&amp;gt;()))));
+      using op-t =                          // exposition only
+        connect_result_t&amp;lt;sched-sender, rcvr-t&amp;gt;;
+
+      Scope* scope;                         // exposition only
+      Rcvr&amp;amp; receiver;                       // exposition only
+      op-t op;                              // exposition only
+
+      state(Scope* scope, Rcvr&amp;amp; rcvr)       // exposition only
+        noexcept(nothrow-callable&amp;lt;connect_t, sched-sender, rcvr-t&amp;gt;)
+        : scope(scope),
+          receiver(rcvr),
+          op(connect(schedule(get_scheduler(get_env(rcvr))), rcvr-t(rcvr))) {}
+
+      void complete() noexcept {            // exposition only
+        start(op);
+      }
+
+      void complete-inline() noexcept {     // exposition only
+        set_value(std::move(receiver));
+      }
+    };
+
+    static constexpr auto get-state =       // exposition only
+      []&amp;lt;class Rcvr&amp;gt;(auto&amp;amp;&amp;amp; sender, Rcvr&amp;amp; receiver)
+        noexcept(is_nothrow_constructible_v&amp;lt;state&amp;lt;Rcvr&amp;gt;, data-type&amp;lt;decltype(sender)&amp;gt;, Rcvr&amp;amp;&amp;gt;) {
+        auto[_, self] = sender;
+        return state(self, receiver);
+      };
+
+    static constexpr auto start =           // exposition only
+      [](auto&amp;amp; s, auto&amp;amp;) noexcept {
+        if (s.scope-&amp;gt;start-join-sender(s))
+          s.complete-inline();
+      };
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* receiver_t[link receiver.md]
+* execution::set_value[link set_value.md]
+* execution::set_error[link set_error.md]
+* execution::set_stopped[link set_stopped.md]
+* execution::get_env[link get_env.md]
+* schedule[link schedule.md]
+* get_scheduler[link get_scheduler.md]
+* connect_result_t[link connect_result_t.md]
+* connect_t[link connect.md]
+* connect[link connect.md]
+* start[link start.md]
+* data-type[link data-type.md]
+* nothrow-callable[link /reference/functional/nothrow-callable.md]
+* is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
+* std::move[link /reference/utility/move.md]
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](simple_counting_scope/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| [`(destructor)`](simple_counting_scope/op_destructor.md.nolink) | デストラクタ | C++26 |
+| [`get_token`](simple_counting_scope/get_token.md.nolink) | 非同期スコープトークンを取得 | C++26 |
+| [`close`](simple_counting_scope/close.md.nolink) | 非同期スコープを閉じる | C++26 |
+| [`join`](simple_counting_scope/join.md.nolink) | 非同期スコープを合流する[Sender](sender.md)取得 | C++26 |
+
+### 説明専用メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`try-associate`](simple_counting_scope/try-associate.md.nolink) | 関連付けを試行 | C++26 |
+| [`disassociate`](simple_counting_scope/disassociate.md.nolink) | 関連付けを解除| C++26 |
+| [`start-join-sender`](simple_counting_scope/start-join-sender.md.nolink) | 合流[Sender](sender.md)を開始 | C++26 |
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`token`](simple_counting_scope/token.md.nolink) | 非同期スコープトークン型 | C++26 |
+
+## 静的メンバ変数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `constexpr size_t max_associations = implementation-defined;` | 関連付けの最大数 | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::counting_scope`](counting_scope.md)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_error -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_error.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/stopped_as_error.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_error.md b/reference/execution/execution/stopped_as_error.md
index e48be987c..908ae52ab 100644
--- a/reference/execution/execution/stopped_as_error.md
+++ b/reference/execution/execution/stopped_as_error.md
@@ -19,7 +19,7 @@ namespace std::execution {
 
 
 ## 効果
-説明用の式`sndr`と`err`に対して、型`Sndr`を`decltype((sndr))`、型`Err`を`decltype((err))`とする。`Sndr`が[`sender`](sender.md)を満たさない、もしくは`Err`が[`moveable-value`](../movable-value.md)を満たさないとき、呼び出し式`stopped_as_error(sndr, err)`は不適格となる。
+説明用の式`sndr`と`err`に対して、型`Sndr`を`decltype((sndr))`、型`Err`を`decltype((err))`とする。`Sndr`が[`sender`](sender.md)を満たさない、もしくは`Err`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`stopped_as_error(sndr, err)`は不適格となる。
 
 そうでなければ、呼び出し式`stopped_as_error(sndr, err)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>system_context_replaceability -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability.md b/reference/execution/execution/system_context_replaceability.md
new file mode 100644
index 000000000..c52b84ff4
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability.md
@@ -0,0 +1,40 @@
+# system_context_replaceability
+* execution[meta header]
+* std::execution[meta namespace]
+* namespace[meta id-type]
+* cpp26[meta cpp]
+
+名前空間 `std::execution::system_context_replaceability` では、[並列Scheduler](parallel_scheduler.md)動作をユーザが差し替えるためのインタフェースを定義する。
+
+```cpp
+namespace std::execution::system_context_replaceability {
+  …
+}
+```
+
+[並列Scheduler](parallel_scheduler.md)をユーザ実装で置き換える場合、下記が必要となる。
+
+- [`system_context_replaceability::parallel_scheduler_backend`](system_context_replaceability/parallel_scheduler_backend.md)インターフェースをバックエンドにもつ並列Schedulerを実装する。
+- 処理系の手順に従って、[`system_context_replaceability::query_parallel_scheduler_backend`](system_context_replaceability/query_parallel_scheduler_backend.md)シンボルを自前バックエンド実装を返す関数で置き換える。
+
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`receiver_proxy`](system_context_replaceability/receiver_proxy.md) | バックエンド実装用のReceiverプロキシ (class) | C++26 |
+| [`bulk_item_receiver_proxy`](system_context_replaceability/bulk_item_receiver_proxy.md) | バックエンド実装用のバルク処理Receiverプロキシ (class) | C++26 |
+| [`parallel_scheduler_backend`](system_context_replaceability/parallel_scheduler_backend.md) | 並列Schedulerバックエンド (class) | C++26 |
+| [`query_parallel_scheduler_backend`](system_context_replaceability/query_parallel_scheduler_backend.md) | 並列Schedulerバックエンドを問い合わせ (function) | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](parallel_scheduler.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bulk_item_receiver_proxy -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/bulk_item_receiver_proxy.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/bulk_item_receiver_proxy.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/bulk_item_receiver_proxy.md b/reference/execution/execution/system_context_replaceability/bulk_item_receiver_proxy.md
new file mode 100644
index 000000000..941bc8593
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/bulk_item_receiver_proxy.md
@@ -0,0 +1,42 @@
+# bulk_item_receiver_proxy
+* execution[meta header]
+* class[meta id-type]
+* std::execution::system_context_replaceability[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution::system_context_replaceability {
+  struct bulk_item_receiver_proxy : receiver_proxy { see below };
+}
+```
+* receiver_proxy[link receiver_proxy.md]
+
+## 概要
+`bulk_item_receiver_proxy`は、[`receiver_proxy`](receiver_proxy.md)から派生したクラス。
+[`bulk_chunked`](../bulk_chunked.md)および[`bulk_unchunked`](../bulk_unchunked.md)のカスタマイズで用いられ、異なる反復に対応する[`parallel_scheduler_backend`](parallel_scheduler_backend.md)実装から通知も受信する。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `virtual void execute(size_t, size_t) noexcept = 0;` | 要素範囲の作業ハンドラ | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](../parallel_scheduler.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parallel_scheduler_backend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/parallel_scheduler_backend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend.md b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend.md
new file mode 100644
index 000000000..20db9b766
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend.md
@@ -0,0 +1,44 @@
+# parallel_scheduler_backend
+* execution[meta header]
+* class[meta id-type]
+* std::execution::system_context_replaceability[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution::system_context_replaceability {
+  struct parallel_scheduler_backend;
+}
+```
+
+## 概要
+`parallel_scheduler_backend`は、[並列Scheduler](../parallel_scheduler.md)バックエンド実装者向けのインタフェースを定義する。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(destructor)`](parallel_scheduler_backend/op_destructor.md) | デストラクタ | C++26 |
+| [`schedule`](parallel_scheduler_backend/schedule.md) | [`schedule`](../schedule.md)アルゴリズム動作カスタマイズ | C++26 |
+| [`schedule_bulk_chunked`](parallel_scheduler_backend/schedule_bulk_chunked.md) | [`bulk_chunked`](../bulk_chunked.md)アルゴリズム動作カスタマイズ | C++26 |
+| [`schedule_bulk_unchunked`](parallel_scheduler_backend/schedule_bulk_unchunked.md) | [`bulk_unchunked`](../bulk_unchunked.md)アルゴリズム動作カスタマイズ | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](../parallel_scheduler.md)
+- [`execution::system_context_replaceability::query_parallel_scheduler_backend`](query_parallel_scheduler_backend.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/op_destructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/op_destructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/op_destructor.md b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/op_destructor.md
new file mode 100644
index 000000000..adeb12608
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/op_destructor.md
@@ -0,0 +1,28 @@
+# デストラクタ
+* execution[meta header]
+* std::execution::system_context_replaceability[meta namespace]
+* parallel_scheduler_backend[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+virtual ~parallel_scheduler_backend() = default;
+```
+
+## 概要
+`parallel_scheduler_backend`オブジェクトを破棄する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule.md b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule.md
new file mode 100644
index 000000000..56b1a53f9
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule.md
@@ -0,0 +1,54 @@
+# schedule
+* execution[meta header]
+* std::execution::system_context_replaceability[meta namespace]
+* parallel_scheduler_backend[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+virtual void schedule(receiver_proxy&amp;amp; r, span&amp;lt;byte&amp;gt; s) noexcept = 0;
+```
+* receiver_proxy[link ../receiver_proxy.md]
+* span[link /reference/span/span.md]
+* byte[link /reference/cstddef/byte.md]
+
+## 概要
+[`parallel_scheduler`](../../parallel_scheduler.md)による[`schedule`](../../schedule.md)アルゴリズムカスタマイズのバックエンド側を実装する。
+
+
+## 事前条件
+`*this`, `r`が参照するオブジェクト, `s`が参照するストレージの生存期間終了は、下記いずれか式の評価開始よりも後に発生(happen after)すること。
+
+
+## 効果
+派生クラスでは、この関数を下記のように実装すべきである。
+
+- 下記いずれかの式が評価される
+    - エラーが発生せず作業が成功したとき、[`r.set_value()`](../receiver_proxy.md)
+    - エラーが発生したとき、`eptr`を[`exception_ptr`](/reference/exception/exception_ptr.md)型のオブジェクトとして、[`r.set_error`](../receiver_proxy.md)`(eptr)`
+    - 作業がキャンセルされたとき、[`r.set_stopped()`](../receiver_proxy.md)
+- 任意の`r.set_value()`呼び出しは、`*this`で表される実行コンテキストの実行エージェント上で発生する。
+
+
+## 備考
+`s`が参照するストレージは、この呼び出しによって開始された操作の実行期間中`*this`によって一時的なストレージとして使用される可能性がある。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::schedule`](../../schedule.md)
+- [`execution::parallel_scheduler`](../../parallel_scheduler.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_bulk_chunked -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.md b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.md
new file mode 100644
index 000000000..809730d13
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_chunked.md
@@ -0,0 +1,60 @@
+# schedule_bulk_chunked
+* execution[meta header]
+* std::execution::system_context_replaceability[meta namespace]
+* parallel_scheduler_backend[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+virtual void schedule_bulk_chunked(size_t n,
+                                   bulk_item_receiver_proxy&amp;amp; r,
+                                   span&amp;lt;byte&amp;gt; s) noexcept = 0;
+```
+* bulk_item_receiver_proxy[link ../bulk_item_receiver_proxy.md]
+* span[link /reference/span/span.md]
+* byte[link /reference/cstddef/byte.md]
+
+## 概要
+[`parallel_scheduler`](../../parallel_scheduler.md)による[`bulk_chunked`](../../bulk_chunked.md)アルゴリズムカスタマイズのバックエンド側を実装する。
+
+
+## 事前条件
+`*this`, `r`が参照するオブジェクト, `s`が参照するストレージの生存期間終了は、下記いずれか式の評価開始よりも後に発生(happen after)すること。
+
+
+## 効果
+派生クラスでは、この関数を下記のように実装すべきである。
+
+- 下記いずれかの式が評価される
+    - エラーが発生せず作業が成功したとき、[`r.set_value()`](../receiver_proxy.md)
+    - エラーが発生したとき、`eptr`を[`exception_ptr`](/reference/exception/exception_ptr.md)型のオブジェクトとして、[`r.set_error`](../receiver_proxy.md)`(eptr)`
+    - 作業がキャンセルされたとき、[`r.set_stopped()`](../receiver_proxy.md)
+- [`r.execute`](../bulk_item_receiver_proxy.md)`(b, e)`が呼ばれたとき、`b`と`e`は範囲`[0, n)`内かつ`b &amp;lt; e`である
+- 範囲`[0, n)`の各`i`について、`i`が`[b, e)`の範囲内にある[`r.execute`](../bulk_item_receiver_proxy.md)`(b, e)`の呼び出しが最大で1つだけ存在する。
+- `r.set_value()`が呼び出されたとき、`[0, n)`の各`i`に対して、`i`が`[b, e)`の範囲内となる[`r.execute`](../bulk_item_receiver_proxy.md)`(b, e)`の呼び出しが正確に1つだけ存在する。
+- `r`上での全ての`execute`呼び出しは、`r`上での`set_value`／`set_error`／`set_stopped`いずれかの呼び出しよりも前に発生する。
+- `r`上での全ての`execute`および`set_value`呼び出しは、`*this`で表される実行コンテキストの実行エージェント上で行われる。
+
+
+## 備考
+`s`が参照するストレージは、この呼び出しによって開始された操作の実行期間中`*this`によって一時的なストレージとして使用される可能性がある。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::bulk_chunked`](../../bulk_chunked.md)
+- [`execution::parallel_scheduler`](../../parallel_scheduler.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_bulk_unchunked -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.md b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.md
new file mode 100644
index 000000000..b85483f7d
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/parallel_scheduler_backend/schedule_bulk_unchunked.md
@@ -0,0 +1,59 @@
+# schedule_bulk_unchunked
+* execution[meta header]
+* std::execution::system_context_replaceability[meta namespace]
+* parallel_scheduler_backend[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+virtual void schedule_bulk_unchunked(size_t n,
+                                     bulk_item_receiver_proxy&amp;amp; r,
+                                     span&amp;lt;byte&amp;gt; s) noexcept = 0;
+```
+* bulk_item_receiver_proxy[link ../bulk_item_receiver_proxy.md]
+* span[link /reference/span/span.md]
+* byte[link /reference/cstddef/byte.md]
+
+## 概要
+[`parallel_scheduler`](../../parallel_scheduler.md)による[`bulk_unchunked`](../../bulk_unchunked.md)アルゴリズムカスタマイズのバックエンド側を実装する。
+
+
+## 事前条件
+`*this`, `r`が参照するオブジェクト, `s`が参照するストレージの生存期間終了は、下記いずれか式の評価開始よりも後に発生(happen after)すること。
+
+
+## 効果
+派生クラスでは、この関数を下記のように実装すべきである。
+
+- 下記いずれかの式が評価される
+    - エラーが発生せず作業が成功したとき、[`r.set_value()`](../receiver_proxy.md)
+    - エラーが発生したとき、`eptr`を[`exception_ptr`](/reference/exception/exception_ptr.md)型のオブジェクトとして、[`r.set_error`](../receiver_proxy.md)`(eptr)`
+    - 作業がキャンセルされたとき、[`r.set_stopped()`](../receiver_proxy.md)
+- [`r.execute`](../bulk_item_receiver_proxy.md)`(b, e)`が呼ばれたとき、`b`は範囲`[0, n)`内かつ`e`は`b + 1`に等しい。`[0, n)`の各`i`について、[`r.execute`](../bulk_item_receiver_proxy.md)`(i, i + 1)`の呼び出しが最大で1つだけ存在する。
+- `r.set_value()`が呼び出されたとき、`[0, n)`の各`i`に対して、[`r.execute`](../bulk_item_receiver_proxy.md)`(i, i + 1)`の呼び出しが正確に1つだけ存在する。
+- `r`上での全ての`execute`呼び出しは、`r`上での`set_value`／`set_error`／`set_stopped`いずれかの呼び出しよりも前に発生する。
+- `r`上での全ての`execute`および`set_value`呼び出しは、`*this`で表される実行コンテキストの実行エージェント上で行われる。
+
+
+## 備考
+`s`が参照するストレージは、この呼び出しによって開始された操作の実行期間中`*this`によって一時的なストレージとして使用される可能性がある。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::bulk_unchunked`](../../bulk_unchunked.md)
+- [`execution::parallel_scheduler`](../../parallel_scheduler.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>query_parallel_scheduler_backend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/query_parallel_scheduler_backend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/query_parallel_scheduler_backend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/query_parallel_scheduler_backend.md b/reference/execution/execution/system_context_replaceability/query_parallel_scheduler_backend.md
new file mode 100644
index 000000000..767d18c88
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/query_parallel_scheduler_backend.md
@@ -0,0 +1,43 @@
+# query_parallel_scheduler_backend
+* execution[meta header]
+* function[meta id-type]
+* std::execution::system_context_replaceability[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution::system_context_replaceability {
+  shared_ptr&amp;lt;parallel_scheduler_backend&amp;gt; query_parallel_scheduler_backend();
+}
+```
+* parallel_scheduler_backend[link parallel_scheduler_backend.md]
+
+## 概要
+[並列Scheduler](../parallel_scheduler.md)の実装オブジェクトを返す。
+
+
+## 効果
+[`parallel_scheduler_backend`](parallel_scheduler_backend.md)インタフェースを実装したオブジェクトを指す非ヌル[`shared_ptr`](/reference/memory/shared_ptr.md)を返す。
+
+
+## 備考
+この関数は置換可能(replaceable)である。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](../parallel_scheduler.md)
+- [`execution::system_context_replaceability::parallel_scheduler_backend`](parallel_scheduler_backend.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver_proxy -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/receiver_proxy.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/receiver_proxy.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/receiver_proxy.md b/reference/execution/execution/system_context_replaceability/receiver_proxy.md
new file mode 100644
index 000000000..21ddce22f
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/receiver_proxy.md
@@ -0,0 +1,44 @@
+# receiver_proxy
+* execution[meta header]
+* class[meta id-type]
+* std::execution::system_context_replaceability[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution::system_context_replaceability {
+  struct receiver_proxy;
+}
+```
+
+## 概要
+`receiver_proxy`は、[`parallel_scheduler_backend`](parallel_scheduler_backend.md)実装から完了操作のトリガー通知を受け取る[`Receiver`](../receiver.md)を表現する。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `virtual ~receiver_proxy() = default;` | デストラクタ | C++26 |
+| `virtual void set_value() noexcept = 0;` | 値完了ハンドラ | C++26 |
+| `virtual void set_error(exception_ptr) noexcept = 0;` | エラー完了ハンドラ | C++26 |
+| `virtual void set_stopped() noexcept = 0;` | 停止完了ハンドラ | C++26 |
+| [`try_query`](receiver_proxy/try_query.md) | クエリオブジェクト問い合わせ | C++26 |
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](../parallel_scheduler.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_query -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/system_context_replaceability/receiver_proxy/try_query.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/system_context_replaceability/receiver_proxy/try_query.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/system_context_replaceability/receiver_proxy/try_query.md b/reference/execution/execution/system_context_replaceability/receiver_proxy/try_query.md
new file mode 100644
index 000000000..e12337398
--- /dev/null
+++ b/reference/execution/execution/system_context_replaceability/receiver_proxy/try_query.md
@@ -0,0 +1,57 @@
+# try_query
+* execution[meta header]
+* std::execution::system_context_replaceability[meta namespace]
+* receiver_proxy[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class P, class-type Query&amp;gt;
+optional&amp;lt;P&amp;gt; try_query(Query q) noexcept;
+```
+* class-type[link ../../../class-type.md]
+* optional[link /reference/optional/optional.md]
+
+## 概要
+[`parallel_scheduler`](../../parallel_scheduler.md)バックエンド実装側から[Receiver](../../receiver.md)環境にアクセスするための補助関数。
+
+
+## 適格要件
+`P`はcv修飾された非配列オブジェクト型。
+
+
+## 戻り値
+説明用の`env`を`*this`が表現する[Receiver](../../receiver.md)の環境とする。
+下記を満たす場合は[`nullopt`](/reference/optional/nullopt_t.md)を返す。そうでなければ、`q(env)`を返す。
+
+- `Query`が実装定義でサポートされるクエリ集合のメンバではない、または
+- `P`が実装定義でサポートされる`Query`の結果型集合のメンバではない、または
+- 式`q(env)`が適格でないか、cv修飾された`P`型を持たない。
+
+
+## 例外
+投げない
+
+
+## 備考
+[`get_stop_token_t`](../../../get_stop_token.md)は実装定義でサポートるクエリ集合に含まれ、[`inplace_stop_token`](/reference/stop_token/inplace_stop_token.md)は`get_stop_token_t`の実装定義でサポートされる結果型集合のメンバである。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::parallel_scheduler`](../../parallel_scheduler.md)
+- [`execution::system_context_replaceability::parallel_scheduler_backend`](../parallel_scheduler_backend.md)
+
+
+## 参照
+- [P2079R10 Parallel scheduler](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2079r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upon_error -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/upon_error.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/upon_error.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/upon_error.md b/reference/execution/execution/upon_error.md
index 7303d018e..0bf0b74df 100644
--- a/reference/execution/execution/upon_error.md
+++ b/reference/execution/execution/upon_error.md
@@ -50,7 +50,7 @@ int main()
 ```
 * ex::upon_error[color ff0000]
 * ex::sender[link sender.md]
-* ex::just_error[link just.md]
+* ex::just_error[link just_error.md]
 * std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
 * value()[link /reference/optional/optional/value.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upon_stopped -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/upon_stopped.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/upon_stopped.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/upon_stopped.md b/reference/execution/execution/upon_stopped.md
index 2dc21cde4..be0deec45 100644
--- a/reference/execution/execution/upon_stopped.md
+++ b/reference/execution/execution/upon_stopped.md
@@ -49,7 +49,7 @@ int main()
 ```
 * ex::upon_stopped[color ff0000]
 * ex::sender[link sender.md]
-* ex::just_stopped[link just.md]
+* ex::just_stopped[link just_stopped.md]
 * std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
 * value()[link /reference/optional/optional/value.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/execution/when_all.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 77723717c..d61223b37 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -368,7 +368,7 @@ int main()
   // snd1,snd2両方の完了を待機するSender
   ex::sender auto sndr = ex::when_all(snd1, snd2);
 
-　auto result = std::this_thread::sync_wait(sndr);
+  auto result = std::this_thread::sync_wait(sndr);
   // result := optional&amp;lt;tuple&amp;lt;string,int,char&amp;gt;&amp;gt;型
   std::println(&amp;#34;result={}&amp;#34;, result.value());
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding_query -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding_query.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/execution/forwarding_query.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding_query.md b/reference/execution/forwarding_query.md
index 8b5e23a84..6a8735bdf 100644
--- a/reference/execution/forwarding_query.md
+++ b/reference/execution/forwarding_query.md
@@ -49,6 +49,7 @@ namespace std {
 - [`execution::get_scheduler`](execution/get_scheduler.md)
 - [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md)
 - [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md)
+- [`execution::get_await_completion_adaptor`](execution/get_await_completion_adaptor.md)
 
 下記[クエリオブジェクト](queryable.md)に対する問い合わせは、`FWD-ENV`経由で転送されない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unexpect_t -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/expected/unexpect_t.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/expected/unexpect_t.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/unexpect_t.md b/reference/expected/unexpect_t.md
index f64b2c48b..698d436fb 100644
--- a/reference/expected/unexpect_t.md
+++ b/reference/expected/unexpect_t.md
@@ -35,7 +35,7 @@ int main()
 }
 ```
 * std::unexpect[color ff0000]
-* ETIMEDOUT[link /reference/system_error/errc.md]
+* ETIMEDOUT[link /reference/cerrno.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_absolute -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/is_absolute.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/filesystem/path/is_absolute.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/is_absolute.md b/reference/filesystem/path/is_absolute.md
index d84d415e3..d3393e830 100644
--- a/reference/filesystem/path/is_absolute.md
+++ b/reference/filesystem/path/is_absolute.md
@@ -12,7 +12,7 @@ bool is_absolute() const;
 ## 概要
 パスが絶対パスかを判定する。
 
-絶対パスとは、追加の開始位置を必要とせずに、曖昧さなく特定の場所の場所を参照できるパスのことである。その定義はOSに依存する。
+絶対パスとは、追加の開始位置を必要とせずに、曖昧さなく特定の場所を参照できるパスのことである。その定義はOSに依存する。
 
 ## 戻り値
 パスが絶対パスであれば`true`、そうでなければ`false`を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>proximate -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/proximate.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/filesystem/proximate.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/proximate.md b/reference/filesystem/proximate.md
index 86623aea1..01a8205df 100644
--- a/reference/filesystem/proximate.md
+++ b/reference/filesystem/proximate.md
@@ -24,8 +24,8 @@ namespace std::filesystem {
 
 ## 戻り値
 - (1) : `return proximate(p,` [`current_path()`](current_path.md)`, ec);`
-- (2) : `return` [`weakly_canonical`](weakly_canonical.md)`(p).`[`lexically_proximate`](path/lexically_relative.md)`(`[`weakly_canonical`](weakly_canonical.md)`(base));`
-- (3) : `return` [`weakly_canonical`](weakly_canonical.md)`(p, ec).`[`lexically_proximate`](path/lexically_relative.md)`(`[`weakly_canonical`](weakly_canonical.md)`(base, ec));`
+- (2) : `return` [`weakly_canonical`](weakly_canonical.md)`(p).`[`lexically_proximate`](path/lexically_proximate.md)`(`[`weakly_canonical`](weakly_canonical.md)`(base));`
+- (3) : `return` [`weakly_canonical`](weakly_canonical.md)`(p, ec).`[`lexically_proximate`](path/lexically_proximate.md)`(`[`weakly_canonical`](weakly_canonical.md)`(base, ec));`
 
 (1)と(3)でエラーが発生した場合、`ec`にエラー情報が書き込まれ、`path()`が返る。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_map/insert.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert.md b/reference/flat_map/flat_map/insert.md
index e59a48601..29d235abb 100644
--- a/reference/flat_map/flat_map/insert.md
+++ b/reference/flat_map/flat_map/insert.md
@@ -119,8 +119,8 @@ void insert(sorted_unique_t s,
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
     * std::move[link /reference/utility/move.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
@@ -153,8 +153,8 @@ void insert(sorted_unique_t s,
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
     * std::move[link /reference/utility/move.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
     - 最後に、重複する要素を以下のように削除する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert_or_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_map/insert_or_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert_or_assign.md b/reference/flat_map/flat_map/insert_or_assign.md
index 04916e47d..498b84e1a 100644
--- a/reference/flat_map/flat_map/insert_or_assign.md
+++ b/reference/flat_map/flat_map/insert_or_assign.md
@@ -84,9 +84,9 @@ iterator
     - `k`と等価なキーをもつ要素`e`が存在している場合、[`std::forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)`を`e.second`に代入する
     - そうでなければ、以下と等価：
     ```cpp
-    try_emplace_hint(hint, std::forward&amp;lt;decltype(k)&amp;gt;(k), std::forward&amp;lt;M&amp;gt;(obj));
+    try_emplace(hint, std::forward&amp;lt;decltype(k)&amp;gt;(k), std::forward&amp;lt;M&amp;gt;(obj));
     ```
-    * try_emplace_hint[link try_emplace.md]
+    * try_emplace[link try_emplace.md]
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_map/insert_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert_range.md b/reference/flat_map/flat_map/insert_range.md
index 207bc7a8f..99a441d6a 100644
--- a/reference/flat_map/flat_map/insert_range.md
+++ b/reference/flat_map/flat_map/insert_range.md
@@ -35,8 +35,8 @@ Rangeを挿入し、コンテナを拡張する。
     * c.values[link containers.md]
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_map/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/rend.md b/reference/flat_map/flat_map/rend.md
index ce633acd2..f77850a43 100644
--- a/reference/flat_map/flat_map/rend.md
+++ b/reference/flat_map/flat_map/rend.md
@@ -63,7 +63,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |------------------------------|--------------------------------------------|
 | [`flat_map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`flat_map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap/insert.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_multimap/insert.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap/insert.md b/reference/flat_map/flat_multimap/insert.md
index 4f8ebed9f..db793d5aa 100644
--- a/reference/flat_map/flat_multimap/insert.md
+++ b/reference/flat_map/flat_multimap/insert.md
@@ -115,8 +115,8 @@ void insert(sorted_equivalent_t,
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
     * std::move[link /reference/utility/move.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
@@ -134,8 +134,8 @@ void insert(sorted_equivalent_t,
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
     * std::move[link /reference/utility/move.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap/insert_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_multimap/insert_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap/insert_range.md b/reference/flat_map/flat_multimap/insert_range.md
index 154da00c0..c5ec73816 100644
--- a/reference/flat_map/flat_multimap/insert_range.md
+++ b/reference/flat_map/flat_multimap/insert_range.md
@@ -31,8 +31,8 @@ Rangeを挿入し、コンテナを拡張する。
     * c.values[link containers.md]
     * end()[link /reference/vector/vector/end.md]
     * insert[link /reference/vector/vector/insert.md]
-    * first[link /reference/utility/pair.md]
-    * second[link /reference/utility/pair.md]
+    * first[link /reference/utility/pair/first.md]
+    * second[link /reference/utility/pair/second.md]
 
     - 次に、新しく挿入された要素の範囲を`value_comp()`を基準にソートする
     - 次に、ソートされた結果の範囲と、既存の要素のソートされた範囲をひとつのソートされた範囲にマージする
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_map/flat_multimap/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap/rend.md b/reference/flat_map/flat_multimap/rend.md
index 1d15efc30..d9c371100 100644
--- a/reference/flat_map/flat_multimap/rend.md
+++ b/reference/flat_map/flat_multimap/rend.md
@@ -61,7 +61,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |----------------------------------------|--------------------------------------------|
 | [`flat_multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`flat_multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_set/flat_multiset/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/rend.md b/reference/flat_set/flat_multiset/rend.md
index d558a8e81..9e5d1f744 100644
--- a/reference/flat_set/flat_multiset/rend.md
+++ b/reference/flat_set/flat_multiset/rend.md
@@ -56,7 +56,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |-----------------------------------|-----------------------------|
 | [`flat_multiset::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`flat_multiset::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/flat_set/flat_set/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/rend.md b/reference/flat_set/flat_set/rend.md
index 5980906ec..6ba74bfb3 100644
--- a/reference/flat_set/flat_set/rend.md
+++ b/reference/flat_set/flat_set/rend.md
@@ -55,7 +55,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |-----------------------------------|-----------------------------|
 | [`flat_set::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`flat_set::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_parse_context -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/format/basic_format_parse_context.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context.md b/reference/format/basic_format_parse_context.md
index 552f6ef5e..e1211f92f 100644
--- a/reference/format/basic_format_parse_context.md
+++ b/reference/format/basic_format_parse_context.md
@@ -110,7 +110,7 @@ namespace std {
   };
 }
 ```
-* format_error[link /reference/string_view/basic_string_view.md]
+* format_error[link /reference/format/format_error.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/format/format.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 6b01cd0e8..c3801f9ab 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -241,7 +241,7 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 | m    | `std::map`出力向けの書式 | 全体の囲み文字を`[ ]`の代わりに`{ }`とする。要素型にも`m`書式を適用する | C++23 |
 | s    | 文字列として出力 | 要素型が文字型であること。エスケープ処理しない文字列として書式化する | C++23 |
 | ?s   | デバッグ文字列として出力 | 要素型が文字型であること。エスケープした文字列として書式化する | C++23 |
-| (なし) | デフォルト | 囲み文字を`[ ]`、区切り文字を`, `として書式化する | C++23 |
+| (なし) | デフォルト | 囲み文字を`[ ]`、区切り文字を&amp;lt;code&amp;gt;, &amp;lt;/code&amp;gt;として書式化する | C++23 |
 
 - `m`書式は、要素が[`std::pair`](/reference/utility/pair.md)とサイズ2の[`std::tuple`](/reference/tuple/tuple.md)の場合のみ指定できる
 - `?s`書式を指定した場合、`n`オプションと、`range-underlying-spec`は指定できない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/format/format_to.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index a71fa82e9..482c3af2f 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -138,7 +138,7 @@ wstring format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const
 * wformat_string[link basic_format_string.md]
 * str[italic]
 * basic_format_context[link basic_format_context.md]
-* vformat_to[link vformat.md]
+* vformat_to[link vformat_to.md]
 * make_format_args[link make_format_args.md]
 * locale[link /reference/locale/locale.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_list -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/forward_list/forward_list.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list.md b/reference/forward_list/forward_list.md
index 097248912..0b7fdb8ee 100644
--- a/reference/forward_list/forward_list.md
+++ b/reference/forward_list/forward_list.md
@@ -193,7 +193,7 @@ int main()
 * ls.insert_after[link forward_list/insert_after.md]
 * ls.begin()[link forward_list/begin.md]
 * ls.cbegin()[link forward_list/cbegin.md]
-* ls.cend()[link forward_list/end.md]
+* ls.cend()[link forward_list/cend.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_fstream/close.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/fstream/basic_fstream/close.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_fstream/close.md b/reference/fstream/basic_fstream/close.md
index 64a0dc607..c84a75926 100644
--- a/reference/fstream/basic_fstream/close.md
+++ b/reference/fstream/basic_fstream/close.md
@@ -14,7 +14,7 @@ void close();
 
 ## 効果
 
-[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値が戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
+[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ifstream/close.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/fstream/basic_ifstream/close.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ifstream/close.md b/reference/fstream/basic_ifstream/close.md
index e9eabef8d..bf0ecf641 100644
--- a/reference/fstream/basic_ifstream/close.md
+++ b/reference/fstream/basic_ifstream/close.md
@@ -14,7 +14,7 @@ void close();
 
 ## 効果
 
-[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値が戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
+[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_ofstream/close.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/fstream/basic_ofstream/close.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_ofstream/close.md b/reference/fstream/basic_ofstream/close.md
index 30a146070..64bad9b65 100644
--- a/reference/fstream/basic_ofstream/close.md
+++ b/reference/fstream/basic_ofstream/close.md
@@ -14,7 +14,7 @@ void close();
 
 ## 効果
 
-[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値が戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
+[`rdbuf()-&amp;gt;close()`](/reference/fstream/basic_filebuf/close.md)を呼び出す。その戻り値がヌルポインタだった場合、[`setstate(failbit)`](/reference/ios/basic_ios/setstate.md)を呼び出す。
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind_back -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind_back.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/functional/bind_back.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind_back.md b/reference/functional/bind_back.md
index 938e33f7b..7cf693553 100644
--- a/reference/functional/bind_back.md
+++ b/reference/functional/bind_back.md
@@ -37,7 +37,7 @@ namespace std {
 - (2) : `F`を`f`の型として
     - `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;BoundArgs, Args&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;BoundArgs&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+    - もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind_front -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind_front.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/functional/bind_front.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind_front.md b/reference/functional/bind_front.md
index f2158da71..0bfb6a2dc 100644
--- a/reference/functional/bind_front.md
+++ b/reference/functional/bind_front.md
@@ -67,7 +67,7 @@ auto f3 = bind_front(&amp;amp;Strategy::process, Strategy{});
 - (2) : `F`を`f`の型として
     - `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;BoundArgs, Args&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;BoundArgs&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+    - もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hash -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/functional/hash.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/functional/hash.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/hash.md b/reference/functional/hash.md
index 7129a58c8..041e785e1 100644
--- a/reference/functional/hash.md
+++ b/reference/functional/hash.md
@@ -194,11 +194,11 @@ found : 3
 | [`&amp;lt;filesystem&amp;gt;`](/reference/filesystem.md) | [`std::filesystem::path`](/reference/filesystem/path.md) |
 | [`&amp;lt;optional&amp;gt;`](/reference/optional.md) | [`std::optional`](/reference/optional/optional.md) |
 | [`&amp;lt;memory&amp;gt;`](/reference/memory.md) | [`std::shared_ptr`](/reference/memory/shared_ptr.md), [`std::unique_ptr`](/reference/memory/unique_ptr.md) |
-| [`&amp;lt;stacktrace&amp;gt;`](/reference/stacktrace.md) | [`std::basic_backtrace`](/reference/stacktrace/basic_stacktrace.md), [`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md) |
+| [`&amp;lt;stacktrace&amp;gt;`](/reference/stacktrace.md) | [`std::basic_stacktrace`](/reference/stacktrace/basic_stacktrace.md), [`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md) |
 | [`&amp;lt;string&amp;gt;`](/reference/string.md) | `std::string`など |
 | [`&amp;lt;string_view&amp;gt;`](/reference/string_view.md) | `std::string_view`など |
 | [`&amp;lt;system_error&amp;gt;`](/reference/system_error.md) | [`std::error_code`](/reference/system_error/error_code.md), [`std::error_condition`](/reference/system_error/error_condition.md) |
-| [`&amp;lt;thread&amp;gt;`](/reference/thread.md) | [`std::thread:id`](/reference/thread/thread.md) |
+| [`&amp;lt;thread&amp;gt;`](/reference/thread.md) | [`std::thread::id`](/reference/thread/thread/id.md) |
 | [`&amp;lt;typeindex&amp;gt;`](/reference/typeindex.md) | [`std::type_index`](/reference/typeindex/type_index.md) |
 | [`&amp;lt;variant&amp;gt;`](/reference/variant.md) | [`std::variant`](/reference/variant/variant.md), [`std::monostate`](/reference/variant/monostate.md) |
 | [`&amp;lt;vector&amp;gt;`](/reference/vector.md) | [`std::vector&amp;lt;bool&amp;gt;`](/reference/vector/vector.md) |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/functional/move_only_function/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/functional/move_only_function/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/move_only_function/op_constructor.md b/reference/functional/move_only_function/op_constructor.md
index 78d76f740..3ef14e738 100644
--- a/reference/functional/move_only_function/op_constructor.md
+++ b/reference/functional/move_only_function/op_constructor.md
@@ -56,10 +56,10 @@ explicit move_only_function(in_place_type_t&amp;lt;T&amp;gt;, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...);
 ## 事前条件
 - (4) : `VT`型を`decay_t&amp;lt;F&amp;gt;`としたとき
     - `VT`がCpp17Destructible要件を満たすこと。
-    - [`is_move_construtible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
+    - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
 - (5), (6) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき
     - `VT`がCpp17Destructible要件を満たすこと。
-    - [`is_move_construtible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
+    - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>not_fn -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/functional/not_fn.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/functional/not_fn.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/not_fn.md b/reference/functional/not_fn.md
index e2a1684b2..14ed76fd8 100644
--- a/reference/functional/not_fn.md
+++ b/reference/functional/not_fn.md
@@ -29,7 +29,7 @@ namespace std {
 - (1) : [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;F&amp;gt;`を適用した型を`FD`として、
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;FD, F&amp;gt;`が`true`、かつ
     - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;FD&amp;gt;`が`true`であること
-- (2) : `F`を`f`の型として、もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+- (2) : `F`を`f`の型として、もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 効果(C++17)
@@ -75,7 +75,7 @@ private:
 ## 戻り値(C++20)
 結果オブジェクト`g`に対する関数呼び出し式の引数パック`call_args`としたとき
 
-- (1) : `fd`を[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`で直接非リスト初期化した`FD`型のオブジェクトに対して
+- (1) : `fd`を[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)`で直接非リスト初期化した`FD`型のオブジェクトに対して
     - 関数呼び出し式の結果が`!`[`invoke`](invoke.md)`(fd, call_args...)`に等しい、完全転送呼び出しラッパー(perfect forwarding call wrapper)オブジェクトを返す。
 - (2) :
     - 関数呼び出し式の結果が`!`[`invoke`](invoke.md)`(f, call_args...)`に等しい、状態を持たない完全転送呼び出しラッパー(perfect forwarding call wrapper)オブジェクトを返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/future/async.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/future/async.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/async.md b/reference/future/async.md
index ab7eb2f97..e14f233a2 100644
--- a/reference/future/async.md
+++ b/reference/future/async.md
@@ -59,7 +59,7 @@ namespace std {
 返された`future`オブジェクトの`get()`もしくは`wait()`を呼び出すことにより、非同期実行の完了を待機する。
 
 ## 要件
-- 関数オブジェクト`F`および`Args...`の各型が、[`is_move_construcitble`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt;::value == true`であること。
+- 関数オブジェクト`F`および`Args...`の各型が、[`is_move_constructible`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt;::value == true`であること。
 - [`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`が可能であること。
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generator -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/generator/generator.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index 236c8f103..4ba98f5de 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -204,7 +204,7 @@ std::generator&amp;lt;int&amp;gt; ints()
 
 int main()
 {
-  for (int n : ints())) {
+  for (int n : ints()) {
     std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
   }
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>initializer_list -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/initializer_list/initializer_list.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/initializer_list/initializer_list.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/initializer_list/initializer_list.md b/reference/initializer_list/initializer_list.md
index c655a0911..b68433652 100644
--- a/reference/initializer_list/initializer_list.md
+++ b/reference/initializer_list/initializer_list.md
@@ -19,7 +19,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |--------------------------------|----------------|-------|
-| [`constructor`](initializer_list/op_constructor.md) | コンストラクタ | C++11 |
+| [`(constructor)`](initializer_list/op_constructor.md) | コンストラクタ | C++11 |
 | `~initializer_list() = default;`                      | デストラクタ | C++11 |
 | [`size`](initializer_list/size.md)                  | 要素数を取得する | C++11 |
 | [`begin`](initializer_list/begin.md)                | 先頭要素へのポインタを取得する | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tie -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ios/basic_ios/tie.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ios/basic_ios/tie.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/basic_ios/tie.md b/reference/ios/basic_ios/tie.md
index 81b9c72e9..84a466cad 100644
--- a/reference/ios/basic_ios/tie.md
+++ b/reference/ios/basic_ios/tie.md
@@ -78,8 +78,8 @@ int main()
 ```
 * tie[color ff0000]
 * std::istream[link ../../istream/basic_istream.md]
-* std::ifstream[link ../../fstream/basic_ifilestream.md.nolink]
-* std::ofstream[link ../../fstream/basic_ofilestream.md.nolink]
+* std::ifstream[link ../../fstream/basic_ifstream.md]
+* std::ofstream[link ../../fstream/basic_ofstream.md]
 * clear()[link clear.md]
 * rdstate[link rdstate.md]
 * std::ios_base[link ../ios_base.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>event -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ios/ios_base/type-event.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ios/ios_base/type-event.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/ios_base/type-event.md b/reference/ios/ios_base/type-event.md
index 87cdf46f3..ca56907ac 100644
--- a/reference/ios/ios_base/type-event.md
+++ b/reference/ios/ios_base/type-event.md
@@ -9,7 +9,7 @@ enum event { erase_event, imbue_event, copyfmt_event };
 ```
 
 ## 概要
-`event` は　[`register_callback`](register_callback.md) で登録した [`event_callback`](type-event_callback.md) 型のコールバック関数を呼び出す際に、当該関数を呼び出すきっかけとなったイベントの種類を表すための列挙型である。  
+`event` は [`register_callback`](register_callback.md) で登録した [`event_callback`](type-event_callback.md) 型のコールバック関数を呼び出す際に、当該関数を呼び出すきっかけとなったイベントの種類を表すための列挙型である。  
 `event` には以下の表のような列挙子値が存在する。
 
 | 列挙子          | 発生したイベント |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>event_callback -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ios/ios_base/type-event_callback.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ios/ios_base/type-event_callback.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/ios_base/type-event_callback.md b/reference/ios/ios_base/type-event_callback.md
index 723f9a00b..36c314850 100644
--- a/reference/ios/ios_base/type-event_callback.md
+++ b/reference/ios/ios_base/type-event_callback.md
@@ -11,7 +11,7 @@ using event_callback = void(*)(event ev, ios_base&amp;amp; str, int index);
 * ios_base[link ../ios_base.md]
 
 ## 概要
-`event_callback` は　[`register_callback`](register_callback.md) で登録するコールバック関数を表す型である。  
+`event_callback` は [`register_callback`](register_callback.md) で登録するコールバック関数を表す型である。  
 イベントが発生して当該関数が呼ばれる際には、`ev` には発生したイベントの種類（[`event`](type-event.md)）が、`str` にはイベントが発生したストリームが、`index` には [`register_callback`](register_callback.md) での登録時に指定した値がそれぞれ渡される。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fmtflags -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ios/ios_base/type-fmtflags.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ios/ios_base/type-fmtflags.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/ios_base/type-fmtflags.md b/reference/ios/ios_base/type-fmtflags.md
index f367166b4..b2e4f08a0 100644
--- a/reference/ios/ios_base/type-fmtflags.md
+++ b/reference/ios/ios_base/type-fmtflags.md
@@ -34,7 +34,7 @@ using fmtflags = T1;
 | `uppercase` | 特定の小文字の出力を大文字の出力にする。（`scientific` の `E` や &amp;lt;code&amp;gt;hex &amp;amp;#124; showbase&amp;lt;/code&amp;gt; の `0X` など） |
 
 
-また、上記に加えて、[`setf`](setf.md)`()` の第 2 引数や　[`unsetf`](unsetf.md)`()` の引数に使用するため、 以下のように組み合わせた定数も [`ios_base`](../ios_base.md) の静的メンバ定数として定義されている。
+また、上記に加えて、[`setf`](setf.md)`()` の第 2 引数や [`unsetf`](unsetf.md)`()` の引数に使用するため、 以下のように組み合わせた定数も [`ios_base`](../ios_base.md) の静的メンバ定数として定義されている。
 
 | 定数 | 値 |
 |------|----------------------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>getline -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/getline.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/istream/basic_istream/getline.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/getline.md b/reference/istream/basic_istream/getline.md
index 4175fd4e9..3431208e5 100644
--- a/reference/istream/basic_istream/getline.md
+++ b/reference/istream/basic_istream/getline.md
@@ -62,7 +62,7 @@ int main() {
 * fail()[link /reference/ios/basic_ios/fail.md]
 * clear[link /reference/ios/basic_ios/clear.md]
 * rdstate()[link /reference/ios/basic_ios/rdstate.md]
-* std::ios_base[link /reference/ios/ios_base/type-iostate.md]
+* std::ios_base::failbit[link /reference/ios/ios_base/type-iostate.md]
 
 1度で1行すべての入力が行えなかった場合の処理を追いかけやすくするため、この例はわざと`buffer_size`を少なくしている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/read.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/istream/basic_istream/read.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/read.md b/reference/istream/basic_istream/read.md
index ffd997e0e..54546482c 100644
--- a/reference/istream/basic_istream/read.md
+++ b/reference/istream/basic_istream/read.md
@@ -22,7 +22,7 @@ basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; read(char_type* s, streamsize n);
 1. [`good`](../../ios/basic_ios/good.md)`()`メンバ関数を呼び出して`false`であったら、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出して終了する。
 1. 以下のいずれかを満たすまで、文字を入力して書き込む。
     - 実引数で指定された`n`文字まで入力した。
-    - EOFに達した。この場合、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md)` | `[`eofbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出す。
+    - EOFに達した。この場合、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md) `|` [`eofbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出す。
 
 ## 戻り値
 `*this`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bidirectional_iterator -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/iterator/bidirectional_iterator.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/bidirectional_iterator.md b/reference/iterator/bidirectional_iterator.md
index 02529f8e9..55ab58797 100644
--- a/reference/iterator/bidirectional_iterator.md
+++ b/reference/iterator/bidirectional_iterator.md
@@ -35,7 +35,7 @@ namespace std {
 型`I`の等しい2つのオブジェクト（同じ要素を指すイテレータ）`a, b`について次の条件を満たす場合に限って、型`I`は`bidirectional_iterator`のモデルである。
 
 - `a, b`がデクリメント可能ならば、次の4つの条件を全て満たす
-    - [`addressof`](/reference/memory/addressof.md)`(--a) == `[`addressof`](/reference/memory/addressof.md)`(a)`
+    - [`addressof`](/reference/memory/addressof.md)`(--a) ==` [`addressof`](/reference/memory/addressof.md)`(a)`
     - `bool(a-- == b)`
     - `a--, --b`の評価の後でも、`bool(a == b)`は`true`となる
     - `bool(++(--a) == b)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
index a84ecd032..7d04b481b 100644
--- a/reference/iterator/counted_iterator/op_increment.md
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -22,7 +22,7 @@ constexpr counted_iterator operator++(int)
 
 ## 事前条件
 
-- (1), (2) : [`count()`](count.md)` &amp;gt; 0`
+- (1), (2) : [`count()`](count.md) `&amp;gt; 0`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-integer-like -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/iterator/is_integer_like.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/iterator/is_integer_like.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/is_integer_like.md b/reference/iterator/is_integer_like.md
index 6e914ca95..4b245bce2 100644
--- a/reference/iterator/is_integer_like.md
+++ b/reference/iterator/is_integer_like.md
@@ -47,7 +47,7 @@ namespace std {
 *integer-class*型`I`について[`numeric_limits&amp;lt;I&amp;gt;`](/reference/limits/numeric_limits.md)の特殊化は次のような値を示す。
 
 - `numeric_limits&amp;lt;I&amp;gt;::is_specialized == true`
-- [`numeric_limits&amp;lt;I&amp;gt;::is_signed`](/reference/limits/numeric_limits/is_signed.md)` == true`
+- [`numeric_limits&amp;lt;I&amp;gt;::is_signed`](/reference/limits/numeric_limits/is_signed.md) `== true`
     - `I`が*signed-integer-class*型の場合のみ
 - [`numeric_limits&amp;lt;I&amp;gt;::digits`](/reference/limits/numeric_limits/digits.md)は`I`の幅と等しい
 - [`numeric_limits&amp;lt;I&amp;gt;::digits10`](/reference/limits/numeric_limits/digits10.md)は`static_cast&amp;lt;int&amp;gt;(digits * log10(2))`と等しい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_increment.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/iterator/move_iterator/op_increment.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_increment.md b/reference/iterator/move_iterator/op_increment.md
index 9526fcd2b..d13e9f158 100644
--- a/reference/iterator/move_iterator/op_increment.md
+++ b/reference/iterator/move_iterator/op_increment.md
@@ -28,7 +28,7 @@ return *this;
 * base[link base.md]
 
 - 後置インクリメント `operator++(int)`：
-    - `Iterator`が[`forward_iterator`](/reference/iterator/iterator_tag.md)のモデルとなる場合、以下と等価
+    - `Iterator`が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルとなる場合、以下と等価
         ```cpp
         move_iterator tmp = *this;
         ++base();
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>distance -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_distance.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/iterator/ranges_distance.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_distance.md b/reference/iterator/ranges_distance.md
index 2b861dff6..6c23e29c7 100644
--- a/reference/iterator/ranges_distance.md
+++ b/reference/iterator/ranges_distance.md
@@ -38,7 +38,7 @@ namespace std::ranges {
     - それ以外の場合 : `first`から`last`に到達するのに必要なインクリメントの回数を返す。
 - (2) : 次のいずれかによって、範囲の長さを求める。
     - `R`が[`sized_range`](/reference/ranges/sized_range.md)`&amp;lt;R&amp;gt;`のモデルとなる : `return static_cast&amp;lt;`[`range_difference_t`](/reference/ranges/range_difference_t.md)`&amp;lt;R&amp;gt;&amp;gt;(`[`ranges::size`](/reference/ranges/size.md)`(r));`
-    - それ以外の場合 : `return ranges::distance(`[`ranges::begin`](/reference/ranges/begin.md)`(r), `[`ranges::end`](/reference/ranges/end.md)`(r))` （(1)に委譲）
+    - それ以外の場合 : `return ranges::distance(`[`ranges::begin`](/reference/ranges/begin.md)`(r),` [`ranges::end`](/reference/ranges/end.md)`(r))` （(1)に委譲）
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/linalg/layout_blas_packed/mapping.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/linalg/layout_blas_packed/mapping.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/layout_blas_packed/mapping.md b/reference/linalg/layout_blas_packed/mapping.md
index f9bb6042d..8487fd439 100644
--- a/reference/linalg/layout_blas_packed/mapping.md
+++ b/reference/linalg/layout_blas_packed/mapping.md
@@ -36,7 +36,7 @@ namespace std::linalg {
     - `extents_type::static_extent(0) ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)または
     - `extents_type::static_extent(1) ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)または
     - `extents_type::static_extent(0) == extents_type::static_extent(1)`
-- [`Extents::rank_dynamic()`](/reference/mdspan/extents/rank.md) `== 0`のとき、`Ns`を[`Extents::static_extent`](/reference/mdspan/extents/static_extent.md)`(0)`としたとき値`Ns * (Ns + 1)`を`index_type`型で表現できること。
+- [`Extents::rank_dynamic()`](/reference/mdspan/extents/rank_dynamic.md) `== 0`のとき、`Ns`を[`Extents::static_extent`](/reference/mdspan/extents/static_extent.md)`(0)`としたとき値`Ns * (Ns + 1)`を`index_type`型で表現できること。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/linalg/layout_transpose/mapping.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/linalg/layout_transpose/mapping.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/layout_transpose/mapping.md b/reference/linalg/layout_transpose/mapping.md
index 7ee2cb39c..10e1191f2 100644
--- a/reference/linalg/layout_transpose/mapping.md
+++ b/reference/linalg/layout_transpose/mapping.md
@@ -49,7 +49,7 @@ namespace std::linalg {
 | `extents` | 多次元配列のサイズ`extents_`を取得する | C++26 |
 | `required_span_size` | `nested-mapping_.required_span_size()` | C++26 |
 | [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++26 |
-| `nested_mapping` | 入れ子レイアウトマッピング`nested-mapping_`を取得する　| C++26 |
+| `nested_mapping` | 入れ子レイアウトマッピング`nested-mapping_`を取得する | C++26 |
 | [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++26 |
 | `is_unique`     | `nested-mapping_.is_unique()` | C++26 |
 | `is_exhaustive` | `nested-mapping_.is_exhaustive()` | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/map.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/map.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;map&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;multimap&lt;/code&gt;はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。 
&lt;code&gt;map&lt;/code&gt;はキーの重複を許さず、&lt;code&gt;multimap&lt;/code&gt;はキーの重複を許す。
連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;map&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;multimap&lt;/code&gt;は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;map&lt;/code&gt;や&lt;code&gt;multimap&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素のキー：互いに等しい二つのキーを持つ要素が &lt;code&gt;map&lt;/code&gt; に格納されることは無い。複数の等しいキーを許す同様の連想コンテナは &lt;code&gt;multimap&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;要素の値はキーと値のpair型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;map/map.html&#34;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許さない連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;map/multimap.html&#34;&gt;multimap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許す連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html&#34; target=&#34;_blank&#34;&gt;N2930 Range-Based For Loop Wording (Without Concepts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/map/map.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index d72cc475e..bb61e0f66 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -27,7 +27,7 @@ namespace std {
 ## 概要
 `map` はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
+連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
 内部的には、`map` 内の要素は、コンテナの構築時に設定された[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)基準に従って小さいものから大きいものへとソートされる。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/map/map/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/map/map/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/rend.md b/reference/map/map/rend.md
index f18e49216..4c4c53ca7 100644
--- a/reference/map/map/rend.md
+++ b/reference/map/map/rend.md
@@ -62,7 +62,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |------------------------------|--------------------------------------------|
 | [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/map/multimap.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index 0db7e9886..060cba179 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -29,7 +29,7 @@ namespace std {
 ## 概要
 `multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
+連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
 内部的には、`multimap` 内の要素は、コンテナの構築時に設定された[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)基準に従って小さいものから大きいものへとソートされる。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/rend.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/map/multimap/rend.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/rend.md b/reference/map/multimap/rend.md
index a0aa668b6..aa1eb7c50 100644
--- a/reference/map/multimap/rend.md
+++ b/reference/map/multimap/rend.md
@@ -63,7 +63,7 @@ int main()
 
 ## 関連項目
 
-| 名前 | 説明　|
+| 名前 | 説明 |
 |-----------------------------------|-------------------------------------------|
 | [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
 | [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/extents/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
index a0af10732..4569a97bf 100644
--- a/reference/mdspan/extents/op_constructor.md
+++ b/reference/mdspan/extents/op_constructor.md
@@ -41,11 +41,11 @@ constexpr explicit(N != rank_dynamic())
     - `((OtherExtents == dynamic_extent || Extents == dynamic_extent || OtherExtents == Extents) &amp;amp;&amp;amp; ...)`が`true`であること
 - (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std::move(exts))...}`としたとき
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
 - (4), (5) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
index 53ad5c712..1ba83d137 100644
--- a/reference/mdspan/extents/op_deduction_guide.md
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -16,7 +16,7 @@ namespace std {
 
 
 ## テンプレートパラメータ制約
-[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Integrals, size_t&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+`(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Integrals, size_t&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/mdspan.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 410c68a77..3a0328a7e 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -115,7 +115,7 @@ namespace std {
 | `accessor_type` | [アクセサポリシー型`AccessorPolicy`](AccessorPolicy.md) | C++23 |
 | `mapping_type` | [レイアウトマッピング型`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;`](LayoutMapping.md) | C++23 |
 | `element_type` | 要素型`ElementType` | C++23 |
-| `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
+| `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
 | `size_type` | [`Extents::size_type`](extents.md) | C++23 |
 | `rank_type` | [`Extents::rank_type`](extents.md) | C++23 |
 | `pointer`   | [`AccessorPolicy::pointer`](AccessorPolicy.md) | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/op_at.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/mdspan/op_at.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/op_at.md b/reference/mdspan/mdspan/op_at.md
index 3da007b87..a09f9ff6d 100644
--- a/reference/mdspan/mdspan/op_at.md
+++ b/reference/mdspan/mdspan/op_at.md
@@ -26,11 +26,11 @@ constexpr reference operator[](const array&amp;lt;OtherIndexType, rank()&amp;gt;&amp;amp; indices) con
 ## テンプレートパラメータ制約
 - (1) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `sizeof...(OtherIndexTypes) ==` [`rank()`](rank.md)が`true`であること
 - (2), (3) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/mdspan/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/op_constructor.md b/reference/mdspan/mdspan/op_constructor.md
index ef7005bab..9b87d9e79 100644
--- a/reference/mdspan/mdspan/op_constructor.md
+++ b/reference/mdspan/mdspan/op_constructor.md
@@ -67,13 +67,13 @@ template&amp;lt;class OtherElementType, class OtherExtents,
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
 - (4) : `N`を`sizeof...(OtherIndexTypes)`としたとき
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
     - `N ==` [`rank()`](rank.md) `|| N ==` [`rank_dynamic()`](rank_dynamic.md)が`true`
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;mapping_type, extents_type&amp;gt;`が`true`
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
 - (5), (6) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
     - `N ==` [`rank()`](rank.md) `|| N ==` [`rank_dynamic()`](rank_dynamic.md)が`true`
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;mapping_type, extents_type&amp;gt;`が`true`
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
@@ -234,7 +234,7 @@ int main()
 * data_handle()[link data_handle.md]
 * mapping()[link mapping.md]
 * size()[link size.md]
-* std::layout_stride::mapping[link ../layout_stride/mapping.md]]
+* std::layout_stride::mapping[link ../layout_stride/mapping.md]
 * std::layout_stride[link ../layout_stride.md]
 * std::layout_left::mapping[link ../layout_left/mapping.md]
 * std::default_accessor[link ../default_accessor.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/op_deduction_guide.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/mdspan/op_deduction_guide.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/op_deduction_guide.md b/reference/mdspan/mdspan/op_deduction_guide.md
index 32d8a168f..9ecf050d6 100644
--- a/reference/mdspan/mdspan/op_deduction_guide.md
+++ b/reference/mdspan/mdspan/op_deduction_guide.md
@@ -89,7 +89,7 @@ int main()
 {
   int arr[] = {1, 2, 3, 4, 5, 6};
 
-  { // (1) :　1次元配列型から型推論
+  { // (1) : 1次元配列型から型推論
     std::mdspan m1{arr};
     static_assert(m1.rank() == 1 &amp;amp;&amp;amp; m1.rank_dynamic() == 0);
     static_assert(m1.static_extent(0) == 6);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>submdspan -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/submdspan.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mdspan/submdspan.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/submdspan.md b/reference/mdspan/submdspan.md
index 8d8c4bd4b..8182673ba 100644
--- a/reference/mdspan/submdspan.md
+++ b/reference/mdspan/submdspan.md
@@ -77,7 +77,7 @@ return mdspan(src.accessor().offset(src.data_handle(), sub_map_offset.offset),
 * mdspan[link mdspan.md]
 * sub_map_offset[link submdspan_mapping_result.md]
 * src.mapping()[link mdspan/mapping.md]
-* src.data_handle()[link mdspan/mapping.md]
+* src.data_handle()[link mdspan/data_handle.md]
 * src.accessor()[link mdspan/accessor.md]
 * AccessorPolicy::offset_policy[link AccessorPolicy.md]
 
@@ -235,7 +235,7 @@ int main()
   // 3 4
   // 5 6
 
-  // 行優先レイアウト std::layout_right　を維持
+  // 行優先レイアウト std::layout_right を維持
   auto row0 = std::submdspan(mat, 0, std::full_extent);
   // 1 2
   auto row12 = std::submdspan(mat, std::pair{1,3}, std::full_extent);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>construct -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/construct.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/memory/allocator_traits/construct.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/construct.md b/reference/memory/allocator_traits/construct.md
index 4ba9b16bd..10c4ff427 100644
--- a/reference/memory/allocator_traits/construct.md
+++ b/reference/memory/allocator_traits/construct.md
@@ -18,9 +18,9 @@ static constexpr void construct(Alloc&amp;amp; a, T* p, Args&amp;amp;&amp;amp;... args);    // C++20 か
 
 ## 効果
 - C++17 まで
-	`a.construct(p, `[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として `::new(static_cast&amp;lt;void*&amp;gt;(p)) T(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` を呼び出す。
+	`a.construct(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として `::new(static_cast&amp;lt;void*&amp;gt;(p)) T(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` を呼び出す。
 - C++20 から
-	`a.construct(p, `[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として [`construct_at`](../construct_at.md)`(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`を呼び出す。
+	`a.construct(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として [`construct_at`](../construct_at.md)`(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`を呼び出す。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/memory/make_shared.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index 9be943d80..c391ef254 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -40,7 +40,7 @@ namespace std {
 
 配列タイプのオブジェクトがデフォルトの初期値を持つように指定されている場合、これはオブジェクトの各配列要素がデフォルトの初期値を持つ（値初期化される）ことを意味すると解釈される。
 
-非配列型`U`の（サブ）オブジェクトが、`v`または`U(l ...)`の初期値を持つように指定されている場合(`l...`はコンストラクタ引数のリスト）、`make_shared`は、式`::new (pv) U(v)`または`::new (pv) U(l...)`を使用して、この（サブ）オブジェクトを初期化する。ここで、`pv`の型は`void*`であり、型`U`のオブジェクトを保持するのに適したストレージを指す。
+非配列型`U`の（サブ）オブジェクトが、`v`または`U(l ...)`の初期値を持つように指定されている場合（`l...`はコンストラクタ引数のリスト）、`make_shared`は、式`::new (pv) U(v)`または`::new (pv) U(l...)`を使用して、この（サブ）オブジェクトを初期化する。ここで、`pv`の型は`void*`であり、型`U`のオブジェクトを保持するのに適したストレージを指す。
 
 非配列型`U`の（サブ）オブジェクトがデフォルトの初期値を持つように指定されている場合、この関数は、式 `::new (pv) U()`を使用してこの（サブ）オブジェクトを初期化する。`void*`は型`U`のオブジェクトを保持するのに適したストレージを指す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_exchange.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/memory/shared_ptr/atomic_exchange.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_exchange.md b/reference/memory/shared_ptr/atomic_exchange.md
index 68a150dcd..5d0ff1a89 100644
--- a/reference/memory/shared_ptr/atomic_exchange.md
+++ b/reference/memory/shared_ptr/atomic_exchange.md
@@ -27,7 +27,7 @@ namespace std {
 ```cpp
 atomic_exchange_explicit(p, r, memory_order_seq_cst)
 ```
-* atomic_exchange_explicit[link atomic_load_explicit.md]
+* atomic_exchange_explicit[link atomic_exchange_explicit.md]
 * memory_order_seq_cst[link /reference/atomic/memory_order.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_load_explicit -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_load_explicit.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/memory/shared_ptr/atomic_load_explicit.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_load_explicit.md b/reference/memory/shared_ptr/atomic_load_explicit.md
index c53de7f97..c36dd3245 100644
--- a/reference/memory/shared_ptr/atomic_load_explicit.md
+++ b/reference/memory/shared_ptr/atomic_load_explicit.md
@@ -87,7 +87,7 @@ int main()
 
 ## 参照
 - [`atomic_load() - shared_ptr`](atomic_load.md)
-- [`atomic_load_explicit() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_load.md)
+- [`atomic_load_explicit() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_load_explicit.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
 - [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index 079deb033..edd997a38 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -72,9 +72,9 @@ unique_ptr(const unique_ptr&amp;amp;) = delete;      // (9) 単一オブジェクト、
 ### C++17 共通
 
 - (1), (2), (6) : 以下のいずれかの条件を満たす場合、オーバーロード解決に参加しない。
-    - [`is_pointer_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_pointer.md)` == true`である（デリータがポインタである）
+    - [`is_pointer_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_pointer.md) `== true`である（デリータがポインタである）
     - [`is_default_constructible_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_default_constructible.md) `== false`である（デリータがデフォルト構築できない）
-- (3), (4) : [`is_constructible_v&amp;lt;D, decltype(d)&amp;gt;`](/reference/type_traits/is_constructible.md)` == true`の（`d`からコピー/ムーブ構築可能な）場合にのみオーバーロード解決に参加する。
+- (3), (4) : [`is_constructible_v&amp;lt;D, decltype(d)&amp;gt;`](/reference/type_traits/is_constructible.md) `== true`の（`d`からコピー/ムーブ構築可能な）場合にのみオーバーロード解決に参加する。
 - (3), (4), (6) : [クラステンプレートの実引数推定](/lang/cpp17/type_deduction_for_class_templates.md)によってこれらのコンストラクタが選択される場合、コンパイルエラーとなる。
 
 ### C++17 配列版
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>timed_mutex -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/mutex/timed_mutex.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/mutex/timed_mutex.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/timed_mutex.md b/reference/mutex/timed_mutex.md
index b33cf4e22..693f5e9ed 100644
--- a/reference/mutex/timed_mutex.md
+++ b/reference/mutex/timed_mutex.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `timed_mutex`は、スレッド間で使用する共有リソースを排他制御するためのクラスであり、ロック取得のタイムアウト機能をサポートする。[`lock()`](timed_mutex/lock.md)メンバ関数によってリソースのロックを取得し、[`unlock()`](timed_mutex/unlock.md)メンバ関数でリソースのロックを手放す。
 
-このクラスのデストラクタは自動的に[`unlock()`](timed_mutex/op_destructor.md)メンバ関数を呼び出すことはないため、通常このクラスのメンバ関数は直接は呼び出さず、[`lock_guard`](/reference/mutex/lock_guard.md)や[`unique_lock`](/reference/mutex/unique_lock.md)といったロック管理クラスと併用する。
+このクラスのデストラクタは自動的に[`unlock()`](timed_mutex/unlock.md)メンバ関数を呼び出すことはないため、通常このクラスのメンバ関数は直接は呼び出さず、[`lock_guard`](/reference/mutex/lock_guard.md)や[`unique_lock`](/reference/mutex/unique_lock.md)といったロック管理クラスと併用する。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/print.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/print.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;print&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;print&amp;gt;&lt;/code&gt;ヘッダでは、書式指定で出力する機能を定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、デフォルトの出力先、および&lt;code&gt;FILE*&lt;/code&gt;指定のオーバーロードが定義される。&lt;code&gt;&lt;a href=&#34;ostream/basic_ostream.html&#34;&gt;std::ostream&lt;/a&gt;&lt;/code&gt;指定のオーバーロードは&lt;code&gt;&lt;a href=&#34;ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/print.html&#34;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/println.html&#34;&gt;println&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する。末尾改行付き (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_unicode.html&#34;&gt;vprint_unicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定でUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_unicode_buffered.html&#34;&gt;vprint_unicode_buffered&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保した文字列バッファに書式指定の出力を作ってからUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_nonunicode.html&#34;&gt;vprint_nonunicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;print/vprint_nonunicode_buffered.html&#34;&gt;vprint_nonunicode_buffered&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保した文字列バッファに書式指定の出力を作ってから非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html&#34; target=&#34;_blank&#34;&gt;P2093R14 Formatted output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queue -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/queue/queue.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue.md b/reference/queue/queue.md
index 246e26c86..19ef4b48c 100644
--- a/reference/queue/queue.md
+++ b/reference/queue/queue.md
@@ -59,7 +59,7 @@ namespace std {
 
 ## メンバ型
 
-| 名前 | 説明 |　対応バージョン |
+| 名前 | 説明 | 対応バージョン |
 |-------------------|------------------------------|-------|
 | `value_type`      | `Container::value_type`      | |
 | `reference`       | `Container::reference`       | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/random/independent_bits_engine/max.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/random/independent_bits_engine/max.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/independent_bits_engine/max.md b/reference/random/independent_bits_engine/max.md
index 2c77eec01..bb24d5e85 100644
--- a/reference/random/independent_bits_engine/max.md
+++ b/reference/random/independent_bits_engine/max.md
@@ -14,7 +14,7 @@ static constexpr result_type max();
 
 
 ## 戻り値
-最大値である`2`&amp;lt;sup&amp;gt;`w`&amp;lt;/sup&amp;gt;` -1`を返す。
+最大値である&amp;lt;code&amp;gt;2&amp;lt;sup&amp;gt;w&amp;lt;/sup&amp;gt; - 1&amp;lt;/code&amp;gt;を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mersenne_twister_engine -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/random/mersenne_twister_engine.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/random/mersenne_twister_engine.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mersenne_twister_engine.md b/reference/random/mersenne_twister_engine.md
index 4f9fb71ad..be41226f4 100644
--- a/reference/random/mersenne_twister_engine.md
+++ b/reference/random/mersenne_twister_engine.md
@@ -51,7 +51,7 @@ namespace std {
 * `s &amp;lt;= w`
 * `t &amp;lt;= w`
 * `l &amp;lt;= w`
-* `w &amp;lt;= `[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md)
+* `w &amp;lt;=` [`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md)
 * `a &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
 * `b &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
 * `c &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>negative_binomial_distribution -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/random/negative_binomial_distribution.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution.md b/reference/random/negative_binomial_distribution.md
index 6ce54bcde..0157ccc87 100644
--- a/reference/random/negative_binomial_distribution.md
+++ b/reference/random/negative_binomial_distribution.md
@@ -13,7 +13,7 @@ namespace std {
 
 ## 概要
 `negative_binomial_distribution`は、離散確率分布の一種である、負の二項分布を表すクラスである。  
-二項分布([`binomial_distribution`](binomial_distribution.md)が「確率pで成功する事象をt回試行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
+二項分布([`binomial_distribution`](binomial_distribution.md))が「確率pで成功する事象をt回試行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
 
 
 負の二項分布は、実装によって「k回成功するまでに試行した回数を取得する」ものと、「k回成功するまでに失敗した回数を取得する」もの、2つのバリエーションが存在する。`std::negative_binomial_distribution`クラスは後者である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/random/subtract_with_carry_engine.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine.md b/reference/random/subtract_with_carry_engine.md
index 5964ca321..4f9d01b15 100644
--- a/reference/random/subtract_with_carry_engine.md
+++ b/reference/random/subtract_with_carry_engine.md
@@ -26,7 +26,7 @@ namespace std {
 テンプレートパラメータの意味は以下の通り:
 
 * `UIntType`: 生成する符号なし整数の型。
-* `w`: ワードサイズ。`0 &amp;lt; w &amp;lt;= `[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md) でなければならない。
+* `w`: ワードサイズ。`0 &amp;lt; w &amp;lt;=` [`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md) でなければならない。
 * `s`: 短いラグ。`0 &amp;lt; s &amp;lt; r` でなければならない。
 * `r`: 長いラグ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_transform_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/adjacent_transform_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view.md b/reference/ranges/adjacent_transform_view.md
index 96e092134..51d29ffe1 100644
--- a/reference/ranges/adjacent_transform_view.md
+++ b/reference/ranges/adjacent_transform_view.md
@@ -43,8 +43,8 @@ namespace std::ranges {
 ## 効果
 
 - (2): 式 `views::adjacent_transform&amp;lt;N&amp;gt;(E, F)` の効果は以下の通り。
-    - `N` &amp;gt; 0 のとき、`adjacent_transform_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, `[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;, N&amp;gt;(E, F)` と等しい
-    - `N` = 0 のとき、`((void)E, `[`views::zip_transform`](zip_transform_view.md)`(F))` と等しい(ただし`E`と`F`の評価順は不定)
+    - `N` &amp;gt; 0 のとき、`adjacent_transform_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;,` [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;, N&amp;gt;(E, F)` と等しい
+    - `N` = 0 のとき、`((void)E,` [`views::zip_transform`](zip_transform_view.md)`(F))` と等しい(ただし`E`と`F`の評価順は不定)
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/adjacent_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index 63b69d494..a977bf0cd 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;forward_range V, size_t N&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; (N &amp;gt; 0)
-  class adjacent_view : public view_interface&amp;lt;adjacent_view&amp;lt;V, N&amp;gt;&amp;gt; {…… }; // (1)
+  class adjacent_view : public view_interface&amp;lt;adjacent_view&amp;lt;V, N&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     template&amp;lt;std::size_t N&amp;gt;
@@ -43,7 +43,7 @@ namespace std::ranges {
 
 - (2): 式`views::adjacent&amp;lt;N&amp;gt;(E)`の効果は次の通り
     - `N` &amp;gt; 0 のとき、`adjacent_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, N&amp;gt;(E)` と等しい
-    - `N` = 0 のとき、`auto((void)E, `[`views::empty`](empty_view.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;&amp;gt;&amp;gt;))` と等しい
+    - `N` = 0 のとき、`auto((void)E,` [`views::empty`](empty_view.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;&amp;gt;&amp;gt;)` と等しい
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/as_rvalue_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index 5cc35e836..46c94177d 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -47,7 +47,7 @@ std::ranges::copy(words | views::as_rvalue, std::back_inserter(new_words));
 ## 効果
 
 - (2): 式`views::as_rvalue(E)`はRangeアダプタオブジェクトを表し、その効果は次の通り
-    - 要素がすでに右辺値参照であれば(`T = decltype((E))`として、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;, `[`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
+    - 要素がすでに右辺値参照であれば(`T = decltype((E))`として、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;,` [`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
     - それ以外のとき、`as_rvalue_view{E}`と等しい
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cartesian_product_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/cartesian_product_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view.md b/reference/ranges/cartesian_product_view.md
index f70ebf3ea..f28ffec66 100644
--- a/reference/ranges/cartesian_product_view.md
+++ b/reference/ranges/cartesian_product_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range First, forward_range... Vs&amp;gt;
     requires (view&amp;lt;First&amp;gt; &amp;amp;&amp;amp; ... &amp;amp;&amp;amp; view&amp;lt;Vs&amp;gt;)
-  class cartesian_product_view : public view_interface&amp;lt;cartesian_product_view&amp;lt;First, Vs...&amp;gt;&amp;gt; {…… }; // (1)
+  class cartesian_product_view : public view_interface&amp;lt;cartesian_product_view&amp;lt;First, Vs...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ cartesian_product = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chunk_by_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/chunk_by_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view.md b/reference/ranges/chunk_by_view.md
index 8b8d90632..5bbe0f4d2 100644
--- a/reference/ranges/chunk_by_view.md
+++ b/reference/ranges/chunk_by_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;forward_range V, indirect_binary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
-  class chunk_by_view : public view_interface&amp;lt;chunk_by_view&amp;lt;V, Pred&amp;gt;&amp;gt; {…… }; // (1)
+  class chunk_by_view : public view_interface&amp;lt;chunk_by_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ chunk_by = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chunk_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/chunk_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_view.md b/reference/ranges/chunk_view.md
index 1452c0e03..0c837cb3a 100644
--- a/reference/ranges/chunk_view.md
+++ b/reference/ranges/chunk_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;view V&amp;gt;
     requires input_range&amp;lt;V&amp;gt;
-  class chunk_view : public view_interface&amp;lt;chunk_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class chunk_view : public view_interface&amp;lt;chunk_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ chunk = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concat_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/concat_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view.md b/reference/ranges/concat_view.md
index 54b39fc32..23109df85 100644
--- a/reference/ranges/concat_view.md
+++ b/reference/ranges/concat_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range... Views&amp;gt;
   requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0) &amp;amp;&amp;amp; concatable&amp;lt;Views...&amp;gt;
-  class concat_view : public view_interface&amp;lt;concat_view&amp;lt;Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class concat_view : public view_interface&amp;lt;concat_view&amp;lt;Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ concat = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/contiguous_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/contiguous_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/contiguous_range.md b/reference/ranges/contiguous_range.md
index b19edd5ff..4351bf023 100644
--- a/reference/ranges/contiguous_range.md
+++ b/reference/ranges/contiguous_range.md
@@ -23,7 +23,7 @@ namespace std::ranges {
 
 ## モデル
 `decltype((t))`が`T&amp;amp;`であるような式`t`があるとする。
-`T`が`contiguous_range`のモデルとなるのは、[`to_address`](/reference/memory/to_address.md)`(`[`ranges::begin`](begin.md)`(t)) == `[`ranges::data`](data.md)`(t)`が`true`となる場合である。
+`T`が`contiguous_range`のモデルとなるのは、[`to_address`](/reference/memory/to_address.md)`(`[`ranges::begin`](begin.md)`(t)) ==` [`ranges::data`](data.md)`(t)`が`true`となる場合である。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable-box -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/copyable_box.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/copyable_box.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/copyable_box.md b/reference/ranges/copyable_box.md
index f323cf7bb..f75ffd342 100644
--- a/reference/ranges/copyable_box.md
+++ b/reference/ranges/copyable_box.md
@@ -11,7 +11,7 @@
 `copyable-box&amp;lt;T&amp;gt;` は、[`std::optional`](/reference/optional/optional.md)`&amp;lt;T&amp;gt;`とほとんど同じであるものの、以下の差分がある。
 
 ### 差分1
-テンプレートパラメーター制約 [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
+テンプレートパラメーター制約 [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
 
 ### 差分2
 `T`が[`copyable`](/reference/concepts/copyable.md)のモデルでない場合、コピー代入演算子は以下のように定義される。
@@ -52,7 +52,7 @@ constexpr copyable-box&amp;amp; operator=(copyable-box&amp;amp;&amp;amp; that) noexcept(is_nothrow_move_
 以下のことが推奨される。
 
 - [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt;` なら、`movable-box&amp;lt;T&amp;gt;` は
-`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
+`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/counted.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/counted.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/counted.md b/reference/ranges/counted.md
index b4a84f7fe..42d352c9a 100644
--- a/reference/ranges/counted.md
+++ b/reference/ranges/counted.md
@@ -32,7 +32,7 @@ namespace std::ranges::views {
 - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格。
 - `T`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであれば、[`span`](/reference/span/span.md)`(`[`to_address`](/reference/memory/to_address.md)`(E), static_cast&amp;lt;D&amp;gt;(F))`と等しい。
 - `T`が[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルであれば、[`subrange`](subrange.md)`(E, E + static_cast&amp;lt;D&amp;gt;(F))`と等しい。
-- それ以外のとき、[`subrange`](subrange.md)`(`[`counted_iterator`](/reference/iterator/counted_iterator.md)`(E, F), `[`default_sentinel`](/reference/iterator/default_sentinel_t.md)`)`と等しい。
+- それ以外のとき、[`subrange`](subrange.md)`(`[`counted_iterator`](/reference/iterator/counted_iterator.md)`(E, F),` [`default_sentinel`](/reference/iterator/default_sentinel_t.md)`)`と等しい。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/drop_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view.md b/reference/ranges/drop_view.md
index 3ff0f4ddb..e2187b6d3 100644
--- a/reference/ranges/drop_view.md
+++ b/reference/ranges/drop_view.md
@@ -37,9 +37,9 @@ namespace std::ranges {
 
 - (2): `E`および`F`を式、型`T`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、型`D`を[`range_difference_t`](range_difference_t.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`とする。式`views::drop(E, F)`の効果は以下の通り
     - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格
-    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F, `[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
-    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E) + `[`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F), `[`ranges::end`](end.md)`(E))`と等しい。ただし、`E`は1度だけ評価される
-        - [`span`](/reference/span/span.md) (ただし、`T::extent == `[`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
+    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F,` [`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
+    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E) +` [`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F),` [`ranges::end`](end.md)`(E))`と等しい。ただし、`E`は1度だけ評価される
+        - [`span`](/reference/span/span.md) (ただし、`T::extent ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
         - [`basic_string_view`](/reference/string_view/basic_string_view.md)
         - [`ranges::iota_view`](iota_view.md)
         - [`ranges::subrange`](subrange.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_while_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/drop_while_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view.md b/reference/ranges/drop_while_view.md
index 34652be4f..6c44b9c03 100644
--- a/reference/ranges/drop_while_view.md
+++ b/reference/ranges/drop_while_view.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/empty.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty.md b/reference/ranges/empty.md
index 6db3ae67d..795c06473 100644
--- a/reference/ranges/empty.md
+++ b/reference/ranges/empty.md
@@ -21,7 +21,7 @@ Rangeが空かどうかを判定する関数オブジェクト。
 1. `T`が要素数不明の配列型であれば、呼び出しは不適格。
 2. `bool(t.empty())`が有効な式であれば、`bool(t.empty())`と等しい。
 3. [`ranges::size`](size.md)`(t) == 0`が有効な式であれば、`(`[`ranges::size`](size.md)`(t) == 0)`と等しい。
-4. `bool(`[`ranges::begin`](begin.md)`(t) == `[`ranges::end`](end.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)`(t)`の型が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`bool(`[`ranges::begin`](begin.md)`(t) == `[`ranges::end`](end.md)`(t))`と等しい。
+4. `bool(`[`ranges::begin`](begin.md)`(t) ==` [`ranges::end`](end.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)`(t)`の型が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`bool(`[`ranges::begin`](begin.md)`(t) ==` [`ranges::end`](end.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/end.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index 2c53473a1..9aa35f546 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -20,7 +20,7 @@ Rangeから最後尾要素の次を指すイテレータもしくは番兵を取
 このとき、式`ranges::begin(E)`の効果は以下の通り。
 
 1. `E`がrvalueかつ[`enable_borrowed_range`](enable_borrowed_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`であれば、呼び出しは不適格。
-2. `T`が配列型であれば、`t + `[`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;`に等しい(expression‑equivalent)。ただし、要素数不明の配列か、[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
+2. `T`が配列型であれば、`t +` [`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;`に等しい(expression‑equivalent)。ただし、要素数不明の配列か、[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
 3. [`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.end())`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;T&amp;gt;&amp;gt;`のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.end())`と等しい。
 4. `T`がクラス型または列挙体であって、`end`がADLで見つかり、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(end(t))`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;T&amp;gt;&amp;gt;`のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(end(t))`と等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enumerate_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/enumerate_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/enumerate_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/enumerate_view.md b/reference/ranges/enumerate_view.md
index 98534eaa3..536c9bf83 100644
--- a/reference/ranges/enumerate_view.md
+++ b/reference/ranges/enumerate_view.md
@@ -20,7 +20,7 @@ namespace std::ranges {
 
 `enumerate_view`はインデックスを付ける[`view`](view.md)。
 
-`enumerate_view`の要素は、インデックスと元のRangeの要素からなる[`tuple`](/reference/tuple/tuple.md) ([`tuple`](/reference/tuple/tuple.md)`&amp;lt;`[`range_difference_t`](range_difference_t.md)`&amp;lt;Base&amp;gt;, `[`range_value_t`](range_value_t.md)`&amp;lt;Base&amp;gt;&amp;gt;`)である。
+`enumerate_view`の要素は、インデックスと元のRangeの要素からなる[`tuple`](/reference/tuple/tuple.md) ([`tuple`](/reference/tuple/tuple.md)`&amp;lt;`[`range_difference_t`](range_difference_t.md)`&amp;lt;Base&amp;gt;,` [`range_value_t`](range_value_t.md)`&amp;lt;Base&amp;gt;&amp;gt;`)である。
 
 - (1): `enumerate_view`のクラス定義
 - (2): `enumerate_view`を生成するRangeアダプタオブジェクト
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/filter_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index 31d7da22f..520a81288 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -44,7 +44,7 @@ namespace std::ranges {
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/begin.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/filter_view/begin.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/begin.md b/reference/ranges/filter_view/begin.md
index 37761a1b9..d898a7d49 100644
--- a/reference/ranges/filter_view/begin.md
+++ b/reference/ranges/filter_view/begin.md
@@ -20,7 +20,7 @@ constexpr iterator begin();
 
 ## 戻り値
 
-`{*this, `[`ranges::find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
+`{*this,` [`ranges::find_if`](/reference/algorithm/ranges_find_if.md)`(base_,` [`ref`](/reference/functional/ref.md)`(*pred_))}`
 
 [`range`](../range.md)のモデルとなるためにはこの関数が償却定数時間で実行できなければならないため、値はキャッシュされる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/size.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/iota_view/size.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/size.md b/reference/ranges/iota_view/size.md
index 9b7361f60..91090b89c 100644
--- a/reference/ranges/iota_view/size.md
+++ b/reference/ranges/iota_view/size.md
@@ -9,7 +9,7 @@
 constexpr auto size() const
   requires (same_as&amp;lt;W, Bound&amp;gt; &amp;amp;&amp;amp; advanceable&amp;lt;W&amp;gt;) || (integral&amp;lt;W&amp;gt; &amp;amp;&amp;amp; integral&amp;lt;Bound&amp;gt;) || sized_sentinel_for&amp;lt;Bound, W&amp;gt;;
 ```
-* integral[link /reference/concepts/same_as.md]
+* integral[link /reference/concepts/integral.md]
 * advanceable[italic][link iterator.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>movable-box -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/movable_box.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/movable_box.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/movable_box.md b/reference/ranges/movable_box.md
index 83d23d18f..40a72fd5a 100644
--- a/reference/ranges/movable_box.md
+++ b/reference/ranges/movable_box.md
@@ -10,7 +10,7 @@
 `movable-box&amp;lt;T&amp;gt;` は、[`std::optional`](/reference/optional/optional.md)`&amp;lt;T&amp;gt;`とほとんど同じであるが、以下の差分をもつ。
 
 ### 差分1
-テンプレートパラメーター制約 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
+テンプレートパラメーター制約 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
 
 ### 差分2
 `T`が[`copyable`](/reference/concepts/copyable.md)のモデルでない場合、コピー代入演算子は以下のように定義される。
@@ -51,7 +51,7 @@ constexpr movable-box&amp;amp; operator=(movable-box&amp;amp;&amp;amp; that) noexcept(is_nothrow_move_co
 以下のことが推奨される。
 
 - [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt;` なら、`movable-box&amp;lt;T&amp;gt;` は
-`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
+`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 - そうでなければ、`movable-box&amp;lt;T&amp;gt;` は
 `T` が [`movable`](/reference/concepts/movable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/reverse_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index fe830f44a..1245ac080 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 - (2): 式`views::reverse(E)`の効果は次の通り
     - `E`の型が`reverse_view`の特殊化であれば、`E.base()`と等しい (CV修飾されている場合を含む)
-    - イテレータ型`I`、[`subrange_kind`](subrange_kind.md)の値`K`に対し、`E`の型がCV修飾された[`subrange`](subrange.md)`&amp;lt;`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, `[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, K&amp;gt;`であるとする。このとき、`E`は一度しか評価されないとして、
+    - イテレータ型`I`、[`subrange_kind`](subrange_kind.md)の値`K`に対し、`E`の型がCV修飾された[`subrange`](subrange.md)`&amp;lt;`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;,` [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, K&amp;gt;`であるとする。このとき、`E`は一度しか評価されないとして、
         - `K`が[`subrange_kind::sized`](subrange_kind.md)であれば、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base(), E.size())`と等しい
         - それ以外のとき、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base())`と等しい
     - それ以外のとき、`reverse_view{E}`と等しい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/size.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/size.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/size.md b/reference/ranges/size.md
index 48a6eca92..1d051293d 100644
--- a/reference/ranges/size.md
+++ b/reference/ranges/size.md
@@ -21,7 +21,7 @@ Rangeの要素数を取得する関数オブジェクト。
 1. `T`が配列型であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(`[`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;)`に等しい(expression‑equivalent)。ただし、要素数不明の配列であれば、呼び出しは不適格。
 2. [`disable_sized_range`](disable_sized_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`、かつ[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.size())`が整数型(integer-like)の有効な式であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.size())`と等しい。
 3. `T`がクラス型または列挙体であって、[`disable_sized_range`](disable_sized_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`、かつ`size`がADLで見つかり、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(size(t))`が整数型の有効な式であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(size(t))`と等しい。
-4. `to-unsigned-like(`[`ranges::end`](end.md)`(t) - `[`ranges::begin`](begin.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)の型`I`、[`ranges::end`](end.md)の型`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`と[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`to-unsigned-like(`[`ranges::end`](end.md)`(t) - `[`ranges::begin`](begin.md)`(t))`と等しい。
+4. `to-unsigned-like(`[`ranges::end`](end.md)`(t) -` [`ranges::begin`](begin.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)の型`I`、[`ranges::end`](end.md)の型`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`と[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`to-unsigned-like(`[`ranges::end`](end.md)`(t) -` [`ranges::begin`](begin.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slide_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/slide_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view.md b/reference/ranges/slide_view.md
index 7f4871734..0eed5231b 100644
--- a/reference/ranges/slide_view.md
+++ b/reference/ranges/slide_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;view V&amp;gt;
     requires input_range&amp;lt;V&amp;gt;
-  class slide_view : public view_interface&amp;lt;slide_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class slide_view : public view_interface&amp;lt;slide_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ slide = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/stride_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view.md b/reference/ranges/stride_view.md
index d14de81ec..8c0d7dbb0 100644
--- a/reference/ranges/stride_view.md
+++ b/reference/ranges/stride_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range V&amp;gt;
     requires view&amp;lt;V&amp;gt;
-  class stride_view : public view_interface&amp;lt;stride_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class stride_view : public view_interface&amp;lt;stride_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ stride = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/size.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/subrange/size.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/size.md b/reference/ranges/subrange/size.md
index 16462f72b..21ad53933 100644
--- a/reference/ranges/subrange/size.md
+++ b/reference/ranges/subrange/size.md
@@ -20,7 +20,7 @@ constexpr make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; size() const
 ## 効果
 
 - [`StoreSize`](op_constructor.md)が真のとき、 `return size_;`
-- それ以外のとき、`return `[`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_ - begin_);`
+- それ以外のとき、`return` [`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_ - begin_);`
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/tuple_element.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/subrange/tuple_element.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/tuple_element.md b/reference/ranges/subrange/tuple_element.md
index 4d692b184..3397ee454 100644
--- a/reference/ranges/subrange/tuple_element.md
+++ b/reference/ranges/subrange/tuple_element.md
@@ -52,7 +52,7 @@ int main()
 ```
 * std::tuple_element_t[link /reference/tuple/tuple_element.md]
 * std::ranges::subrange[link /reference/ranges/subrange.md]
-* std::same_as[link /reference/ranges/subrange.md]
+* std::same_as[link /reference/concepts/same_as.md]
 * std::ranges::iterator_t[link /reference/ranges/iterator_t.md]
 * std::ranges::sentinel_t[link /reference/ranges/sentinel_t.md]
 * std::views::empty[link /reference/ranges/empty_view.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/take_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index 61f41b59c..2a4e3ff22 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -37,9 +37,9 @@ namespace std::ranges {
 
 - (2): `E`および`F`を式、型`T`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、型`D`を[`range_difference_t`](range_difference_t.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`とする。式`views::take(E, F)`の効果は以下の通り
     - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格
-    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F, `[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
-    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E), `[`ranges::begin`](begin.md)`(E) + `[`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F))`と等しい。ただし、`E`は1度だけ評価される
-        - [`span`](/reference/span/span.md) (ただし、`T::extent == `[`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
+    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F,` [`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
+    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E),` [`ranges::begin`](begin.md)`(E) +` [`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F))`と等しい。ただし、`E`は1度だけ評価される
+        - [`span`](/reference/span/span.md) (ただし、`T::extent ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
         - [`basic_string_view`](/reference/string_view/basic_string_view.md)
         - [`ranges::iota_view`](iota_view.md)
         - [`ranges::subrange`](subrange.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/take_while_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
index dabfcd3a5..c12997094 100644
--- a/reference/ranges/take_while_view.md
+++ b/reference/ranges/take_while_view.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/to.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to.md b/reference/ranges/to.md
index d6a24d637..a27db847b 100644
--- a/reference/ranges/to.md
+++ b/reference/ranges/to.md
@@ -42,15 +42,15 @@ Rangeの各要素を要素とするコンテナを構築する。
 
 (1) Rangeの各要素を要素とするコンテナCのオブジェクトを以下の通りに構築して返す。
 
-`C`が[`input_range`](input_range.md)ではないか、[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;, `[`range_value_t`](range_value_t.md)`&amp;lt;C&amp;gt;&amp;gt;` である(`R`の要素への参照が`C`の要素に変換できる)場合:
+`C`が[`input_range`](input_range.md)ではないか、[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;,` [`range_value_t`](range_value_t.md)`&amp;lt;C&amp;gt;&amp;gt;` である(`R`の要素への参照が`C`の要素に変換できる)場合:
 
 1. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, R, Args...&amp;gt;`である(`C`が`R`と残りの引数で構築できる)場合
-    - `C(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-2. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, `[`from_range_t`](from_range_t.md)`, R, Args...&amp;gt;`である(`C`が[`from_range_t`](from_range_t.md)、`R`、残りの引数で構築できる)場合
-    - `C(`[`from_range`](from_range_t.md)`, `[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-3. [`common_range`](common_range.md)`&amp;lt;R&amp;gt;`が`true`で、[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;&amp;gt;::iterator_category`が `input_iterator_tag` から派生する有効な型であり、[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, `[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;, `[`sentinel_t`](sentinel_t.md)`&amp;lt;R&amp;gt;, Args...&amp;gt;`である(`C`が`R`のイテレータおよび番兵と残りの引数で構築できる)場合
-    - `C(`[`ranges::begin(r)`](begin.md)`, `[`ranges::end(r)`](end.md)`, `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-4. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, Args...&amp;gt;`が`true`で、`container-insertable&amp;lt;C, `[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;&amp;gt;`が`true`である場合
+    - `C(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+2. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C,` [`from_range_t`](from_range_t.md)`, R, Args...&amp;gt;`である(`C`が[`from_range_t`](from_range_t.md)、`R`、残りの引数で構築できる)場合
+    - `C(`[`from_range`](from_range_t.md)`,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+3. [`common_range`](common_range.md)`&amp;lt;R&amp;gt;`が`true`で、[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;&amp;gt;::iterator_category`が `input_iterator_tag` から派生する有効な型であり、[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C,` [`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;,` [`sentinel_t`](sentinel_t.md)`&amp;lt;R&amp;gt;, Args...&amp;gt;`である(`C`が`R`のイテレータおよび番兵と残りの引数で構築できる)場合
+    - `C(`[`ranges::begin(r)`](begin.md)`,` [`ranges::end(r)`](end.md)`,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+4. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, Args...&amp;gt;`が`true`で、`container-insertable&amp;lt;C,` [`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;&amp;gt;`が`true`である場合
     - 以下のコードで初期化する
 
 ```cpp
@@ -95,12 +95,12 @@ struct input-iterator {
 
 また、`DEDUCE_EXPR` を次のように定義する。
 
-1. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
-2. 有効な式ならば、`C(`[`from_range`](from_range_t.md)`, `[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
-3. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+1. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+2. 有効な式ならば、`C(`[`from_range`](from_range_t.md)`,` [`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+3. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
 4. 1-3が有効でなければ、ill-formed
 
-このとき、戻り値は `to&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`(DEDUCE_EXPR)&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+このとき、戻り値は `to&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`(DEDUCE_EXPR)&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
 
 (3), (4): 次の性質をもつ完全転送呼び出しラッパー(*perfect forwarding call wrapper*)であるようなRangeアダプタクロージャオブジェクト`f`を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/zip_transform_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index cad05caf0..c6193d747 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -10,7 +10,7 @@ namespace std::ranges {
     requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0) &amp;amp;&amp;amp; is_object_v&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
               regular_invocable&amp;lt;F&amp;amp;, range_reference_t&amp;lt;Views&amp;gt;...&amp;gt; &amp;amp;&amp;amp;
               can-reference&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, range_reference_t&amp;lt;Views&amp;gt;...&amp;gt;&amp;gt;
-  class zip_transform_view : public view_interface&amp;lt;zip_transform_view&amp;lt;F, Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class zip_transform_view : public view_interface&amp;lt;zip_transform_view&amp;lt;F, Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ zip_transform = /*unspecified*/;      // (2)
@@ -44,7 +44,7 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 - (2): `F`を部分式、`Es...`を部分式のパックとする。式 `views::zip_transform(F, Es...)` の効果は以下の通り。
     - `Es` が空でないとき、`zip_transform_view(F, Es...)` と等しい
     - `Es` が空のとき、 `FD` を [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;`として、`((void)F, auto(`[`views::empty`](empty_view.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;&amp;gt;))` と等しい
-        - ただし、 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;FD&amp;gt; &amp;amp;&amp;amp; `[`regular_invocable`](/reference/concepts/invocable.md)`&amp;lt;FD&amp;amp;&amp;gt;` が `false`、または [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;` がオブジェクト型でないとき、ill-formed
+        - ただし、 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;FD&amp;gt; &amp;amp;&amp;amp;` [`regular_invocable`](/reference/concepts/invocable.md)`&amp;lt;FD&amp;amp;&amp;gt;` が `false`、または [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;` がオブジェクト型でないとき、ill-formed
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/zip_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_view.md b/reference/ranges/zip_view.md
index 74720f290..9b847f365 100644
--- a/reference/ranges/zip_view.md
+++ b/reference/ranges/zip_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range... Views&amp;gt;
   requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0)
-  class zip_view : public view_interface&amp;lt;zip_view&amp;lt;Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class zip_view : public view_interface&amp;lt;zip_view&amp;lt;Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ zip = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_view/end.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/ranges/zip_view/end.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_view/end.md b/reference/ranges/zip_view/end.md
index 755dce3b4..d1176b899 100644
--- a/reference/ranges/zip_view/end.md
+++ b/reference/ranges/zip_view/end.md
@@ -30,11 +30,11 @@ constexpr auto end() const
     - `zip-is-common&amp;lt;Views...&amp;gt;`が`false`の場合：
         - `return sentinel&amp;lt;false&amp;gt;(tuple-transform(ranges::end, views_));`
     - `(random_access_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sized_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...)`が`true`の場合：
-        - `return begin() + `[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;false&amp;gt;&amp;gt;(size());`
+        - `return begin() +` [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;false&amp;gt;&amp;gt;(size());`
     - それ以外の場合：
         - `return iterator&amp;lt;false&amp;gt;(tuple-transform(ranges::end, views_));`
 
-- (2) : `return begin() + `[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;true&amp;gt;&amp;gt;(size());`
+- (2) : `return begin() +` [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;true&amp;gt;&amp;gt;(size());`
 
 - (3) : 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flags -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/regex/basic_regex/flags.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/regex/basic_regex/flags.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/basic_regex/flags.md b/reference/regex/basic_regex/flags.md
index 0011209df..5e462ac12 100644
--- a/reference/regex/basic_regex/flags.md
+++ b/reference/regex/basic_regex/flags.md
@@ -26,7 +26,7 @@ flag_type flags() const;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;regex&amp;gt;
 
-#define PRINTFLAG(f, FLAG) (std::cout &amp;lt;&amp;lt; #FLAG &amp;#34; is &amp;#34; &amp;lt;&amp;lt; (f &amp;amp; std::regex_constants::FLAG ? &amp;#34;set&amp;#34; : &amp;#34;n
+#define PRINTFLAG(f, FLAG) (std::cout &amp;lt;&amp;lt; #FLAG &amp;#34; is &amp;#34; &amp;lt;&amp;lt; (f &amp;amp; std::regex_constants::FLAG ? &amp;#34;set&amp;#34; : &amp;#34;not set&amp;#34;) &amp;lt;&amp;lt; std::endl)
 
 void print(std::regex_constants::syntax_option_type f)
 {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/regex/match_results/op_equal.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/regex/match_results/op_equal.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/match_results/op_equal.md b/reference/regex/match_results/op_equal.md
index 0183158d8..e116a1913 100644
--- a/reference/regex/match_results/op_equal.md
+++ b/reference/regex/match_results/op_equal.md
@@ -24,7 +24,7 @@ namespace std {
     - `m1.`[`empty`](empty.md)`() &amp;amp;&amp;amp; m2.`[`empty`](empty.md)`()` である。
     - `!m1.`[`empty`](empty.md)`() &amp;amp;&amp;amp; !m2.`[`empty`](empty.md)`()`、かつ、以下の条件をすべて満たす。
         - `m1.`[`prefix`](prefix.md)`() == m2.`[`prefix`](prefix.md)`()`
-        - `m1.`[`size`](size.md)`() == m2.`[`size`](size.md)`() &amp;amp;&amp;amp;` [`equal`](../../algorithm/equal.md)`(m1.`[`begin`](begin.md)`(), m1.`[`end`](end.md)`(), m2.`[`begin`](begin.md)`()`
+        - `m1.`[`size`](size.md)`() == m2.`[`size`](size.md)`() &amp;amp;&amp;amp;` [`equal`](../../algorithm/equal.md)`(m1.`[`begin`](begin.md)`(), m1.`[`end`](end.md)`(), m2.`[`begin`](begin.md)`())`
         - `m1.`[`suffix`](suffix.md)`() == m2.`[`suffix`](suffix.md)`()`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/set.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/set.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;set&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;ヘッダは、集合を表す連想コンテナ、&lt;code&gt;set&lt;/code&gt;と&lt;code&gt;multiset&lt;/code&gt;を定義する。&lt;br /&gt;
&lt;code&gt;set&lt;/code&gt;はキーの重複を許可しないが、&lt;code&gt;multiset&lt;/code&gt;はキーの重複を許可する。  &lt;/p&gt;
&lt;p&gt;連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;set&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;と&lt;code&gt;multiset&lt;/code&gt;は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;set&lt;/code&gt;や&lt;code&gt;multiset&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素のキー：互いに等しい二つのキーを持つ要素が &lt;code&gt;set&lt;/code&gt; に格納されることは無い。複数の等しいキーを許す同様の連想コンテナは &lt;code&gt;multiset&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;要素の値はキーと値の&lt;code&gt;pair&lt;/code&gt;型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;set/set.html&#34;&gt;set&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許可しない集合(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;set/multiset.html&#34;&gt;multiset&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許可する集合(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html&#34; target=&#34;_blank&#34;&gt;N2930 Range-Based For Loop Wording (Without Concepts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/span/span/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/span/span/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/op_constructor.md b/reference/span/span/op_constructor.md
index 5b084d70e..c4481a62f 100644
--- a/reference/span/span/op_constructor.md
+++ b/reference/span/span/op_constructor.md
@@ -79,7 +79,7 @@ constexpr explicit(extent != dynamic_extent)
         - [`std::is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_t&amp;gt;` が `false`であること
 - (4), (5), (6) :
     - `extent ==` [`dynamic_extent`](/reference/span/dynamic_extent.md) `|| N == extent`が`true`であること
-    - [`remove_pointer_t`](/reference/type_traits/remove_pointer.md)`&amp;lt;decltype(`[`data`](/reference/iterator/data.md)`(arr)))&amp;gt;`を型`U`であるとして、
+    - [`remove_pointer_t`](/reference/type_traits/remove_pointer.md)`&amp;lt;decltype(`[`data`](/reference/iterator/data.md)`(arr))&amp;gt;`を型`U`であるとして、
         - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U(*)[], element_type(*)[]&amp;gt;`が`true`であること (この制約の意図は、配列の要素型から`element_type`へ、修飾の変換のみを許可すること)
 - (7) :
     - 型 `U` を [`std::remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;`[`std::iter_reference_t`](/reference/iterator/iter_reference_t.md)`&amp;lt;R&amp;gt;&amp;gt;`とするとき
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/sstream/basic_stringbuf/view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/view.md b/reference/sstream/basic_stringbuf/view.md
index a1a75d42d..d3c998f5e 100644
--- a/reference/sstream/basic_stringbuf/view.md
+++ b/reference/sstream/basic_stringbuf/view.md
@@ -14,7 +14,7 @@ basic_string_view&amp;lt;CharT, Traits&amp;gt; view() const noexcept;
 
 ## 戻り値
 バッファが初期化されている場合、[`gptr()`](/reference/streambuf/basic_streambuf/gptr.md)と[`egptr()`](/reference/streambuf/basic_streambuf/egptr.md)の間の文字列を指す`basic_string_view`オブジェクトを返す。  
-それ以外の場合、[`pbase()`](/reference/streambuf/basic_streambuf/pbase.md)と[`epptr()`](/reference/streambuf/basic_streambuf/pptr.md)の間の文字列を指す`basic_string_view`オブジェクトを返す。
+それ以外の場合、[`pbase()`](/reference/streambuf/basic_streambuf/pbase.md)と[`epptr()`](/reference/streambuf/basic_streambuf/epptr.md)の間の文字列を指す`basic_string_view`オブジェクトを返す。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_token -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source/get_token.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/stop_token/stop_source/get_token.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source/get_token.md b/reference/stop_token/stop_source/get_token.md
index bfd0c76f1..f0066c1e9 100644
--- a/reference/stop_token/stop_source/get_token.md
+++ b/reference/stop_token/stop_source/get_token.md
@@ -41,7 +41,7 @@ int main()
 * std::stop_token[link ../stop_token.md]
 * std::stop_source[link ../stop_source.md]
 * std::nostopstate[link ../nostopstate.md]
-* stop_possible()[link ../stop_token/stop_requested.md]
+* stop_possible()[link ../stop_token/stop_possible.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_avail -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/in_avail.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/streambuf/basic_streambuf/in_avail.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/in_avail.md b/reference/streambuf/basic_streambuf/in_avail.md
index 2f028a882..5845ee82c 100644
--- a/reference/streambuf/basic_streambuf/in_avail.md
+++ b/reference/streambuf/basic_streambuf/in_avail.md
@@ -21,7 +21,7 @@ namespace std {
 現在の入力列の読み取り可能な文字数を返す。
 
 ## 戻り値
-- 読み取り可能な文字列が存在する場合、[`egptr()`](egptr.md)` - `[`gptr()`](gptr.md)を返す。
+- 読み取り可能な文字列が存在する場合、[`egptr()`](egptr.md) `-` [`gptr()`](gptr.md)を返す。
 - それ以外の場合、[`showmanyc()`](showmanyc.md)を返す。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setg -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/setg.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/streambuf/basic_streambuf/setg.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/setg.md b/reference/streambuf/basic_streambuf/setg.md
index b6a9189fd..746350477 100644
--- a/reference/streambuf/basic_streambuf/setg.md
+++ b/reference/streambuf/basic_streambuf/setg.md
@@ -20,7 +20,7 @@ namespace std {
 入力部分列の各ポインタを設定する。
 
 ## 事後条件
-`gbeg == `[`eback()`](eback.md) および `gnext == `[`gptr()`](gptr.md) および `gend == `[`egptr()`](egptr.md)。
+`gbeg ==` [`eback()`](eback.md) および `gnext ==` [`gptr()`](gptr.md) および `gend ==` [`egptr()`](egptr.md)。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setp -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/setp.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/streambuf/basic_streambuf/setp.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/setp.md b/reference/streambuf/basic_streambuf/setp.md
index 3aac890d3..828f127a4 100644
--- a/reference/streambuf/basic_streambuf/setp.md
+++ b/reference/streambuf/basic_streambuf/setp.md
@@ -20,7 +20,7 @@ namespace std {
 出力部分列の各ポインタを設定する。
 
 ## 事後条件
-`pbeg == `[`pbase()`](pbase.md) および `pbeg == `[`pptr()`](pptr.md) および `pend == `[`epptr()`](epptr.md)。
+`pbeg ==` [`pbase()`](pbase.md) および `pbeg ==` [`pptr()`](pptr.md) および `pend ==` [`epptr()`](epptr.md)。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>showmanyc -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/showmanyc.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/streambuf/basic_streambuf/showmanyc.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/showmanyc.md b/reference/streambuf/basic_streambuf/showmanyc.md
index 67000accf..9cfdc7ee1 100644
--- a/reference/streambuf/basic_streambuf/showmanyc.md
+++ b/reference/streambuf/basic_streambuf/showmanyc.md
@@ -49,8 +49,8 @@ public:
 int main() {
     dummy_buf buf{};
     std::cout &amp;lt;&amp;lt; buf.in_avail() &amp;lt;&amp;lt; std::endl;  // 残2文字
-    buf.sbumpc();  //　1文字進める
-    buf.sbumpc();  //　1文字進める
+    buf.sbumpc();  // 1文字進める
+    buf.sbumpc();  // 1文字進める
     std::cout &amp;lt;&amp;lt; buf.in_avail() &amp;lt;&amp;lt; std::endl;  // 残0文字。in_avail()からshowmanyc()が呼ばれる
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/append.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index a35d2d13e..6f6d09989 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -69,7 +69,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (8), (9) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
@@ -113,7 +113,7 @@ constexpr basic_string&amp;amp;
     ```
 
 - (9) 対象オブジェクトの末尾に、[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`の指定された範囲の文字列が追加される。
-    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md)` - pos` の小さい方である。  
+    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md) `- pos` の小さい方である。  
 以下と等価。
     ```cpp
     basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
@@ -146,7 +146,7 @@ constexpr basic_string&amp;amp;
 - (6) C++03 まで：[`size`](size.md)`() &amp;gt;= npos -` [`distance`](/reference/iterator/distance.md)`(first, last)` の場合、`length_error` が送出される。  
     C++11 から：[`size`](size.md)`() +` [`distance`](/reference/iterator/distance.md)`(first, last) &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
 
-- (7) [`size`](size.md)`() + il.`[`size`](/reference/initializer_list/initializer_list.md)`() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
+- (7) [`size`](size.md)`() + il.`[`size`](/reference/initializer_list/initializer_list/size.md)`() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/append_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append_range.md b/reference/string/basic_string/append_range.md
index 63f3b7979..698ae1e40 100644
--- a/reference/string/basic_string/append_range.md
+++ b/reference/string/basic_string/append_range.md
@@ -15,7 +15,7 @@ Rangeの要素を末尾へ追加する。
 
 
 ## 効果
-[`append`](append.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+[`append`](append.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 5fee95ee2..cc0cc9cfd 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -72,7 +72,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (9), (10) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/assign_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign_range.md b/reference/string/basic_string/assign_range.md
index 216a6f93a..ed1d54e62 100644
--- a/reference/string/basic_string/assign_range.md
+++ b/reference/string/basic_string/assign_range.md
@@ -15,7 +15,7 @@ Rangeの各要素を再代入する。
 
 
 ## 効果
-`return ` [`assign`](assign.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+`return ` [`assign`](assign.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/compare.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index b0b9bc62c..7575e9a86 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -102,7 +102,7 @@ constexpr int
 ## テンプレートパラメータ制約
 
 - (7), (8), (9) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/insert.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index bebfa273b..5f5cc82d9 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -92,7 +92,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (10), (11) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert_range.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/insert_range.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert_range.md b/reference/string/basic_string/insert_range.md
index 6197d501c..934479d33 100644
--- a/reference/string/basic_string/insert_range.md
+++ b/reference/string/basic_string/insert_range.md
@@ -15,7 +15,7 @@ Rangeの各要素を任意の位置に挿入する。
 
 
 ## 効果
-`return ` [`insert`](insert.md)`(pos, basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+`return ` [`insert`](insert.md)`(pos, basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/op_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index 60b06327e..dab2006d2 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -52,7 +52,7 @@ basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7) C++23
 ## テンプレートパラメータ制約
 
 - (6) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index b0a95566d..56a126b7d 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -150,9 +150,9 @@ constexpr basic_string(from_range_t, R&amp;amp;&amp;amp; rg,
 ## テンプレートパラメータ制約
 
 - (14) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
-- (15) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`であること
+- (15) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`であること
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index c8c721f05..a983c500f 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -31,7 +31,7 @@ constexpr basic_string&amp;amp; operator+=(const T&amp;amp; t); // (5) C++20
 ## テンプレートパラメータ制約
 
 - (5) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/replace.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index fb22d0451..6d9733f8b 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -193,7 +193,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (12), (13), (14) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize_and_overwrite -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/resize_and_overwrite.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/basic_string/resize_and_overwrite.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/resize_and_overwrite.md b/reference/string/basic_string/resize_and_overwrite.md
index d7e94a1ff..210ccc884 100644
--- a/reference/string/basic_string/resize_and_overwrite.md
+++ b/reference/string/basic_string/resize_and_overwrite.md
@@ -33,8 +33,8 @@ constexpr void resize_and_overwrite(size_type n, Operation op); // C++23
 
 
 ## 効果
-1. 関数実行前に `[`[`data()`](data.md)`, `[`data()`](data.md)` + n)` が有効範囲でないなら、領域の確保が行われる（[`reserve(n)`](reserve.md) 相当）。新たな領域は初期化されないことに注意。
-1. `std::move(op)(data(), n)` が呼ばれる。`op` 内では、`[`[`data()`](data.md)`, `[`data()`](data.md)` + n)` の範囲に対して任意の初期化を行う。
+1. 関数実行前に `[`[`data()`](data.md)`,` [`data()`](data.md) `+ n)` が有効範囲でないなら、領域の確保が行われる（[`reserve(n)`](reserve.md) 相当）。新たな領域は初期化されないことに注意。
+1. `std::move(op)(data(), n)` が呼ばれる。`op` 内では、`[`[`data()`](data.md)`,` [`data()`](data.md) `+ n)` の範囲に対して任意の初期化を行う。
 1. `op` の戻り値を `r` とすると、サイズを `r` に変更する。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string/to_string.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string/to_string.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/to_string.md b/reference/string/to_string.md
index 0ee447df2..b7409a72d 100644
--- a/reference/string/to_string.md
+++ b/reference/string/to_string.md
@@ -184,7 +184,7 @@ std::string to_string(long double val)
 | 名前                            | 参照                      |
 |---------------------------------|---------------------------|
 | [`to_wstring`](to_wstring.md) | 数値を`wstring`に変換する |
-| [`to_chars`](/reference/charconv.md) | ロケール依存しない高速な変換 |
+| [`to_chars`](/reference/charconv/to_chars.md) | ロケール依存しない高速な変換 |
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string_view -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/string_view/basic_string_view.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view.md b/reference/string_view/basic_string_view.md
index 96b45116c..a3c916a8b 100644
--- a/reference/string_view/basic_string_view.md
+++ b/reference/string_view/basic_string_view.md
@@ -161,7 +161,7 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(op_deduction_guide)`](basic_string_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
+| [`(deduction_guide)`](basic_string_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
 
 
 ### リテラル
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_error_condition -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/system_error/make_error_condition.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/system_error/make_error_condition.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/make_error_condition.md b/reference/system_error/make_error_condition.md
index caa157746..81032deed 100644
--- a/reference/system_error/make_error_condition.md
+++ b/reference/system_error/make_error_condition.md
@@ -40,7 +40,7 @@ int main()
 }
 ```
 * std::make_error_condition[color ff0000]
-* std::error_condition[link error_code.md]
+* std::error_condition[link error_condition.md]
 * std::errc::invalid_argument[link errc.md]
 * econd.category()[link error_condition/category.md]
 * name()[link error_category/name.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_common_reference -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/basic_common_reference.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/tuple/tuple/basic_common_reference.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/basic_common_reference.md b/reference/tuple/tuple/basic_common_reference.md
index 8d0fd167b..560cb05e5 100644
--- a/reference/tuple/tuple/basic_common_reference.md
+++ b/reference/tuple/tuple/basic_common_reference.md
@@ -15,7 +15,7 @@ template&amp;lt;tuple-like TTuple, tuple-like UTuple,
 * tuple-like[link ../tuple-like.md]
 
 ## 概要
-[`tuple`](../tuple.md)と[`tuple-like`](../tuple-like.md)なオブジェクについて、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/common_reference.md)の特殊化である。
+[`tuple`](../tuple.md)と[`tuple-like`](../tuple-like.md)なオブジェクについて、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/basic_common_reference.md)の特殊化である。
 
 ユーザーが直接この特殊化を利用する必要はない。[`common_reference`](/reference/type_traits/common_reference.md)を使用すること。
 
@@ -26,7 +26,7 @@ template&amp;lt;tuple-like TTuple, tuple-like UTuple,
 
 ## 要件
 - `TTuple`か`UTuple`のどちらかが[`tuple`](../tuple.md)の特殊化であること。
-- `TTuple`と`UTuple`のそれぞれについて、（次の`T`を置き換える形で）[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;T, `[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;T&amp;gt;&amp;gt;`であること。
+- `TTuple`と`UTuple`のそれぞれについて、（次の`T`を置き換える形で）[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;T,` [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;T&amp;gt;&amp;gt;`であること。
     - 実質的には`TTuple`と`Utuple`について、参照型ではなく、最上位の`const`/`volatile`修飾も持っていないこと要求する。
 - `TTuple`と`UTuple`の要素数が一致していること。
     - 具体的には、[`tuple_size_v`](../tuple_size.md)`&amp;lt;TTuple&amp;gt; ==` [`tuple_size_v`](../tuple_size.md)`&amp;lt;UTuple&amp;gt;`であること。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke_result -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/invoke_result.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/type_traits/invoke_result.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/invoke_result.md b/reference/type_traits/invoke_result.md
index f8ee93eff..f68818925 100644
--- a/reference/type_traits/invoke_result.md
+++ b/reference/type_traits/invoke_result.md
@@ -30,7 +30,7 @@ namespace std {
 メンバ型`type`が定義される場合、以下と同じ型となる：
 
 ```cpp
-decltype(std::invoke(std::declval&amp;lt;F&amp;gt;(), std::declval&amp;lt;ArgsTypes&amp;gt;()...)
+decltype(std::invoke(std::declval&amp;lt;F&amp;gt;(), std::declval&amp;lt;ArgsTypes&amp;gt;()...))
 ```
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_class -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_class.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/type_traits/is_class.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_class.md b/reference/type_traits/is_class.md
index 90e661cf4..8080ad188 100644
--- a/reference/type_traits/is_class.md
+++ b/reference/type_traits/is_class.md
@@ -75,7 +75,7 @@ int main(){}
 - [Visual C++](/implementation.md#visual_cpp): 2008 (std::tr1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
 
 #### 備考
-上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 2010 は [`integral_constant`](integral_constant.md) が `operator bool()` を持っていないためエラーになる。また、GCC 4.3.4, Visual C++ 2010 は `enum class` に対応していたいためにエラーになる。
+上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 2010 は [`integral_constant`](integral_constant.md) が `operator bool()` を持っていないためエラーになる。また、GCC 4.3.4, Visual C++ 2010 は `enum class` に対応していないためエラーになる。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_signed -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/make_signed.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/type_traits/make_signed.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/make_signed.md b/reference/type_traits/make_signed.md
index 6b270bfa7..add5caf5f 100644
--- a/reference/type_traits/make_signed.md
+++ b/reference/type_traits/make_signed.md
@@ -75,7 +75,7 @@ int main() {}
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [GCC](/implementation.md#gcc): 4.4.7 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
-	- 2010は、cv修飾修飾されている型において、コンパイルエラーになるバグがある。
+	- 2010は、cv修飾されている型において、コンパイルエラーになるバグがある。
 	- `make_signed_t`は2013から
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unsigned -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/make_unsigned.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/type_traits/make_unsigned.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/make_unsigned.md b/reference/type_traits/make_unsigned.md
index 64e715dcf..7ebfccc7d 100644
--- a/reference/type_traits/make_unsigned.md
+++ b/reference/type_traits/make_unsigned.md
@@ -75,7 +75,7 @@ int main() {}
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [GCC](/implementation.md#gcc): 4.4.7 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
-	- 2010は、cv修飾修飾されている型において、コンパイルエラーになるバグがある。
+	- 2010は、cv修飾されている型において、コンパイルエラーになるバグがある。
 	- `make_unsigned_t`は2013から
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/swap.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/unordered_map/unordered_multimap/swap.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/swap.md b/reference/unordered_map/unordered_multimap/swap.md
index 25502c954..e34e8782a 100644
--- a/reference/unordered_map/unordered_multimap/swap.md
+++ b/reference/unordered_map/unordered_multimap/swap.md
@@ -36,7 +36,7 @@ void swap(unordered_multimap&amp;amp; x)
 
 
 ## 例外
-コンテナの `key_equal` と　`hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
+コンテナの `key_equal` と `hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/swap.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/unordered_set/unordered_multiset/swap.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/swap.md b/reference/unordered_set/unordered_multiset/swap.md
index 7c0d78c93..a3343d264 100644
--- a/reference/unordered_set/unordered_multiset/swap.md
+++ b/reference/unordered_set/unordered_multiset/swap.md
@@ -36,7 +36,7 @@ void swap(unordered_multiset&amp;amp; x)
 
 
 ## 例外
-コンテナの `key_equal` と　`hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
+コンテナの `key_equal` と `hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/swap.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/unordered_set/unordered_set/swap.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/swap.md b/reference/unordered_set/unordered_set/swap.md
index b1f0a38d3..828948859 100644
--- a/reference/unordered_set/unordered_set/swap.md
+++ b/reference/unordered_set/unordered_set/swap.md
@@ -36,7 +36,7 @@ void swap(unordered_set&amp;amp; x)
 
 
 ## 例外
-コンテナの `key_equal` と　`hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
+コンテナの `key_equal` と `hasher` のオブジェクト（それぞれ [`key_eq`](key_eq.md)`()` と [`hash_function`](hash_function.md)`()` が返すオブジェクト）の [`swap`](/reference/utility/swap.md)`()` が例外を投げなければ、例外を投げない。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utility -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/utility.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/utility.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;utility&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;utility&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;ヘッダでは、その他のライブラリの至る所で使用される、幾つかの基本的な関数やクラステンプレートを定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子定義&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/rel_ops.html&#34;&gt;rel_ops&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関係演算子(namespace)&lt;/td&gt;
&lt;td&gt;C++20から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;値の入れ替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/swap.html&#34;&gt;swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つのオブジェクトの値を交換する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/exchange.html&#34;&gt;exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を書き換え、書き換え前の値を返す(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;転送と移動&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートの引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward_like.html&#34;&gt;forward_like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第一テンプレート引数の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値を右辺値にキャストする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move_if_noexcept.html&#34;&gt;move_if_noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げないオブジェクトをムーブする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の修飾&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/as_const.html&#34;&gt;as_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値参照を&lt;code&gt;const&lt;/code&gt;左辺値参照にする (function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の値&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された型の値を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数比較&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_equal.html&#34;&gt;cmp_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_not_equal.html&#34;&gt;cmp_not_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less.html&#34;&gt;cmp_less&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less_equal.html&#34;&gt;cmp_less_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater.html&#34;&gt;cmp_greater&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater_equal.html&#34;&gt;cmp_greater_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_range.html&#34;&gt;in_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値が型のとりうる範囲内か判定する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;列挙型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/to_underlying.html&#34;&gt;to_underlying&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列挙値を基底型に変換する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;到達しない表明&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/unreachable.html&#34;&gt;unreachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コードパス不到達を表明する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;異なる型の二つの値の組(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ値(constant variable)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;型の先行宣言(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;直接構築&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非型引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ値 (variable template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンパイル時の整数シーケンス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/integer_sequence.html&#34;&gt;integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の整数型のシーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_integer_sequence.html&#34;&gt;make_integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence.html&#34;&gt;index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;型の整数シーケンス(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_index_sequence.html&#34;&gt;make_index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence_for.html&#34;&gt;index_sequence_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のシーケンスを、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスに変換する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_common_reference -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/basic_common_reference.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/utility/pair/basic_common_reference.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/basic_common_reference.md b/reference/utility/pair/basic_common_reference.md
index 068a924d8..f0d74a23c 100644
--- a/reference/utility/pair/basic_common_reference.md
+++ b/reference/utility/pair/basic_common_reference.md
@@ -17,7 +17,7 @@ namespace std {
 * basic_common_reference[link /reference/type_traits/basic_common_reference.md]
 
 ## 概要
-[`pair`](../pair.md)について、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/common_reference.md)の特殊化である。
+[`pair`](../pair.md)について、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/basic_common_reference.md)の特殊化である。
 
 ユーザーが直接この特殊化を利用する必要はない。[`common_reference`](/reference/type_traits/common_reference.md)を使用すること。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/utility/pair/op_constructor.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index 84f94e188..f85c5c9fe 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -66,7 +66,7 @@ constexpr pair(piecewise_construct_t,
                tuple&amp;lt;Args2...&amp;gt; second_args);                  // (11) C++20
 ```
 * EXPLICIT[italic]
-* pair-like[link /reference/tuple/tuple-like.md]
+* pair-like[link /reference/tuple/pair-like.md]
 
 ## 概要
 [`pair`](../pair.md)オブジェクトを構築する。
@@ -80,7 +80,7 @@ constexpr pair(piecewise_construct_t,
 - (7) : 変換可能な他の[`pair`](../pair.md)オブジェクトから構築
 - (8) : 変換可能な他の[`pair`](../pair.md)オブジェクトからムーブ構築
 - (9) : 変換可能な他の[`pair`](../pair.md)オブジェクトから構築
-- (10) : [`pair-like`](/reference/tuple/tuple-like.md)なオブジェクトから構築
+- (10) : [`pair-like`](/reference/tuple/pair-like.md)なオブジェクトから構築
 - (11) : `first`と`second`のコンストラクタ引数を`std::tuple`に詰めて受け取り、`first_args`と`second_args`内のそれぞれの要素を転送して`first`と`second`を直接構築
     - 転送は、`std::tuple`オブジェクト（`first_args`/`second_args`）内の要素`x`とその型`U`（`Args1...`/`Args2...`に含まれる型）によって、`std::forward&amp;lt;U&amp;gt;(x)`のようにしてコンストラクタに渡される
 
@@ -94,7 +94,7 @@ constexpr pair(piecewise_construct_t,
     - [`is_constructible`](/reference/type_traits/is_constructible.md)`&amp;lt;first_type, U&amp;amp;&amp;amp;&amp;gt;::value &amp;amp;&amp;amp;` [`is_constructible`](/reference/type_traits/is_constructible.md)`&amp;lt;second_type, V&amp;amp;&amp;amp;&amp;gt;::value`であること
     - C++14まで : `U`が`first_type`に暗黙変換可能でない場合、もしくは`V`が`second_type`に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される
 - (6)-(10) :
-    - C++23 : `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して、[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;first_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p)))&amp;gt; &amp;amp;&amp;amp;` [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;second_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p)))&amp;gt;`であること
+    - C++23 : `FWD(u)`を`static_cast&amp;lt;decltype(u)&amp;gt;(u)`と定義して、[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;first_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p)))&amp;gt; &amp;amp;&amp;amp;` [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;second_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p)))&amp;gt;`であること
 - (7) :
     - [`is_constructible`](/reference/type_traits/is_constructible.md)`&amp;lt;first_type, const U&amp;amp;&amp;gt;::value &amp;amp;&amp;amp;` [`is_constructible`](/reference/type_traits/is_constructible.md)`&amp;lt;second_type, const V&amp;amp;&amp;gt;::value`であること
     - C++14まで : `const U&amp;amp;`が`first_type`に暗黙変換可能でない場合、もしくは`const V&amp;amp;`が`second_type`に暗黙変換可能でない場合、この関数はオーバーロード解決から除外される
@@ -110,7 +110,7 @@ constexpr pair(piecewise_construct_t,
 
 - (5) : [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;first_type, U1&amp;amp;&amp;amp;&amp;gt; ||` [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;second_type, U2&amp;amp;&amp;amp;&amp;gt;`である場合、このコンストラクタは削除定義される
 - (6)-(10) :
-    - `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して
+    - `FWD(u)`を`static_cast&amp;lt;decltype(u)&amp;gt;(u)`と定義して
     - [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;first_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p)))&amp;gt; ||` [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;second_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p)))&amp;gt;`である場合、このコンストラクタは削除定義される
 - (11) : 要素型（`T1, T2`のどちらかもしくは両方）が参照型であり、初期化によって一時オブジェクトを束縛することになる場合、このコンストラクタは削除定義される
     - 上記のコンストラクタと同様に、[`reference_constructs_from_temporary`](/reference/type_traits/reference_constructs_from_temporary.md)を使用して判定される
@@ -124,7 +124,7 @@ constexpr pair(piecewise_construct_t,
 - (5) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U1, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U2, second_type&amp;gt;`である場合、`explicit`指定される
 - (6)-(10) :
-    - `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して
+    - `FWD(u)`を`static_cast&amp;lt;decltype(u)&amp;gt;(u)`と定義して
     - C++23 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p))), first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p))), second_type&amp;gt;`である場合、`explicit`指定される
 - (7) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U1&amp;amp;, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U2&amp;amp;, second_type&amp;gt;`である場合、`explicit`指定される
@@ -301,7 +301,7 @@ p8 : (X(1 2 3),Y(4 5))
 - [P1951R1 Default Arguments for `pair`&amp;#39;s Forwarding Constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1951r1.html)
     - C++23での`{}`完全転送への対応
 - [P2165R4 Compatibility between `tuple`, `pair` and *tuple-like* objects](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2165r4.pdf)
-    - [`pair-like`](/reference/tuple/tuple-like.md)なオブジェクトからの構築
+    - [`pair-like`](/reference/tuple/pair-like.md)なオブジェクトからの構築
 - [P2255R2 A type trait to detect reference binding to temporary](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2255r2.html)
     - 参照型を要素に持つ場合にダングリング参照が容易に作成できていたのを不適格にする
 - [P2321R2 `zip`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html#pair)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/gslice_array/op_right_shift_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/gslice_array/op_right_shift_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/gslice_array/op_right_shift_assign.md b/reference/valarray/gslice_array/op_right_shift_assign.md
index c1e924f8b..e4120f2ce 100644
--- a/reference/valarray/gslice_array/op_right_shift_assign.md
+++ b/reference/valarray/gslice_array/op_right_shift_assign.md
@@ -14,7 +14,7 @@ void operator&amp;gt;&amp;gt;=(const ValOrProxy&amp;lt;T&amp;gt;&amp;amp; xs) const;
 
 
 ## 効果
-元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ左シフトする。
+元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ右シフトする。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/indirect_array/op_right_shift_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/indirect_array/op_right_shift_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/indirect_array/op_right_shift_assign.md b/reference/valarray/indirect_array/op_right_shift_assign.md
index e8e0f77fd..1a3f2d1c9 100644
--- a/reference/valarray/indirect_array/op_right_shift_assign.md
+++ b/reference/valarray/indirect_array/op_right_shift_assign.md
@@ -14,7 +14,7 @@ void operator&amp;gt;&amp;gt;=(const ValOrProxy&amp;lt;T&amp;gt;&amp;amp; xs) const;
 
 
 ## 効果
-元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ左シフトする。
+元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ右シフトする。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/mask_array/op_right_shift_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/mask_array/op_right_shift_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/mask_array/op_right_shift_assign.md b/reference/valarray/mask_array/op_right_shift_assign.md
index 87400f7dd..6a41061a1 100644
--- a/reference/valarray/mask_array/op_right_shift_assign.md
+++ b/reference/valarray/mask_array/op_right_shift_assign.md
@@ -14,7 +14,7 @@ void operator&amp;gt;&amp;gt;=(const ValOrProxy&amp;lt;T&amp;gt;&amp;amp; xs) const;
 
 
 ## 効果
-元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ左シフトする。
+元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ右シフトする。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/slice_array/op_right_shift_assign.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/slice_array/op_right_shift_assign.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/slice_array/op_right_shift_assign.md b/reference/valarray/slice_array/op_right_shift_assign.md
index 1b899e0d0..80c3af5fc 100644
--- a/reference/valarray/slice_array/op_right_shift_assign.md
+++ b/reference/valarray/slice_array/op_right_shift_assign.md
@@ -14,7 +14,7 @@ void operator&amp;gt;&amp;gt;=(const ValOrProxy&amp;lt;T&amp;gt;&amp;amp; xs) const;
 
 
 ## 効果
-元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ左シフトする。
+元となる [`valarray`](../valarray.md) オブジェクトから参照によって抽出した各要素を、`xs` の各要素の値だけ右シフトする。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/op_greater_equal.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/valarray/op_greater_equal.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/op_greater_equal.md b/reference/valarray/valarray/op_greater_equal.md
index d88ff7f8f..cc8e1fc98 100644
--- a/reference/valarray/valarray/op_greater_equal.md
+++ b/reference/valarray/valarray/op_greater_equal.md
@@ -27,7 +27,7 @@ namespace std {
 * ValOrProxy[italic]
 
 ## 概要
-`valarray`において、左辺が右辺以上を判定する。
+`valarray`において、左辺が右辺以上かを判定する。
 
 - (1) : `xs`の各要素が、`ys`の各要素以上かを判定する。
 - (2) : `xs`の各要素が、`y`以上かを判定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/valarray/valarray/swap.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/valarray/valarray/swap.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/valarray/valarray/swap.md b/reference/valarray/valarray/swap.md
index 67bcee9d6..ea74562b4 100644
--- a/reference/valarray/valarray/swap.md
+++ b/reference/valarray/valarray/swap.md
@@ -14,7 +14,7 @@ void swap(valarray&amp;amp; v) noexcept;
 
 
 ## 効果
-`*this`の内容を`x`と交換する。
+`*this`の内容を`v`と交換する。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/at.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/vector/vector/at.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/at.md b/reference/vector/vector/at.md
index 64fe656e3..f742f4e6d 100644
--- a/reference/vector/vector/at.md
+++ b/reference/vector/vector/at.md
@@ -29,7 +29,7 @@ constexpr const_reference at(size_type n) const; // (2) C++20
 
 
 ## 備考
-`at(n)` は `*(`[`begin()`](begin.md)` + n)` と同じ結果となるが、イテレータを使用したランダムアクセスや[`operator[]`](op_at.md)と違い、コンテナの要素数に対して境界チェックを行う。
+`at(n)` は `*(`[`begin()`](begin.md) `+ n)` と同じ結果となるが、イテレータを使用したランダムアクセスや[`operator[]`](op_at.md)と違い、コンテナの要素数に対して境界チェックを行う。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_at.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:reference/vector/vector/op_at.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_at.md b/reference/vector/vector/op_at.md
index 090627089..d17b913a3 100644
--- a/reference/vector/vector/op_at.md
+++ b/reference/vector/vector/op_at.md
@@ -25,7 +25,7 @@ constexpr const_reference operator[](size_type n) const; // (2) C++20
 
 
 ## 備考
-- `vector`型のオブジェクト`v`に対して、`v[n]` と `*(v.`[`begin()`](begin.md)` + n)` は同じ結果になる
+- `vector`型のオブジェクト`v`に対して、`v[n]` と `*(v.`[`begin()`](begin.md) `+ n)` は同じ結果になる
 - `n &amp;gt;=` [`size()`](size.md)の場合、未定義動作を引き起こす
 - この関数は、[`at()`](at.md)メンバ関数とちがって境界チェックを行うことが規定されない。標準ライブラリの実装によっては[`assert`](/reference/cassert/assert.md)`(n &amp;lt;` [`size()`](size.md)`)`による境界チェックが行われる場合がある
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/comparison_operator_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/comparison_operator_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/comparison_operator_template_page.md b/start_editing/comparison_operator_template_page.md
index 8a134c590..112993dbd 100644
--- a/start_editing/comparison_operator_template_page.md
+++ b/start_editing/comparison_operator_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/concept_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/concept_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/concept_template_page.md b/start_editing/concept_template_page.md
index baca27922..7a21b8089 100644
--- a/start_editing/concept_template_page.md
+++ b/start_editing/concept_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/cpo_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/cpo_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/cpo_template_page.md b/start_editing/cpo_template_page.md
index 50f2eac09..b2cef3b05 100644
--- a/start_editing/cpo_template_page.md
+++ b/start_editing/cpo_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/function_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
index 6d08557e8..5f4de1fea 100644
--- a/start_editing/function_template_page.md
+++ b/start_editing/function_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/header_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/header_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;../start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;markdown_cpprefjp.html&#34;&gt;cpprefjpでのMarkdown記法の制限と拡張&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(ここには、このヘッダファイル(ライブラリ)の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 2.9 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 3.0 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 3.1 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 3.2 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 3.3 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.3.6 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 4.4.7 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 4.5.3 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 4.6.3 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 4.7.2 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 4.8.1 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 11.0 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 11.1 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 12.0 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 2005 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 2008 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 2010 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;, 2012 &lt;span aria-label=&#34;検証済&#34; role=&#34;img&#34; title=&#34;検証済&#34;&gt;✅&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、そのヘッダファイルが存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/lang_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/lang_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/lang_template_page.md b/start_editing/lang_template_page.md
index 9dad3f21f..6f41aad21 100644
--- a/start_editing/lang_template_page.md
+++ b/start_editing/lang_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/module_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/module_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;../start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;markdown_cpprefjp.html&#34;&gt;cpprefjpでのMarkdown記法の制限と拡張&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;(ここには、このモジュール(ライブラリ)の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;p&gt;(当面の間、モジュールだけで提供されるライブラリはないため、記事はヘッダー(/reference)が中心となります。モジュールのページでは、モジュールがどのヘッダーファイルに対応するのかを説明します。)&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、そのモジュールが存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/named_requirement_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/named_requirement_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/named_requirement_template_page.md b/start_editing/named_requirement_template_page.md
index 3f7f13085..fe39a9b0e 100644
--- a/start_editing/named_requirement_template_page.md
+++ b/start_editing/named_requirement_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/start_editing/type-type_template_page.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:start_editing/type-type_template_page.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/type-type_template_page.md b/start_editing/type-type_template_page.md
index 98a4455ce..b67913eb2 100644
--- a/start_editing/type-type_template_page.md
+++ b/start_editing/type-type_template_page.md
@@ -1,4 +1,4 @@
-# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+# page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)
 
 ([cpprefjpを編集するには](/start_editing.md) および [cpprefjpでのMarkdown記法の制限と拡張](markdown_cpprefjp.md) を先に読んで下さい。)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- Merge branch &#39;cpprefjp:master&#39; into master</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>b0cdd5c6805502d28d1db4fc471366572ff281c1:working_style.md</id>
      <updated>2025-09-05T21:31:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 86ed8088d..b0209396b 100644
--- a/working_style.md
+++ b/working_style.md
@@ -68,6 +68,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | arithmetic type                    | 算術型                       |
 | associative container(s)           | 連想コンテナ                 |
 | asynchronous operation             | 非同期操作                   |
+| async scope                        | 非同期スコープ               |
 | base class                         | 基底クラス                   |
 | bidirectional iterator             | 双方向イテレータ             |
 | bucket                             | バケット                     |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fwrite -- Added \n for fwrite.md</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fwrite.html"/>
      <id>471007848c5bc30943898cdb6ee5136b5fc2cda0:reference/cstdio/fwrite.md</id>
      <updated>2025-09-05T21:29:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fwrite.md b/reference/cstdio/fwrite.md
index b07ad0c4b..c21f708aa 100644
--- a/reference/cstdio/fwrite.md
+++ b/reference/cstdio/fwrite.md
@@ -42,7 +42,7 @@ int main() {
     return 1;
   }
 
-  const char data[] = &amp;#34;Hello, World!&amp;#34;;
+  const char data[] = &amp;#34;Hello, World!\n&amp;#34;;
   /*
   厳密には、sizeof(char)は1バイトであることが保証されているため、
   sizeof(data) - 1は、文字列の長さ（ヌル終端文字を除く）と等しくなる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>組み込み配列の比較を非推奨化 [P1120R0] -- Merge pull request #1528 from ACUVE/fix/P1120R0</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_array_comparisons.html"/>
      <id>3352c898d55c071d404dbc65195cbbe890ac7dc9:lang/cpp20/deprecate_array_comparisons.md</id>
      <updated>2025-09-04T00:08:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_array_comparisons.md b/lang/cpp20/deprecate_array_comparisons.md
index 72be0f359..cb0515bc5 100644
--- a/lang/cpp20/deprecate_array_comparisons.md
+++ b/lang/cpp20/deprecate_array_comparisons.md
@@ -17,7 +17,7 @@
 ```cpp
 int arr1[5];
 int arr2[5];
-bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr[0] == &amp;amp;arr[1]と同じ。
+bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr1[0] == &amp;amp;arr2[0]と同じ。
                           // 配列の要素は比較されない
 auto cmp = arr1 &amp;lt;=&amp;gt; arr2; // エラー！
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>組み込み配列の比較を非推奨化 [P1120R0] -- P1120R0: コメントの解説の誤植を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_array_comparisons.html"/>
      <id>1db2ef444f24ef0c04765f530fe956756994a8bb:lang/cpp20/deprecate_array_comparisons.md</id>
      <updated>2025-09-04T00:04:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_array_comparisons.md b/lang/cpp20/deprecate_array_comparisons.md
index 72be0f359..cb0515bc5 100644
--- a/lang/cpp20/deprecate_array_comparisons.md
+++ b/lang/cpp20/deprecate_array_comparisons.md
@@ -17,7 +17,7 @@
 ```cpp
 int arr1[5];
 int arr2[5];
-bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr[0] == &amp;amp;arr[1]と同じ。
+bool same = arr1 == arr2; // C++20で非推奨。&amp;amp;arr1[0] == &amp;amp;arr2[0]と同じ。
                           // 配列の要素は比較されない
 auto cmp = arr1 &amp;lt;=&amp;gt; arr2; // エラー！
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ACUVE</name>
        <email>601805+ACUVE@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった組み込み配列の比較を削除 [P2865R6] -- Merge pull request #1527 from ACUVE/fix/P2865R6</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/remove_deprecated_array_comparisons.html"/>
      <id>909d638caecaa7a6b61e1db5ab34a0ad5dd7be03:lang/cpp26/remove_deprecated_array_comparisons.md</id>
      <updated>2025-09-03T23:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/remove_deprecated_array_comparisons.md b/lang/cpp26/remove_deprecated_array_comparisons.md
index 83fff0fd0..308150ca1 100644
--- a/lang/cpp26/remove_deprecated_array_comparisons.md
+++ b/lang/cpp26/remove_deprecated_array_comparisons.md
@@ -18,7 +18,7 @@ C++20での[三方比較演算子](/lang/cpp20/consistent_comparison.md)の導
 int arr1[5];
 int arr2[5];
 bool same = arr1 == arr2; // C++20: 非推奨、C++26: エラー。
-                          // &amp;amp;arr[0] == &amp;amp;arr[1]と同じ。
+                          // &amp;amp;arr1[0] == &amp;amp;arr2[0]と同じ。
                           // 配列の要素は比較されない
 auto cmp = arr1 &amp;lt;=&amp;gt; arr2; // エラー！
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>