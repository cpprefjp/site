<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-10-03T04:26:26.309718</updated>
  <id>a9061ebd-5d24-4677-a5c7-2d3fa1452380</id>

  
    <entry>
      <title>flat_map -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>672506cc4e3b5e4ab07aca31d4ce8293a2363b6e:reference/flat_map/flat_map.md</id>
      <updated>2025-10-03T13:21:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 287f7b9bb..767f0fa32 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -20,7 +20,13 @@ namespace std {
 ## 概要
 `std::flat_map`は、重複しない要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-`std::flat_map`は、ノードベースで実装される[`std::map`](/reference/map/map.md)、ハッシュテーブルで実装される[`std::unordered_map`](/reference/unordered_map/unordered_map.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_map`は、ノードベースで実装される[`std::map`](/reference/map/map.md)、ハッシュテーブルで実装される[`std::unordered_map`](/reference/unordered_map/unordered_map.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::map`](/reference/map/map.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、[`std::unordered_map`](/reference/unordered_map/unordered_map.md)よりは劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列と値の配列の2つを内部で持ち、それを[`std::ranges::zip_view`](/reference/ranges/zip_view.md)で綴じあわせて扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multimap -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap.html"/>
      <id>672506cc4e3b5e4ab07aca31d4ce8293a2363b6e:reference/flat_map/flat_multimap.md</id>
      <updated>2025-10-03T13:21:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap.md b/reference/flat_map/flat_multimap.md
index d3f017722..6f4310952 100644
--- a/reference/flat_map/flat_multimap.md
+++ b/reference/flat_map/flat_multimap.md
@@ -20,7 +20,13 @@ namespace std {
 ## 概要
 `flat_multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-`std::flat_multimap`は、ノードベースで実装される[`std::multimap`](/reference/map/multimap.md)、ハッシュテーブルで実装される[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_multimap`は、ノードベースで実装される[`std::multimap`](/reference/map/multimap.md)、ハッシュテーブルで実装される[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::multimap`](/reference/map/multimap.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、[`std::unordered_multimap`](/reference/unordered_map/unordered_multimap.md)よりは劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列と値の配列の2つを内部で持ち、それを[`std::ranges::zip_view`](/reference/ranges/zip_view.md)で綴じあわせて扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multiset -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>672506cc4e3b5e4ab07aca31d4ce8293a2363b6e:reference/flat_set/flat_multiset.md</id>
      <updated>2025-10-03T13:21:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
index 7772514bb..ca7e9f6f6 100644
--- a/reference/flat_set/flat_multiset.md
+++ b/reference/flat_set/flat_multiset.md
@@ -18,7 +18,13 @@ namespace std {
 ## 概要
 `std::flat_multiset`は、重複する要素を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
-`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::multiset`](/reference/set/multiset.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)よりは劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- flat_map : 速度比較として検索がmapより遅いと書かれていたのを修正 #1531</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set.html"/>
      <id>672506cc4e3b5e4ab07aca31d4ce8293a2363b6e:reference/flat_set/flat_set.md</id>
      <updated>2025-10-03T13:21:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set.md b/reference/flat_set/flat_set.md
index 70debad4d..a60bc1659 100644
--- a/reference/flat_set/flat_set.md
+++ b/reference/flat_set/flat_set.md
@@ -18,7 +18,13 @@ namespace std {
 ## 概要
 `std::flat_set`は、重複しない要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
-`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。
+
+ほかの連想コンテナとの比較としては、
+
+- メモリ使用量と列挙速度において優位
+- 挿入速度と削除速度はほかの実装に劣る
+- 検索速度は、[`std::set`](/reference/set/set.md)より高速であることが期待できるが (計算量としては同じ対数時間だが、メモリアクセスが高速)、[`std::unordered_set`](/reference/unordered_set/unordered_set.md)よりは劣る
 
 また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::stack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>spawn -- Typo修正</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/spawn.html"/>
      <id>9e1ab85cca54ead1770ff96999a7c3228d0fb273:reference/execution/execution/spawn.md</id>
      <updated>2025-09-29T18:17:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/spawn.md b/reference/execution/execution/spawn.md
index 60caee00a..4cba44ec7 100644
--- a/reference/execution/execution/spawn.md
+++ b/reference/execution/execution/spawn.md
@@ -13,7 +13,7 @@ namespace std::execution {
 * unspecified[italic]
 
 ## 概要
-`spawn`は、入力[Sender](sender.md)に対して[非同期トークンスコープ](scope_token.md))への関連付けを試み、成功時に入力Senderを早期開始(eagerly start)させるSenderコンシューマである。
+`spawn`は、入力[Sender](sender.md)に対して[非同期トークンスコープ](scope_token.md)への関連付けを試み、成功時に入力Senderを早期開始(eagerly start)させるSenderコンシューマである。
 
 
 ## 効果
@@ -68,7 +68,6 @@ namespace std::execution {
 説明専用のクラステンプレート`spawn-state`を下記の通り定義する。
 
 ```cpp
-🔗
 namespace std::execution {
   template&amp;lt;class Alloc, scope_token Token, sender Sender&amp;gt;
   struct spawn-state : spawn-state-base {                   // exposition only
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 74cc78afc..c4c0adc76 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -140,7 +140,7 @@ namespace std::execution {
 |------|------|----------------|
 | [`this_thread::sync_wait`](this_thread/sync_wait.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
 | [`this_thread::sync_wait_with_variant`](this_thread/sync_wait_with_variant.md) | 現在のスレッド上でSender完了を待機 (customization point object) | C++26 |
-| [`execution::spawn`](execution/spawn.md.nolink) | 非同期操作を早期開始 (customization point object) | C++26 |
+| [`execution::spawn`](execution/spawn.md) | 非同期操作を早期開始 (customization point object) | C++26 |
 
 Senderコンシューマは名前空間 `std::this_thread` および名前空間 `std::execution` で定義される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/disassociate.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/counting_scope/token/disassociate.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/disassociate.md b/reference/execution/execution/counting_scope/token/disassociate.md
index fc09036bb..8ebf594ea 100644
--- a/reference/execution/execution/counting_scope/token/disassociate.md
+++ b/reference/execution/execution/counting_scope/token/disassociate.md
@@ -40,7 +40,7 @@ scope-&amp;gt;disassociate()
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/try_associate.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/counting_scope/token/try_associate.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/try_associate.md b/reference/execution/execution/counting_scope/token/try_associate.md
index 5bde327af..de9c2fd6c 100644
--- a/reference/execution/execution/counting_scope/token/try_associate.md
+++ b/reference/execution/execution/counting_scope/token/try_associate.md
@@ -40,7 +40,7 @@ return scope-&amp;gt;try-associate();
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/counting_scope/token/wrap.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/counting_scope/token/wrap.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/counting_scope/token/wrap.md b/reference/execution/execution/counting_scope/token/wrap.md
index 73588bf95..e69eef0d2 100644
--- a/reference/execution/execution/counting_scope/token/wrap.md
+++ b/reference/execution/execution/counting_scope/token/wrap.md
@@ -41,7 +41,7 @@ return stop-when(std::forward&amp;lt;Sender&amp;gt;(snd), scope-&amp;gt;s_source.get_token());
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scope_token -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scope_token.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/scope_token.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scope_token.md b/reference/execution/execution/scope_token.md
index b48655383..5aca3cc40 100644
--- a/reference/execution/execution/scope_token.md
+++ b/reference/execution/execution/scope_token.md
@@ -71,7 +71,7 @@ int main()
 ## 関連項目
 - [`execution::associate`](associate.md)
 - [`execution::spawn_future`](spawn_future.md.nolink)
-- [`execution::spawn`](spawn.md.nolink)
+- [`execution::spawn`](spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disassociate -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/disassociate.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/simple_counting_scope/token/disassociate.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/disassociate.md b/reference/execution/execution/simple_counting_scope/token/disassociate.md
index 6aa05a177..9943b7882 100644
--- a/reference/execution/execution/simple_counting_scope/token/disassociate.md
+++ b/reference/execution/execution/simple_counting_scope/token/disassociate.md
@@ -40,7 +40,7 @@ scope-&amp;gt;disassociate()
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_associate -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/try_associate.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/simple_counting_scope/token/try_associate.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/try_associate.md b/reference/execution/execution/simple_counting_scope/token/try_associate.md
index 5b0f184c4..43631ed3d 100644
--- a/reference/execution/execution/simple_counting_scope/token/try_associate.md
+++ b/reference/execution/execution/simple_counting_scope/token/try_associate.md
@@ -40,7 +40,7 @@ return scope-&amp;gt;try-associate();
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wrap -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/simple_counting_scope/token/wrap.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/simple_counting_scope/token/wrap.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/simple_counting_scope/token/wrap.md b/reference/execution/execution/simple_counting_scope/token/wrap.md
index 495fa0075..e29f11118 100644
--- a/reference/execution/execution/simple_counting_scope/token/wrap.md
+++ b/reference/execution/execution/simple_counting_scope/token/wrap.md
@@ -37,7 +37,7 @@ Sender&amp;amp;&amp;amp; wrap(Sender&amp;amp;&amp;amp; snd) const noexcept;
 ## 関連項目
 - [`execution::associate`](../../associate.md)
 - [`execution::spawn_future`](../../spawn_future.md.nolink)
-- [`execution::spawn`](../../spawn.md.nolink)
+- [`execution::spawn`](../../spawn.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>spawn -- execution: P3149R11 spawn(#1510)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/spawn.html"/>
      <id>d01bc0846d629899aefed6d163a9a437cec5c9c2:reference/execution/execution/spawn.md</id>
      <updated>2025-09-29T10:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/spawn.md b/reference/execution/execution/spawn.md
new file mode 100644
index 000000000..60caee00a
--- /dev/null
+++ b/reference/execution/execution/spawn.md
@@ -0,0 +1,221 @@
+# spawn
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct spawn_t { unspecified };
+  inline constexpr spawn_t spawn{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`spawn`は、入力[Sender](sender.md)に対して[非同期トークンスコープ](scope_token.md))への関連付けを試み、成功時に入力Senderを早期開始(eagerly start)させるSenderコンシューマである。
+
+
+## 効果
+説明用の式`sndr`, `token`, `env`に対して、下記の通り定義する。
+
+- `Sndr`型を`decltype((sndr))`、
+- `Token`型を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((token))&amp;gt;`、
+- `Env`型を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;decltype((env))&amp;gt;`とする。
+
+[`sender`](sender.md)`&amp;lt;Sndr&amp;gt;`, [`scope_token`](scope_token.md)`&amp;lt;Token&amp;gt;`, [`queryable`](../queryable.md)`&amp;lt;Env&amp;gt;`のいずれかを満たさないとき、呼び出し式`spawn(sndr, token, env)`は不適格となる。
+
+そうでなければ、呼び出し式`spawn(sndr, token, env)`に対して、説明用の式`new_sender`を[`token.wrap`](scope_token.md)`(sndr)`とし、`alloc`と`senv`を次の通りとする。
+
+- 式[`get_allocator`](../get_allocator.md)`(env)`が適格なとき、`alloc`を[`get_allocator`](../get_allocator.md)`(env)`の結果、`senv`を式`env`とする。
+- そうでなはく、式[`get_allocator`](../get_allocator.md)`(`[`get_env`](get_env.md)`(new_sender))`が適格なとき、`alloc`を[`get_allocator`](../get_allocator.md)`(`[`get_env`](get_env.md)`(new_sender))`の結果、`senv`を式[`JOIN-ENV`](../queryable.md)`(`[`prop`](prop.md)`(`[`get_allocator`](../get_allocator.md)`, alloc), env)`とする。
+- そうではないとき、`alloc`を[`allocator`](/reference/memory/allocator.md)`&amp;lt;void&amp;gt;()`、`senv`を式`env`とする。
+
+呼び出し式`spawn(sndr, token, env)`は`void`型であり、次の効果をもつ。
+
+- `alloc`を用いてメモリ確保し、`alloc`, [`write_env`](write_env.md)`(token.wrap(sndr), senv)`, `token`から特殊化された`spawn-state`型のオブジェクト`o`を構築し、`o.run()`を呼び出す。何らかのオブジェクト構築・破棄時に例外送出されたときは、確保されたメモリが解放される。
+
+式`spawn(sndr, token)`は、式`spawn(sndr, token,` [`execution::env&amp;lt;&amp;gt;`](env.md)`())`と等価である。
+
+
+## 説明専用エンティティ
+説明専用のクラス`spawn-state-base`を下記の通り定義する。
+
+```cpp
+namespace std::execution {
+  struct spawn-state-base {                // exposition only
+    virtual void complete() noexcept = 0;  // exposition only
+  };
+}
+```
+
+説明専用のクラス`spawn-receiver`を下記の通り定義する。
+
+```cpp
+namespace std::execution {
+  struct spawn-receiver {                  // exposition only
+    using receiver_concept = receiver_t;
+
+    spawn-state-base* state;               // exposition only
+    void set_value() &amp;amp;&amp;amp; noexcept { state-&amp;gt;complete(); }
+    void set_stopped() &amp;amp;&amp;amp; noexcept { state-&amp;gt;complete(); }
+  };
+}
+```
+* receiver_t[link receiver.md]
+* spawn-state-base[italic]
+
+説明専用のクラステンプレート`spawn-state`を下記の通り定義する。
+
+```cpp
+🔗
+namespace std::execution {
+  template&amp;lt;class Alloc, scope_token Token, sender Sender&amp;gt;
+  struct spawn-state : spawn-state-base {                   // exposition only
+    using op-t = connect_result_t&amp;lt;Sender, spawn-receiver&amp;gt;;  // exposition only
+
+    spawn-state(Alloc alloc, Sender&amp;amp;&amp;amp; sndr, Token token);   // exposition only
+    void complete() noexcept override;                      // exposition only
+    void run();                                             // exposition only
+
+  private:
+    using alloc-t =                                         // exposition only
+      typename allocator_traits&amp;lt;Alloc&amp;gt;::template rebind_alloc&amp;lt;spawn-state&amp;gt;;
+
+    alloc-t alloc;                                          // exposition only
+    op-t op;                                                // exposition only
+    Token token;                                            // exposition only
+
+    void destroy() noexcept;                                // exposition only
+  };
+}
+```
+* scope_token[link scope_token.md]
+* sender[link sender.md]
+* connect_result_t[link connect_result_t.md]
+* allocator_traits[link /reference/memory/allocator_traits.md]
+* spawn-state-base[italic]
+* spawn-receiver[italic]
+
+```cpp
+spawn-state(Alloc alloc, Sender&amp;amp;&amp;amp; sndr, Token token);
+```
+
+- 効果 : メンバ変数`alloc`を引数`alloc`で、メンバ変数`token`を引数`token`で、`op`を下記で初期化する。
+
+    ```cpp
+    connect(std::move(sndr), spawn-receiver(this))
+    ```
+    * connect[link connect.md]
+    * std::move[link /reference/utility/move.md]
+
+```cpp
+void run();
+```
+
+- 効果 : 下記と等価
+
+    ```cpp
+    if (token.try_associate())
+      start(op);
+    else
+      destroy();
+    ```
+    * start[link start.md]
+
+```cpp
+void complete() noexcept override;
+```
+
+- 効果 : 下記と等価
+
+    ```cpp
+    auto token = std::move(this-&amp;gt;token);
+
+    destroy();
+    token.disassociate();
+    ```
+    * std::move[link /reference/utility/move.md]
+
+```cpp
+void destroy() noexcept;
+```
+
+- 効果 ： 下記と等価
+
+    ```cpp
+    auto alloc = std::move(this-&amp;gt;alloc);
+
+    allocator_traits&amp;lt;alloc-t&amp;gt;::destroy(alloc, this);
+    allocator_traits&amp;lt;alloc-t&amp;gt;::deallocate(alloc, this, 1);
+    ```
+    * allocator_traits[link /reference/memory/allocator_traits.md]
+    * destroy[link /reference/memory/allocator_traits/destroy.md]
+    * deallocate[link /reference/memory/allocator_traits/deallocate.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  // システムスレッドプール上の実行タスクを定義
+  ex::scheduler auto sch = ex::get_parallel_scheduler();
+  ex::sender auto sndr =
+    ex::schedule(sch)
+    | ex::then([](){ std::println(&amp;#34;hello async&amp;#34;); });
+
+  // 非同期スコープを定義
+  ex::counting_scope scope;
+
+  // タスクを早期開始させる
+  std::println(&amp;#34;spawn&amp;#34;);
+  ex::spawn(std::move(sndr), scope.get_token());
+
+  // 非同期スコープを合流
+  std::println(&amp;#34;sync_wait&amp;#34;);
+  std::this_thread::sync_wait(scope.join());
+}
+```
+* ex::spawn[color ff0000]
+* ex::scheduler[link scheduler.md]
+* ex::get_parallel_scheduler()[link get_parallel_scheduler.md]
+* ex::sender[link sender.md]
+* ex::schedule[link schedule.md]
+* ex::then[link then.md]
+* ex::counting_scope[link counting_scope.md]
+* get_token()[link counting_scope/get_token.md]
+* join()[link counting_scope/join.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+spawn
+hello async
+sync_wait
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scope_token`](scope_token.md)
+- [`execution::spawn_future`](spawn_future.md.nolink)
+
+
+## 参照
+- [P3149R11 `async_scope` - Creating scopes for non-sequential concurrency](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3149r11.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_contains.html"/>
      <id>7e196a7a2a821780b84375546499a7f070061f96:reference/algorithm/ranges_contains.md</id>
      <updated>2025-09-29T02:15:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_contains.md b/reference/algorithm/ranges_contains.md
index 2f3e2ded3..761004798 100644
--- a/reference/algorithm/ranges_contains.md
+++ b/reference/algorithm/ranges_contains.md
@@ -5,7 +5,7 @@
 * cpp23[meta cpp]
 
 ```cpp
-namespace ranges {
+namespace std::ranges {
   template &amp;lt;input_iterator I,
             sentinel_for&amp;lt;I&amp;gt; S,
             class T,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run_loop -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop.html"/>
      <id>7e196a7a2a821780b84375546499a7f070061f96:reference/execution/execution/run_loop.md</id>
      <updated>2025-09-29T02:15:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop.md b/reference/execution/execution/run_loop.md
index df4115129..48b1f853c 100644
--- a/reference/execution/execution/run_loop.md
+++ b/reference/execution/execution/run_loop.md
@@ -5,7 +5,7 @@
 * cpp26[meta cpp]
 
 ```cpp
-namespace std::execition {
+namespace std::execution {
   class run_loop;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_random -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/random/generate_random.html"/>
      <id>7e196a7a2a821780b84375546499a7f070061f96:reference/random/generate_random.md</id>
      <updated>2025-09-29T02:15:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/generate_random.md b/reference/random/generate_random.md
index 8f6c41a7e..6b711fce4 100644
--- a/reference/random/generate_random.md
+++ b/reference/random/generate_random.md
@@ -1,6 +1,6 @@
 # generate_random
 * random[meta header]
-* std[meta namespace]
+* std::ranges[meta namespace]
 * function template[meta id-type]
 * cpp26[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_as_tuple -- 名前空間を修正</title>
      <link href="https://cpprefjp.github.io/reference/tuple/forward_as_tuple.html"/>
      <id>7e196a7a2a821780b84375546499a7f070061f96:reference/tuple/forward_as_tuple.md</id>
      <updated>2025-09-29T02:15:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/forward_as_tuple.md b/reference/tuple/forward_as_tuple.md
index f78e4365e..8cb930eb0 100644
--- a/reference/tuple/forward_as_tuple.md
+++ b/reference/tuple/forward_as_tuple.md
@@ -5,7 +5,7 @@
 * cpp11[meta cpp]
 
 ```cpp
-namespace {
+namespace std {
   template &amp;lt;class... Types&amp;gt;
   tuple&amp;lt;Types&amp;amp;&amp;amp;...&amp;gt; forward_as_tuple(Types&amp;amp;&amp;amp;...) noexcept;           // C++11
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignas [N2341] -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/alignas.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:lang/cpp11/alignas.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/alignas.md b/lang/cpp11/alignas.md
index fa86b3472..1d06bfb50 100644
--- a/lang/cpp11/alignas.md
+++ b/lang/cpp11/alignas.md
@@ -59,7 +59,7 @@ struct test {
 
 int distance(void *a, void *b)
 {
-  return reinterpret_cast&amp;lt;int&amp;gt;(a) - reinterpret_cast&amp;lt;int&amp;gt;(b);
+  return reinterpret_cast&amp;lt;char*&amp;gt;(a) - reinterpret_cast&amp;lt;char*&amp;gt;(b);
 }
 
 int main()
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_test_explicit -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_test_explicit.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/atomic/atomic_flag_test_explicit.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_test_explicit.md b/reference/atomic/atomic_flag_test_explicit.md
index d6e8d0b73..ba327e22f 100644
--- a/reference/atomic/atomic_flag_test_explicit.md
+++ b/reference/atomic/atomic_flag_test_explicit.md
@@ -55,12 +55,12 @@ int main()
   std::atomic_flag x = ATOMIC_FLAG_INIT;
   std::cout &amp;lt;&amp;lt; std::atomic_flag_test_explicit(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
 
-  std::atomic_flag_test_and_set(&amp;amp;x, std::memory_order::release);
+  std::atomic_flag_test_and_set_explicit(&amp;amp;x, std::memory_order::release);
   std::cout &amp;lt;&amp;lt; std::atomic_flag_test_explicit(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::atomic_flag_test_explicit[color ff0000]
-* std::atomic_flag_test_and_set[link atomic_flag_test_and_set.md]
+* std::atomic_flag_test_and_set_explicit[link atomic_flag_test_and_set_explicit.md]
 * ATOMIC_FLAG_INIT[link /reference/atomic/atomic_flag_init.md]
 * memory_order[link /reference/atomic/memory_order.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_wait -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive_and_wait.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/barrier/barrier/arrive_and_wait.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive_and_wait.md b/reference/barrier/barrier/arrive_and_wait.md
index 40920a753..2e0b3c915 100644
--- a/reference/barrier/barrier/arrive_and_wait.md
+++ b/reference/barrier/barrier/arrive_and_wait.md
@@ -55,7 +55,7 @@ int main()
   std::barrier&amp;lt;&amp;gt; sync{2};
 
   // ワーカスレッド起動
-  std::thread t1([&amp;amp;]{
+  std::thread t([&amp;amp;]{
     do_task(&amp;#34;sub:  phase-1&amp;#34;);
     sync.arrive_and_wait();
     do_task(&amp;#34;sub:  phase-2&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>close -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_filebuf/close.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/fstream/basic_filebuf/close.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_filebuf/close.md b/reference/fstream/basic_filebuf/close.md
index f97f54475..7db7604b2 100644
--- a/reference/fstream/basic_filebuf/close.md
+++ b/reference/fstream/basic_filebuf/close.md
@@ -40,7 +40,7 @@ put領域が存在する場合(ファイルを開いているなどして)、`ov
 
 int main()
 {
-  std::fstream fs();
+  std::fstream fs;
   std::filebuf* buf = fs.rdbuf();
 
   if (buf-&amp;gt;open(&amp;#34;foo&amp;#34;, std::ios_base::out)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke_r -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/invoke_r.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/functional/invoke_r.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/invoke_r.md b/reference/functional/invoke_r.md
index c5d679bde..499543f03 100644
--- a/reference/functional/invoke_r.md
+++ b/reference/functional/invoke_r.md
@@ -36,7 +36,7 @@ int ch() { return 0x43; }
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::invoke_r&amp;lt;char&amp;gt;(ch()) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::invoke_r&amp;lt;char&amp;gt;(ch) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::invoke_r[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_decrement.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/iterator/basic_const_iterator/op_decrement.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_decrement.md b/reference/iterator/basic_const_iterator/op_decrement.md
index 62bd96218..d80c64478 100644
--- a/reference/iterator/basic_const_iterator/op_decrement.md
+++ b/reference/iterator/basic_const_iterator/op_decrement.md
@@ -38,6 +38,7 @@ constexpr basic_const_iterator operator--(int) requires bidirectional_iterator&amp;lt;I
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
index 5f6815497..d19824a5e 100644
--- a/reference/iterator/basic_const_iterator/op_increment.md
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -41,6 +41,7 @@ constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterato
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_minus_assign.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/iterator/basic_const_iterator/op_minus_assign.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_minus_assign.md b/reference/iterator/basic_const_iterator/op_minus_assign.md
index e541d9000..e1f7004b1 100644
--- a/reference/iterator/basic_const_iterator/op_minus_assign.md
+++ b/reference/iterator/basic_const_iterator/op_minus_assign.md
@@ -30,6 +30,7 @@ return *this;
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_plus_assign.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/iterator/basic_const_iterator/op_plus_assign.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_plus_assign.md b/reference/iterator/basic_const_iterator/op_plus_assign.md
index 8a4b2da39..a1d87da61 100644
--- a/reference/iterator/basic_const_iterator/op_plus_assign.md
+++ b/reference/iterator/basic_const_iterator/op_plus_assign.md
@@ -31,6 +31,7 @@ return *this;
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_constructor.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/map/map/op_constructor.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_constructor.md b/reference/map/map/op_constructor.md
index 648874022..ab10b55cf 100644
--- a/reference/map/map/op_constructor.md
+++ b/reference/map/map/op_constructor.md
@@ -130,18 +130,18 @@ int main()
 {
   std::pair&amp;lt;const int,char&amp;gt; values[] = { std::make_pair(1,&amp;#39;a&amp;#39;), std::make_pair(2,&amp;#39;b&amp;#39;), std::make_pair(2,&amp;#39;b&amp;#39;) };
   std::map&amp;lt;int,char&amp;gt; m1(values, values + 3);
-  std::map&amp;lt;int,char&amp;gt; m2(c1);
+  std::map&amp;lt;int,char&amp;gt; m2(m1);
 
-  std::cout &amp;lt;&amp;lt; &amp;#34;Size of c1: &amp;#34; &amp;lt;&amp;lt; m1.size() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; &amp;#34;Size of c2: &amp;#34; &amp;lt;&amp;lt; m2.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Size of m1: &amp;#34; &amp;lt;&amp;lt; m1.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Size of m2: &amp;#34; &amp;lt;&amp;lt; m2.size() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * size()[link size.md]
 
 ### 出力
 ```
-Size of c1: 2
-Size of c2: 2
+Size of m1: 2
+Size of m2: 2
 ```
 
 ### 処理系
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_constructor.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/map/multimap/op_constructor.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_constructor.md b/reference/map/multimap/op_constructor.md
index 60dbbc6cd..4a4ce3067 100644
--- a/reference/map/multimap/op_constructor.md
+++ b/reference/map/multimap/op_constructor.md
@@ -133,7 +133,7 @@ int main()
 {
   std::pair&amp;lt;int,char&amp;gt; values[] = { std::make_pair(1,&amp;#39;a&amp;#39;), std::make_pair(2,&amp;#39;b&amp;#39;), std::make_pair(2,&amp;#39;b&amp;#39;) };
   std::multimap&amp;lt;int,char&amp;gt; m1(values, values + 3);
-  std::multimap&amp;lt;int,char&amp;gt; m2(c1);
+  std::multimap&amp;lt;int,char&amp;gt; m2(m1);
 
   std::cout &amp;lt;&amp;lt; &amp;#34;Size of m1: &amp;#34; &amp;lt;&amp;lt; m1.size() &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; &amp;#34;Size of m2: &amp;#34; &amp;lt;&amp;lt; m2.size() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>piecewise_constant_distribution -- いくつかのコード例のコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html"/>
      <id>a6d4fdb2ba58044e9a2dd2cd2d2f1f18885358f5:reference/random/piecewise_constant_distribution.md</id>
      <updated>2025-09-29T02:08:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/piecewise_constant_distribution.md b/reference/random/piecewise_constant_distribution.md
index 8ce154306..cde6a6853 100644
--- a/reference/random/piecewise_constant_distribution.md
+++ b/reference/random/piecewise_constant_distribution.md
@@ -73,7 +73,7 @@ int main()
 
   // [0.0, 5.0)の値は、0.3の確率で出現する。
   // [5.0, 10.0)の値は、0.5の確率で出現する。
-  std::array&amp;lt;double, 3&amp;gt; intervals = {0.0, 5.0, 10.0},
+  std::array&amp;lt;double, 3&amp;gt; intervals = {0.0, 5.0, 10.0};
   std::array&amp;lt;double, 2&amp;gt; densities = {0.3, 0.5};
 
   std::piecewise_constant_distribution&amp;lt;&amp;gt; dist(
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>